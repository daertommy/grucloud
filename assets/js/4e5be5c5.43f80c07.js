"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51846],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(t),m=o,h=l["".concat(c,".").concat(m)]||l[m]||d[m]||i;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},87085:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return l}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],s={id:"DatabaseAccountSqlContainer",title:"DatabaseAccountSqlContainer"},c=void 0,u={unversionedId:"azure/resources/DocumentDB/DatabaseAccountSqlContainer",id:"azure/resources/DocumentDB/DatabaseAccountSqlContainer",isDocsHomePage:!1,title:"DatabaseAccountSqlContainer",description:"Provides a DatabaseAccountSqlContainer from the DocumentDB group",source:"@site/docs/azure/resources/DocumentDB/DatabaseAccountSqlContainer.md",sourceDirName:"azure/resources/DocumentDB",slug:"/azure/resources/DocumentDB/DatabaseAccountSqlContainer",permalink:"/docs/azure/resources/DocumentDB/DatabaseAccountSqlContainer",tags:[],version:"current",frontMatter:{id:"DatabaseAccountSqlContainer",title:"DatabaseAccountSqlContainer"},sidebar:"docs",previous:{title:"DatabaseAccountMongoDBDatabaseThroughput",permalink:"/docs/azure/resources/DocumentDB/DatabaseAccountMongoDBDatabaseThroughput"},next:{title:"DatabaseAccountSqlContainerThroughput",permalink:"/docs/azure/resources/DocumentDB/DatabaseAccountSqlContainerThroughput"}},p=[{value:"Examples",id:"examples",children:[{value:"CosmosDBSqlContainerCreateUpdate",id:"cosmosdbsqlcontainercreateupdate",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],d={toc:p};function l(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a ",(0,i.kt)("strong",{parentName:"p"},"DatabaseAccountSqlContainer")," from the ",(0,i.kt)("strong",{parentName:"p"},"DocumentDB")," group"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"cosmosdbsqlcontainercreateupdate"},"CosmosDBSqlContainerCreateUpdate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "DatabaseAccountSqlContainer",\n    group: "DocumentDB",\n    name: "myDatabaseAccountSqlContainer",\n    properties: () => ({\n      properties: {\n        resource: {\n          id: "containerName",\n          indexingPolicy: {\n            indexingMode: "Consistent",\n            automatic: true,\n            includedPaths: [\n              {\n                path: "/*",\n                indexes: [\n                  { kind: "Range", dataType: "String", precision: -1 },\n                  { kind: "Range", dataType: "Number", precision: -1 },\n                ],\n              },\n            ],\n            excludedPaths: [],\n          },\n          partitionKey: { paths: ["/AccountNumber"], kind: "Hash" },\n          defaultTtl: 100,\n          uniqueKeyPolicy: { uniqueKeys: [{ paths: ["/testPath"] }] },\n          conflictResolutionPolicy: {\n            mode: "LastWriterWins",\n            conflictResolutionPath: "/path",\n          },\n        },\n        options: {},\n      },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      account: "myDatabaseAccount",\n      database: "myDatabaseAccountSqlDatabase",\n    }),\n  },\n];\n\n')),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/DatabaseAccount"},"DatabaseAccount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/DatabaseAccountSqlDatabase"},"DatabaseAccountSqlDatabase"))),(0,i.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'Parameters to create and update Cosmos DB container.',\n  type: 'object',\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties to create and update Azure Cosmos DB container.',\n      type: 'object',\n      properties: {\n        resource: {\n          description: 'The standard JSON format of a container',\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Name of the Cosmos DB SQL container'\n            },\n            indexingPolicy: {\n              description: 'The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container',\n              type: 'object',\n              properties: {\n                automatic: {\n                  type: 'boolean',\n                  description: 'Indicates if the indexing policy is automatic'\n                },\n                indexingMode: {\n                  description: 'Indicates the indexing mode.',\n                  type: 'string',\n                  default: 'Consistent',\n                  enum: [ 'Consistent', 'Lazy', 'None' ],\n                  'x-ms-enum': { name: 'IndexingMode', modelAsString: true }\n                },\n                includedPaths: {\n                  description: 'List of paths to include in the indexing',\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    description: 'The paths that are included in indexing',\n                    properties: {\n                      path: {\n                        type: 'string',\n                        description: 'The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)'\n                      },\n                      indexes: {\n                        description: 'List of indexes for this path',\n                        type: 'array',\n                        items: {\n                          type: 'object',\n                          description: 'The indexes for the path.',\n                          properties: {\n                            dataType: {\n                              description: 'The datatype for which the indexing behavior is applied to.',\n                              type: 'string',\n                              default: 'String',\n                              enum: [\n                                'String',\n                                'Number',\n                                'Point',\n                                'Polygon',\n                                'LineString',\n                                'MultiPolygon'\n                              ],\n                              'x-ms-enum': { name: 'DataType', modelAsString: true }\n                            },\n                            precision: {\n                              description: 'The precision of the index. -1 is maximum precision.',\n                              type: 'integer'\n                            },\n                            kind: {\n                              description: 'Indicates the type of index.',\n                              type: 'string',\n                              default: 'Hash',\n                              enum: [ 'Hash', 'Range', 'Spatial' ],\n                              'x-ms-enum': {\n                                name: 'IndexKind',\n                                modelAsString: true\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                excludedPaths: {\n                  description: 'List of paths to exclude from indexing',\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      path: {\n                        type: 'string',\n                        description: 'The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)'\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            partitionKey: {\n              description: 'The configuration of the partition key to be used for partitioning data into multiple partitions',\n              type: 'object',\n              properties: {\n                paths: {\n                  description: 'List of paths using which data within the container can be partitioned',\n                  type: 'array',\n                  items: {\n                    type: 'string',\n                    description: 'A path. These typically start with root (/path)'\n                  }\n                },\n                kind: {\n                  description: 'Indicates the kind of algorithm used for partitioning',\n                  type: 'string',\n                  default: 'Hash',\n                  enum: [ 'Hash', 'Range' ],\n                  'x-ms-enum': { name: 'PartitionKind', modelAsString: true }\n                }\n              }\n            },\n            defaultTtl: { type: 'integer', description: 'Default time to live' },\n            uniqueKeyPolicy: {\n              description: 'The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.',\n              type: 'object',\n              properties: {\n                uniqueKeys: {\n                  description: 'List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.',\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    description: 'The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service.',\n                    properties: {\n                      paths: {\n                        description: 'List of paths must be unique for each document in the Azure Cosmos DB service',\n                        type: 'array',\n                        items: {\n                          type: 'string',\n                          description: 'A path. These typically start with root (/path)'\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            conflictResolutionPolicy: {\n              description: 'The conflict resolution policy for the container.',\n              type: 'object',\n              properties: {\n                mode: {\n                  description: 'Indicates the conflict resolution mode.',\n                  type: 'string',\n                  default: 'LastWriterWins',\n                  enum: [ 'LastWriterWins', 'Custom' ],\n                  'x-ms-enum': {\n                    name: 'ConflictResolutionMode',\n                    modelAsString: true\n                  }\n                },\n                conflictResolutionPath: {\n                  type: 'string',\n                  description: 'The conflict resolution path in the case of LastWriterWins mode.'\n                },\n                conflictResolutionProcedure: {\n                  type: 'string',\n                  description: 'The procedure to resolve conflicts in the case of custom mode.'\n                }\n              }\n            }\n          },\n          required: [ 'id' ]\n        },\n        options: {\n          description: 'A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.',\n          type: 'object',\n          additionalProperties: { type: 'string' }\n        }\n      },\n      required: [ 'resource', 'options' ]\n    }\n  },\n  required: [ 'properties' ]\n}\n")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("p",null,"The resource version is ",(0,i.kt)("inlineCode",{parentName:"p"},"2016-03-31"),"."),(0,i.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2016-03-31/cosmos-db.json"},"here"),"."))}l.isMDXComponent=!0}}]);