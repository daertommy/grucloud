"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[25777],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=i,m=d["".concat(c,".").concat(f)]||d[f]||l[f]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},22527:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(87462),i=n(63366),a=(n(67294),n(3905)),o=["components"],s={id:"Certificate",title:"Certificate"},c=void 0,p={unversionedId:"azure/resources/Web/Certificate",id:"azure/resources/Web/Certificate",isDocsHomePage:!1,title:"Certificate",description:"Provides a Certificate from the Web group",source:"@site/docs/azure/resources/Web/Certificate.md",sourceDirName:"azure/resources/Web",slug:"/azure/resources/Web/Certificate",permalink:"/docs/azure/resources/Web/Certificate",tags:[],version:"current",frontMatter:{id:"Certificate",title:"Certificate"},sidebar:"docs",previous:{title:"AppServicePlan",permalink:"/docs/azure/resources/Web/AppServicePlan"},next:{title:"CertificateOrder",permalink:"/docs/azure/resources/Web/CertificateOrder"}},u=[{value:"Examples",id:"examples",children:[{value:"Create Or Update Certificate",id:"create-or-update-certificate",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],l={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Provides a ",(0,a.kt)("strong",{parentName:"p"},"Certificate")," from the ",(0,a.kt)("strong",{parentName:"p"},"Web")," group"),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"create-or-update-certificate"},"Create Or Update Certificate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "Certificate",\n    group: "Web",\n    name: "myCertificate",\n    properties: () => ({\n      location: "East US",\n      properties: { hostNames: ["ServerCert"], password: "<password>" },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      hostingEnvironment: "myHostingEnvironment",\n      appServicePlan: "myAppServicePlan",\n    }),\n  },\n];\n\n')),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/azure/resources/Web/HostingEnvironment"},"HostingEnvironment")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/azure/resources/Web/AppServicePlan"},"AppServicePlan"))),(0,a.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'SSL certificate for an app.',\n  type: 'object',\n  allOf: [\n    {\n      description: 'Azure resource. This resource is tracked in Azure Resource Manager',\n      required: [ 'location' ],\n      type: 'object',\n      properties: {\n        id: { description: 'Resource Id.', type: 'string', readOnly: true },\n        name: {\n          description: 'Resource Name.',\n          type: 'string',\n          readOnly: true\n        },\n        kind: { description: 'Kind of resource.', type: 'string' },\n        location: { description: 'Resource Location.', type: 'string' },\n        type: {\n          description: 'Resource type.',\n          type: 'string',\n          readOnly: true\n        },\n        tags: {\n          description: 'Resource tags.',\n          type: 'object',\n          additionalProperties: { type: 'string' }\n        }\n      },\n      'x-ms-azure-resource': true\n    }\n  ],\n  properties: {\n    properties: {\n      description: 'Certificate resource specific properties',\n      type: 'object',\n      properties: {\n        password: {\n          description: 'Certificate password.',\n          type: 'string',\n          'x-ms-mutability': [ 'create' ]\n        },\n        friendlyName: {\n          description: 'Friendly name of the certificate.',\n          type: 'string',\n          readOnly: true\n        },\n        subjectName: {\n          description: 'Subject name of the certificate.',\n          type: 'string',\n          readOnly: true\n        },\n        hostNames: {\n          description: 'Host names the certificate applies to.',\n          type: 'array',\n          items: { type: 'string' }\n        },\n        pfxBlob: { format: 'byte', description: 'Pfx blob.', type: 'string' },\n        siteName: { description: 'App name.', type: 'string', readOnly: true },\n        selfLink: { description: 'Self link.', type: 'string', readOnly: true },\n        issuer: {\n          description: 'Certificate issuer.',\n          type: 'string',\n          readOnly: true\n        },\n        issueDate: {\n          format: 'date-time',\n          description: 'Certificate issue Date.',\n          type: 'string',\n          readOnly: true\n        },\n        expirationDate: {\n          format: 'date-time',\n          description: 'Certificate expiration date.',\n          type: 'string',\n          readOnly: true\n        },\n        thumbprint: {\n          description: 'Certificate thumbprint.',\n          type: 'string',\n          readOnly: true\n        },\n        valid: {\n          description: 'Is the certificate valid?.',\n          type: 'boolean',\n          readOnly: true\n        },\n        cerBlob: {\n          format: 'byte',\n          description: 'Raw bytes of .cer file',\n          type: 'string',\n          readOnly: true\n        },\n        publicKeyHash: {\n          description: 'Public key hash.',\n          type: 'string',\n          readOnly: true\n        },\n        hostingEnvironmentProfile: {\n          description: 'Specification for the App Service Environment to use for the certificate.',\n          readOnly: true,\n          type: 'object',\n          properties: {\n            id: {\n              description: 'Resource ID of the App Service Environment.',\n              type: 'string'\n            },\n            name: {\n              description: 'Name of the App Service Environment.',\n              type: 'string',\n              readOnly: true\n            },\n            type: {\n              description: 'Resource type of the App Service Environment.',\n              type: 'string',\n              readOnly: true\n            }\n          }\n        },\n        keyVaultId: { description: 'Key Vault Csm resource Id.', type: 'string' },\n        keyVaultSecretName: { description: 'Key Vault secret name.', type: 'string' },\n        keyVaultSecretStatus: {\n          description: 'Status of the Key Vault secret.',\n          enum: [\n            'Initialized',\n            'WaitingOnCertificateOrder',\n            'Succeeded',\n            'CertificateOrderFailed',\n            'OperationNotPermittedOnKeyVault',\n            'AzureServiceUnauthorizedToAccessKeyVault',\n            'KeyVaultDoesNotExist',\n            'KeyVaultSecretDoesNotExist',\n            'UnknownError',\n            'ExternalPrivateKey',\n            'Unknown'\n          ],\n          type: 'string',\n          readOnly: true,\n          'x-ms-enum': { name: 'KeyVaultSecretStatus', modelAsString: false }\n        },\n        serverFarmId: {\n          description: 'Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".',\n          type: 'string'\n        },\n        canonicalName: {\n          description: 'CNAME of the certificate to be issued via free certificate',\n          type: 'string'\n        },\n        domainValidationMethod: {\n          description: 'Method of domain validation for free cert',\n          type: 'string'\n        }\n      },\n      'x-ms-client-flatten': true\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"misc"},"Misc"),(0,a.kt)("p",null,"The resource version is ",(0,a.kt)("inlineCode",{parentName:"p"},"2021-03-01"),"."),(0,a.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/web/resource-manager/Microsoft.Web/stable/2021-03-01/Certificates.json"},"here"),"."))}d.isMDXComponent=!0}}]);