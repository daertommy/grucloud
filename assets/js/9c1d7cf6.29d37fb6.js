"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[47259],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a=o.createContext({}),p=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(a.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),g=r,m=d["".concat(a,".").concat(g)]||d[g]||l[g]||i;return t?o.createElement(m,s(s({ref:n},u),{},{components:t})):o.createElement(m,s({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var p=2;p<i;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},28656:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var o=t(87462),r=t(63366),i=(t(67294),t(3905)),s=["components"],c={id:"MongoDBResourceMongoDBCollection",title:"MongoDBResourceMongoDBCollection"},a=void 0,p={unversionedId:"azure/resources/DocumentDB/MongoDBResourceMongoDBCollection",id:"azure/resources/DocumentDB/MongoDBResourceMongoDBCollection",isDocsHomePage:!1,title:"MongoDBResourceMongoDBCollection",description:"Provides a MongoDBResourceMongoDBCollection from the DocumentDB group",source:"@site/docs/azure/resources/DocumentDB/MongoDBResourceMongoDBCollection.md",sourceDirName:"azure/resources/DocumentDB",slug:"/azure/resources/DocumentDB/MongoDBResourceMongoDBCollection",permalink:"/docs/azure/resources/DocumentDB/MongoDBResourceMongoDBCollection",tags:[],version:"current",frontMatter:{id:"MongoDBResourceMongoDBCollection",title:"MongoDBResourceMongoDBCollection"},sidebar:"docs",previous:{title:"GremlinResourceGremlinGraphThroughput",permalink:"/docs/azure/resources/DocumentDB/GremlinResourceGremlinGraphThroughput"},next:{title:"MongoDBResourceMongoDBCollectionThroughput",permalink:"/docs/azure/resources/DocumentDB/MongoDBResourceMongoDBCollectionThroughput"}},u=[{value:"Examples",id:"examples",children:[{value:"CosmosDBMongoDBCollectionCreateUpdate",id:"cosmosdbmongodbcollectioncreateupdate",children:[],level:3}],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Swagger Schema",id:"swagger-schema",children:[],level:2},{value:"Misc",id:"misc",children:[],level:2}],l={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Provides a ",(0,i.kt)("strong",{parentName:"p"},"MongoDBResourceMongoDBCollection")," from the ",(0,i.kt)("strong",{parentName:"p"},"DocumentDB")," group"),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"cosmosdbmongodbcollectioncreateupdate"},"CosmosDBMongoDBCollectionCreateUpdate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "MongoDBResourceMongoDBCollection",\n    group: "DocumentDB",\n    name: "myMongoDBResourceMongoDBCollection",\n    properties: () => ({\n      location: "West US",\n      tags: {},\n      properties: {\n        resource: {\n          id: "collectionName",\n          indexes: [\n            {\n              key: { keys: ["_ts"] },\n              options: { expireAfterSeconds: 100, unique: true },\n            },\n            { key: { keys: ["_id"] } },\n          ],\n          shardKey: { testKey: "Hash" },\n          analyticalStorageTtl: 500,\n        },\n        options: {},\n      },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      account: "myDatabaseAccount",\n      database: "myMongoDBResourceMongoDBDatabase",\n    }),\n  },\n];\n\n')),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/DatabaseAccount"},"DatabaseAccount")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/MongoDBResourceMongoDBDatabase"},"MongoDBResourceMongoDBDatabase"))),(0,i.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'Parameters to create and update Cosmos DB MongoDB collection.',\n  type: 'object',\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties to create and update Azure Cosmos DB MongoDB collection.',\n      type: 'object',\n      properties: {\n        resource: {\n          description: 'The standard JSON format of a MongoDB collection',\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Name of the Cosmos DB MongoDB collection'\n            },\n            shardKey: {\n              description: 'A key-value pair of shard keys to be applied for the request.',\n              type: 'object',\n              additionalProperties: { type: 'string' }\n            },\n            indexes: {\n              description: 'List of index keys',\n              type: 'array',\n              items: {\n                type: 'object',\n                description: 'Cosmos DB MongoDB collection index key',\n                properties: {\n                  key: {\n                    description: 'Cosmos DB MongoDB collection index keys',\n                    type: 'object',\n                    properties: {\n                      keys: {\n                        description: 'List of keys for each MongoDB collection in the Azure Cosmos DB service',\n                        type: 'array',\n                        items: { type: 'string', description: 'A Key.' }\n                      }\n                    }\n                  },\n                  options: {\n                    description: 'Cosmos DB MongoDB collection index key options',\n                    type: 'object',\n                    properties: {\n                      expireAfterSeconds: {\n                        description: 'Expire after seconds',\n                        type: 'integer'\n                      },\n                      unique: {\n                        description: 'Is unique or not',\n                        type: 'boolean'\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            analyticalStorageTtl: { type: 'integer', description: 'Analytical TTL.' }\n          },\n          required: [ 'id' ]\n        },\n        options: {\n          description: 'A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.',\n          type: 'object',\n          properties: {\n            throughput: {\n              type: 'integer',\n              description: 'Request Units per second. For example, \"throughput\": 10000.'\n            },\n            autoscaleSettings: {\n              description: 'Specifies the Autoscale settings.',\n              type: 'object',\n              properties: {\n                maxThroughput: {\n                  type: 'integer',\n                  description: 'Represents maximum throughput, the resource can scale up to.'\n                }\n              }\n            }\n          }\n        }\n      },\n      required: [ 'resource' ]\n    }\n  },\n  allOf: [\n    {\n      type: 'object',\n      description: 'The core properties of ARM resources.',\n      properties: {\n        id: {\n          readOnly: true,\n          type: 'string',\n          description: 'The unique resource identifier of the ARM resource.'\n        },\n        name: {\n          readOnly: true,\n          type: 'string',\n          description: 'The name of the ARM resource.'\n        },\n        type: {\n          readOnly: true,\n          type: 'string',\n          description: 'The type of Azure resource.'\n        },\n        location: {\n          type: 'string',\n          description: 'The location of the resource group to which the resource belongs.'\n        },\n        tags: {\n          type: 'object',\n          additionalProperties: { type: 'string' },\n          description: 'Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".'\n        },\n        identity: {\n          properties: {\n            principalId: {\n              readOnly: true,\n              type: 'string',\n              description: 'The principal id of the system assigned identity. This property will only be provided for a system assigned identity.'\n            },\n            tenantId: {\n              readOnly: true,\n              type: 'string',\n              description: 'The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.'\n            },\n            type: {\n              type: 'string',\n              description: \"The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service.\",\n              enum: [\n                'SystemAssigned',\n                'UserAssigned',\n                'SystemAssigned,UserAssigned',\n                'None'\n              ],\n              'x-ms-enum': { name: 'ResourceIdentityType', modelAsString: false }\n            },\n            userAssignedIdentities: {\n              type: 'object',\n              additionalProperties: {\n                type: 'object',\n                properties: {\n                  principalId: {\n                    readOnly: true,\n                    type: 'string',\n                    description: 'The principal id of user assigned identity.'\n                  },\n                  clientId: {\n                    readOnly: true,\n                    type: 'string',\n                    description: 'The client id of user assigned identity.'\n                  }\n                }\n              },\n              description: \"The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\"\n            }\n          },\n          description: 'Identity for the resource.'\n        }\n      },\n      'x-ms-azure-resource': true\n    }\n  ],\n  required: [ 'properties' ]\n}\n")),(0,i.kt)("h2",{id:"misc"},"Misc"),(0,i.kt)("p",null,"The resource version is ",(0,i.kt)("inlineCode",{parentName:"p"},"2022-02-15-preview"),"."),(0,i.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2022-02-15-preview/cosmos-db.json"},"here"),"."))}d.isMDXComponent=!0}}]);