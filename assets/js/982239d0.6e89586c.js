"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[71944],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>m});var a=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=a.createContext({}),p=function(e){var n=a.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},l=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(r),m=t,y=l["".concat(i,".").concat(m)]||l[m]||d[m]||s;return r?a.createElement(y,o(o({ref:n},u),{},{components:r})):a.createElement(y,o({ref:n},u))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,o=new Array(s);o[0]=l;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:t,o[1]=c;for(var p=2;p<s;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}l.displayName="MDXCreateElement"},10829:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=r(87462),t=(r(67294),r(3905));const s={id:"CassandraResourceCassandraTable",title:"CassandraResourceCassandraTable"},o=void 0,c={unversionedId:"azure/resources/DocumentDB/CassandraResourceCassandraTable",id:"azure/resources/DocumentDB/CassandraResourceCassandraTable",title:"CassandraResourceCassandraTable",description:"Provides a CassandraResourceCassandraTable from the DocumentDB group",source:"@site/docs/azure/resources/DocumentDB/CassandraResourceCassandraTable.md",sourceDirName:"azure/resources/DocumentDB",slug:"/azure/resources/DocumentDB/CassandraResourceCassandraTable",permalink:"/docs/azure/resources/DocumentDB/CassandraResourceCassandraTable",draft:!1,tags:[],version:"current",frontMatter:{id:"CassandraResourceCassandraTable",title:"CassandraResourceCassandraTable"},sidebar:"docs",previous:{title:"CassandraResourceCassandraKeyspaceThroughput",permalink:"/docs/azure/resources/DocumentDB/CassandraResourceCassandraKeyspaceThroughput"},next:{title:"CassandraResourceCassandraTableThroughput",permalink:"/docs/azure/resources/DocumentDB/CassandraResourceCassandraTableThroughput"}},i={},p=[{value:"Examples",id:"examples",level:2},{value:"CosmosDBCassandraTableCreateUpdate",id:"cosmosdbcassandratablecreateupdate",level:3},{value:"Dependencies",id:"dependencies",level:2},{value:"Swagger Schema",id:"swagger-schema",level:2},{value:"Misc",id:"misc",level:2}],u={toc:p};function d(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Provides a ",(0,t.kt)("strong",{parentName:"p"},"CassandraResourceCassandraTable")," from the ",(0,t.kt)("strong",{parentName:"p"},"DocumentDB")," group"),(0,t.kt)("h2",{id:"examples"},"Examples"),(0,t.kt)("h3",{id:"cosmosdbcassandratablecreateupdate"},"CosmosDBCassandraTableCreateUpdate"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "CassandraResourceCassandraTable",\n    group: "DocumentDB",\n    name: "myCassandraResourceCassandraTable",\n    properties: () => ({\n      location: "West US",\n      tags: {},\n      properties: {\n        resource: {\n          id: "tableName",\n          defaultTtl: 100,\n          schema: {\n            columns: [{ name: "columnA", type: "Ascii" }],\n            partitionKeys: [{ name: "columnA" }],\n            clusterKeys: [{ name: "columnA", orderBy: "Asc" }],\n          },\n        },\n        options: {},\n      },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      account: "myDatabaseAccount",\n      keyspace: "myCassandraResourceCassandraKeyspace",\n    }),\n  },\n];\n\n')),(0,t.kt)("h2",{id:"dependencies"},"Dependencies"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/DatabaseAccount"},"DatabaseAccount")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/CassandraResourceCassandraKeyspace"},"CassandraResourceCassandraKeyspace"))),(0,t.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'Parameters to create and update Cosmos DB Cassandra table.',\n  type: 'object',\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties to create and update Azure Cosmos DB Cassandra table.',\n      type: 'object',\n      properties: {\n        resource: {\n          description: 'The standard JSON format of a Cassandra table',\n          type: 'object',\n          properties: {\n            id: {\n              type: 'string',\n              description: 'Name of the Cosmos DB Cassandra table'\n            },\n            defaultTtl: {\n              type: 'integer',\n              description: 'Time to live of the Cosmos DB Cassandra table'\n            },\n            schema: {\n              description: 'Schema of the Cosmos DB Cassandra table',\n              type: 'object',\n              properties: {\n                columns: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    description: 'Cosmos DB Cassandra table column',\n                    properties: {\n                      name: {\n                        type: 'string',\n                        description: 'Name of the Cosmos DB Cassandra table column'\n                      },\n                      type: {\n                        type: 'string',\n                        description: 'Type of the Cosmos DB Cassandra table column'\n                      }\n                    }\n                  },\n                  description: 'List of Cassandra table columns.'\n                },\n                partitionKeys: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    description: 'Cosmos DB Cassandra table partition key',\n                    properties: {\n                      name: {\n                        type: 'string',\n                        description: 'Name of the Cosmos DB Cassandra table partition key'\n                      }\n                    }\n                  },\n                  description: 'List of partition key.'\n                },\n                clusterKeys: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    description: 'Cosmos DB Cassandra table cluster key',\n                    properties: {\n                      name: {\n                        type: 'string',\n                        description: 'Name of the Cosmos DB Cassandra table cluster key'\n                      },\n                      orderBy: {\n                        type: 'string',\n                        description: 'Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\"'\n                      }\n                    }\n                  },\n                  description: 'List of cluster key.'\n                }\n              }\n            },\n            analyticalStorageTtl: { type: 'integer', description: 'Analytical TTL.' }\n          },\n          required: [ 'id' ]\n        },\n        options: {\n          description: 'A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request.',\n          type: 'object',\n          properties: {\n            throughput: {\n              type: 'integer',\n              description: 'Request Units per second. For example, \"throughput\": 10000.'\n            },\n            autoscaleSettings: {\n              description: 'Specifies the Autoscale settings.',\n              type: 'object',\n              properties: {\n                maxThroughput: {\n                  type: 'integer',\n                  description: 'Represents maximum throughput, the resource can scale up to.'\n                }\n              }\n            }\n          }\n        }\n      },\n      required: [ 'resource' ]\n    }\n  },\n  allOf: [\n    {\n      type: 'object',\n      description: 'The core properties of ARM resources.',\n      properties: {\n        id: {\n          readOnly: true,\n          type: 'string',\n          description: 'The unique resource identifier of the ARM resource.'\n        },\n        name: {\n          readOnly: true,\n          type: 'string',\n          description: 'The name of the ARM resource.'\n        },\n        type: {\n          readOnly: true,\n          type: 'string',\n          description: 'The type of Azure resource.'\n        },\n        location: {\n          type: 'string',\n          description: 'The location of the resource group to which the resource belongs.'\n        },\n        tags: {\n          type: 'object',\n          additionalProperties: { type: 'string' },\n          description: 'Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\".'\n        }\n      },\n      'x-ms-azure-resource': true\n    }\n  ],\n  required: [ 'properties' ]\n}\n")),(0,t.kt)("h2",{id:"misc"},"Misc"),(0,t.kt)("p",null,"The resource version is ",(0,t.kt)("inlineCode",{parentName:"p"},"2022-05-15"),"."),(0,t.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2022-05-15/cosmos-db.json"},"here"),"."))}d.isMDXComponent=!0}}]);