"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66160],{3905:(e,n,o)=>{o.d(n,{Zo:()=>p,kt:()=>d});var r=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function s(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?s(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,r,t=function(e,n){if(null==e)return{};var o,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var c=r.createContext({}),u=function(e){var n=r.useContext(c),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},p=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var o=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=u(o),d=t,g=m["".concat(c,".").concat(d)]||m[d]||l[d]||s;return o?r.createElement(g,i(i({ref:n},p),{},{components:o})):r.createElement(g,i({ref:n},p))}));function d(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=o.length,i=new Array(s);i[0]=m;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:t,i[1]=a;for(var u=2;u<s;u++)i[u]=o[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},27774:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=o(87462),t=(o(67294),o(3905));const s={id:"MongoDBResourceMongoUserDefinition",title:"MongoDBResourceMongoUserDefinition"},i=void 0,a={unversionedId:"azure/resources/DocumentDB/MongoDBResourceMongoUserDefinition",id:"azure/resources/DocumentDB/MongoDBResourceMongoUserDefinition",title:"MongoDBResourceMongoUserDefinition",description:"Provides a MongoDBResourceMongoUserDefinition from the DocumentDB group",source:"@site/docs/azure/resources/DocumentDB/MongoDBResourceMongoUserDefinition.md",sourceDirName:"azure/resources/DocumentDB",slug:"/azure/resources/DocumentDB/MongoDBResourceMongoUserDefinition",permalink:"/docs/azure/resources/DocumentDB/MongoDBResourceMongoUserDefinition",draft:!1,tags:[],version:"current",frontMatter:{id:"MongoDBResourceMongoUserDefinition",title:"MongoDBResourceMongoUserDefinition"},sidebar:"docs",previous:{title:"MongoDBResourceMongoRoleDefinition",permalink:"/docs/azure/resources/DocumentDB/MongoDBResourceMongoRoleDefinition"},next:{title:"NotebookWorkspace",permalink:"/docs/azure/resources/DocumentDB/NotebookWorkspace"}},c={},u=[{value:"Examples",id:"examples",level:2},{value:"CosmosDBMongoDBUserDefinitionCreateUpdate",id:"cosmosdbmongodbuserdefinitioncreateupdate",level:3},{value:"Dependencies",id:"dependencies",level:2},{value:"Swagger Schema",id:"swagger-schema",level:2},{value:"Misc",id:"misc",level:2}],p={toc:u};function l(e){let{components:n,...o}=e;return(0,t.kt)("wrapper",(0,r.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Provides a ",(0,t.kt)("strong",{parentName:"p"},"MongoDBResourceMongoUserDefinition")," from the ",(0,t.kt)("strong",{parentName:"p"},"DocumentDB")," group"),(0,t.kt)("h2",{id:"examples"},"Examples"),(0,t.kt)("h3",{id:"cosmosdbmongodbuserdefinitioncreateupdate"},"CosmosDBMongoDBUserDefinitionCreateUpdate"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'exports.createResources = () => [\n  {\n    type: "MongoDBResourceMongoUserDefinition",\n    group: "DocumentDB",\n    name: "myMongoDBResourceMongoUserDefinition",\n    properties: () => ({\n      properties: {\n        userName: "myUserName",\n        password: "myPassword",\n        databaseName: "sales",\n        customData: "My custom data",\n        roles: [{ role: "myReadRole", db: "sales" }],\n        mechanisms: "SCRAM-SHA-256",\n      },\n    }),\n    dependencies: ({}) => ({\n      resourceGroup: "myResourceGroup",\n      account: "myDatabaseAccount",\n    }),\n  },\n];\n\n')),(0,t.kt)("h2",{id:"dependencies"},"Dependencies"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/azure/resources/Resources/ResourceGroup"},"ResourceGroup")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/docs/azure/resources/DocumentDB/DatabaseAccount"},"DatabaseAccount"))),(0,t.kt)("h2",{id:"swagger-schema"},"Swagger Schema"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"{\n  description: 'Parameters to create and update an Azure Cosmos DB Mongo User Definition.',\n  type: 'object',\n  properties: {\n    properties: {\n      'x-ms-client-flatten': true,\n      description: 'Properties to create and update an Azure Cosmos DB Mongo User Definition.',\n      type: 'object',\n      properties: {\n        userName: {\n          type: 'string',\n          description: 'The user name for User Definition.'\n        },\n        password: {\n          type: 'string',\n          description: 'The password for User Definition. Response does not contain user password.'\n        },\n        databaseName: {\n          type: 'string',\n          description: 'The database name for which access is being granted for this User Definition.'\n        },\n        customData: {\n          type: 'string',\n          description: 'A custom definition for the USer Definition.'\n        },\n        roles: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              db: {\n                type: 'string',\n                description: 'The database name the role is applied.'\n              },\n              role: { type: 'string', description: 'The role name.' }\n            },\n            description: 'The set of roles permitted through this Role Definition.'\n          },\n          description: 'The set of roles inherited by the User Definition.'\n        },\n        mechanisms: {\n          type: 'string',\n          description: 'The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256.'\n        }\n      }\n    }\n  }\n}\n")),(0,t.kt)("h2",{id:"misc"},"Misc"),(0,t.kt)("p",null,"The resource version is ",(0,t.kt)("inlineCode",{parentName:"p"},"2022-05-15-preview"),"."),(0,t.kt)("p",null,"The Swagger schema used to generate this documentation can be found ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-rest-api-specs/tree/main/specification/cosmos-db/resource-manager/Microsoft.DocumentDB/preview/2022-05-15-preview/mongorbac.json"},"here"),"."))}l.isMDXComponent=!0}}]);