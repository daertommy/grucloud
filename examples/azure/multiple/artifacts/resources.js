// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "0e4306a9-b8fd-4637-bfce-e5ce05940ef7",
    properties: ({}) => ({
      name: "0e4306a9-b8fd-4637-bfce-e5ce05940ef7",
      properties: {
        roleName: "Virtual Machine User Login",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
    dependencies: () => ({
      scopeResourceGroup: "rg-vm-ad-login",
    }),
  });

  provider.Compute.makeDisk({
    name: "rg-vm-disks::vm_datadisk_0",
    properties: ({}) => ({
      name: "vm_datadisk_0",
      sku: {
        name: "Premium_LRS",
      },
      properties: {
        creationData: {
          createOption: "Empty",
        },
        diskSizeGB: 1,
        diskIOPSReadWrite: 120,
        diskMBpsReadWrite: 25,
        encryption: {
          type: "EncryptionAtRestWithPlatformKey",
        },
        networkAccessPolicy: "AllowAll",
        tier: "P1",
        publicNetworkAccess: "Enabled",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
    }),
  });

  provider.Compute.makeSshPublicKey({
    name: "rg-load-balancer::vmss_key",
    properties: ({}) => ({
      name: "vmss_key",
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxXnVXbmiV4UWi7FTpR4mWx4pp\r\nM+9t/77vpw3rwtFW/n0V/2N6+j9yuCP5Mu2Pi7c+i8UQ3bkofHOpjsk4uAu0vr8a\r\nC0/LPiHFmlvtEfKvomoNtLO5iRnTjpsPFFqvfNQJKDsOnGoBO4pAF2xdr96V2Doh\r\nggxdj5ZyGh0EbQqm/XKrW1boOYkoqxGQKO8EZj4l0qWzRmpMw2NXQtqOO+pJ2IVJ\r\nhQOwnXk4G/v9yxogwuUGp4cFu02bix72LzRgzXLfsFkQqwRSg50xlNqsoBysTPhb\r\nibQhLNbSHqJtyXgoPNuEohREjuH1EjU0tFJrv285xd7xWRnVyG2w6+WWckr84uwO\r\no3456BJWD9PoQvXTJVMhR1iR8J8FesqZP1JwrV3CLS205z6z5GLgcKulVsCal9/G\r\nvnxXM1Ob9zAEFd6QBAuK0ejbOb1tmXgwnhlFAWr7Fq1TbAfk0ga6Cm5chEmI21ZK\r\nVO9j0Reu0NAONyrPs09y7u3r38CgGTyot/VS5mU= generated-by-azure\r\n",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
    }),
  });

  provider.Compute.makeSshPublicKey({
    name: "rg-vm-ad-login::keypair",
    properties: ({}) => ({
      name: "keypair",
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8SzGkGNI3Ygk6VRCpozwO7xo1\r\nRW50+mHnXNwGMJUlp2GklCjrxYHmKU/1EcoJtc3A7HObBJu/7ckjK8pzl++qi479\r\n7z69qJipkWZsAI5ff6dsdJtDZLJctHfp0fost90LOWUBP+9WKBMgSCg7LM9QQC3C\r\n4A+iZKoqAmlUM6nzvfS90MxHavJR351aaTQIQg/jUHQoJ3PVeE9IpDhselTJQRDy\r\n0dVGcvjSvglw1q7s8hMCueZQNGS2e5sMS4oKhNsi9Rjawe9Iw9maeNnNiZJQwKJi\r\np/o62B48p2k+jIsr8PHE7C8JbIPuE89fRMOE8OgUBOVN0ZL4vRArjiKcFNkf5s7r\r\nl3j6SrqoUvODxedq4YG3IE3NOabqZ5JvzVIWvNhrO0f5MPty3bzucpOUvg2qjXY7\r\nZc8wsBHHWcLb1hhwOMfhqz7kY0MAsOFR6Kn1OvH0Na+R1Zke+z1YMh85FdoPOpmP\r\nboGjezMbAEQCDQJwAVfP2qBQYL1KuyULMmYUQ90= generated-by-azure\r\n",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
    }),
  });

  provider.Compute.makeSshPublicKey({
    name: "rg-vm-disks::keypair",
    properties: ({}) => ({
      name: "keypair",
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDML7vLyGtMh/cmqV31Kx7xJbAk\r\nmVFUgaB3cRs7QTj9FzAJywGnF+YAB6Kg/7KhGNrbeddMH7Dal2t3GeGhWuJHQXrb\r\nPI6+XrkkNZBIgea0/yk2/DLcrbsXeO+vF21R/qXgSrbK1F4hG7UYl0XIXxlpf3XR\r\nmni+Cr0TTc0lrjUk+CsxxEX/tBUI03C2hMwppe2j2bMeNMN93jpj63Z0BDIS8laf\r\nZPrnHZconfgKwVx6DzpV303SpaVkyxisWTKlIhuKKcN4LDxtpt+emWhYxCfx6scr\r\nW3zBnfhK0WvZJihP2Dr5j+CrMzP1SByyzJGiz69IlnoRK1yTyP6kM4Nc3RfnE/xJ\r\ny9XPFXBF6aPWm6zQTeUjcb6AHPy84kixX5l87LGYxHMfipyEoEYTEEN6RmgO2mpk\r\nzvuL27ewD/FMd+uigx0vd6SfdJR4dyc5WkCA8PkmpVbFtSR995hvTuVgaknAG1wd\r\noAVIBoekRLIwca9DcIOjTqaU0EWF8Gkt8FDhkIE= generated-by-azure\r\n",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "rg-vm-ad-login::vm",
    properties: ({ getId }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.RG_VM_AD_LOGIN_VM_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "vm_disk1_0fff3216e7484cc591ce9fe66bf92b25",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Detach",
            diskSizeGB: 30,
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "rg-vm-ad-login::vm514",
              }),
            },
          ],
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
      networkInterfaces: ["rg-vm-ad-login::vm514"],
      sshPublicKeys: ["rg-vm-ad-login::keypair"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "rg-vm-disks::vm",
    properties: ({ getId }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.RG_VM_DISKS_VM_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "vm_disk1_9d916b60fd7048329e3979079f2abdf7",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Detach",
            diskSizeGB: 30,
          },
          dataDisks: [
            {
              lun: 0,
              name: "vm_DataDisk_0",
              createOption: "Attach",
              caching: "None",
              writeAcceleratorEnabled: false,
              managedDisk: {
                storageAccountType: "Premium_LRS",
                id: getId({
                  type: "Disk",
                  group: "Compute",
                  name: "rg-vm-disks::vm_datadisk_0",
                }),
              },
              deleteOption: "Detach",
              diskSizeGB: 1,
              toBeDetached: false,
            },
          ],
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "rg-vm-disks::vm537",
              }),
            },
          ],
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
      networkInterfaces: ["rg-vm-disks::vm537"],
      disks: ["rg-vm-disks::vm_datadisk_0"],
      sshPublicKeys: ["rg-vm-disks::keypair"],
    }),
  });

  provider.Compute.makeVirtualMachineExtension({
    name: "rg-vm-ad-login::vm::aadsshloginforlinux",
    properties: ({}) => ({
      name: "aadsshloginforlinux",
      properties: {
        publisher: "Microsoft.Azure.ActiveDirectory",
        type: "AADSSHLoginForLinux",
        typeHandlerVersion: "1.0",
        autoUpgradeMinorVersion: true,
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
      vm: "rg-vm-ad-login::vm",
    }),
  });

  provider.Compute.makeVirtualMachineScaleSet({
    name: "rg-load-balancer::vmss",
    properties: ({ getId }) => ({
      name: "vmss",
      sku: {
        name: "Standard_B1ls",
        tier: "Standard",
        capacity: 1,
      },
      properties: {
        singlePlacementGroup: false,
        upgradePolicy: {
          mode: "Manual",
        },
        scaleInPolicy: {
          rules: ["Default"],
        },
        virtualMachineProfile: {
          osProfile: {
            computerNamePrefix: "vmssfxzig",
            adminUsername: "azureuser",
            linuxConfiguration: {
              disablePasswordAuthentication: true,
              ssh: {
                publicKeys: [
                  {
                    path: "/home/azureuser/.ssh/authorized_keys",
                  },
                ],
              },
              provisionVMAgent: true,
            },
            allowExtensionOperations: true,
            adminPassword: process.env.RG_LOAD_BALANCER_VMSS_ADMIN_PASSWORD,
          },
          storageProfile: {
            osDisk: {
              osType: "Linux",
              createOption: "FromImage",
              caching: "ReadWrite",
              managedDisk: {
                storageAccountType: "Premium_LRS",
              },
              diskSizeGB: 30,
            },
            imageReference: {
              publisher: "canonical",
              offer: "0001-com-ubuntu-server-focal",
              sku: "20_04-lts",
              version: "latest",
            },
          },
          diagnosticsProfile: {
            bootDiagnostics: {
              enabled: true,
            },
          },
          networkProfile: {
            networkInterfaceConfigurations: [
              {
                name: "vnet-nic01",
                properties: {
                  primary: true,
                  enableAcceleratedNetworking: false,
                  networkSecurityGroup: {
                    id: getId({
                      type: "NetworkSecurityGroup",
                      group: "Network",
                      name: "rg-load-balancer::basicnsgvnet-nic01",
                    }),
                  },
                  dnsSettings: {
                    dnsServers: [],
                  },
                  enableIPForwarding: false,
                  ipConfigurations: [
                    {
                      name: "vnet-nic01-defaultIpConfiguration",
                      properties: {
                        primary: true,
                        subnet: {
                          id: getId({
                            type: "Subnet",
                            group: "Network",
                            name: "rg-load-balancer::vnet::default",
                          }),
                        },
                        privateIPAddressVersion: "IPv4",
                        loadBalancerBackendAddressPools: [
                          {
                            id: getId({
                              type: "LoadBalancerBackendAddressPool",
                              group: "Network",
                              name: "rg-load-balancer::load-balancer::backendpool",
                            }),
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
          },
        },
        overprovision: false,
        doNotRunExtensionsOnOverprovisionedVMs: false,
        platformFaultDomainCount: 1,
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
      subnets: ["rg-load-balancer::vnet::default"],
      sshPublicKeys: ["rg-load-balancer::vmss_key"],
      networkSecurityGroups: ["rg-load-balancer::basicnsgvnet-nic01"],
      loadBalancerBackendAddressPools: [
        "rg-load-balancer::load-balancer::backendpool",
      ],
    }),
  });

  provider.ContainerService.makeManagedCluster({
    name: "rg-aks-basic::cluster",
    properties: ({}) => ({
      sku: {
        name: "Basic",
        tier: "Free",
      },
      identity: {
        type: "SystemAssigned",
      },
      properties: {
        kubernetesVersion: "1.21.7",
        dnsPrefix: "cluster-dns",
        agentPoolProfiles: [
          {
            name: "agentpool",
            count: 1,
            vmSize: "Standard_B4ms",
            osDiskSizeGB: 128,
            osDiskType: "Managed",
            kubeletDiskType: "OS",
            maxPods: 110,
            type: "VirtualMachineScaleSets",
            enableAutoScaling: false,
            orchestratorVersion: "1.21.7",
            enableNodePublicIP: false,
            mode: "System",
            osType: "Linux",
            osSKU: "Ubuntu",
            nodeImageVersion: "AKSUbuntu-1804gen2containerd-2022.01.19",
            enableFIPS: false,
          },
        ],
        addonProfiles: {
          azurepolicy: {
            enabled: false,
            config: null,
          },
          httpApplicationRouting: {
            enabled: false,
          },
        },
        oidcIssuerProfile: {
          enabled: false,
        },
        enableRBAC: true,
        networkProfile: {
          networkPlugin: "kubenet",
          podCidr: "10.244.0.0/16",
          serviceCidr: "10.0.0.0/16",
          dnsServiceIP: "10.0.0.10",
          dockerBridgeCidr: "172.17.0.1/16",
          outboundType: "loadBalancer",
          loadBalancerSku: "Standard",
          loadBalancerProfile: {
            managedOutboundIPs: {
              count: 1,
            },
          },
        },
        apiServerAccessProfile: {
          enablePrivateCluster: false,
        },
        servicePrincipalProfile: {
          clientId: "msi",
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-aks-basic",
    }),
  });

  provider.DBforPostgreSQL.makeConfiguration({
    name: "rg-postgres::gc-server::shared_preload_libraries",
    properties: ({}) => ({
      name: "shared_preload_libraries",
      properties: {
        value: "pg_cron,pg_stat_statements",
        source: "user-override",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-postgres",
      server: "rg-postgres::gc-server",
    }),
  });

  provider.DBforPostgreSQL.makeFirewallRule({
    name: "rg-postgres::gc-server::allowallazureservicesandresourceswithinazureips_2022-1-19_17-30-21",
    properties: ({}) => ({
      name: "allowallazureservicesandresourceswithinazureips_2022-1-19_17-30-21",
      properties: {
        startIpAddress: "0.0.0.0",
        endIpAddress: "0.0.0.0",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-postgres",
      server: "rg-postgres::gc-server",
    }),
  });

  provider.DBforPostgreSQL.makeFlexibleServer({
    name: "rg-postgres::gc-server",
    properties: ({}) => ({
      name: "gc-server",
      sku: {
        name: "Standard_B1ms",
        tier: "Burstable",
      },
      properties: {
        administratorLogin: "GcAdmin",
        version: "13",
        storage: {
          storageSizeGB: 32,
        },
        administratorLoginPassword:
          process.env.RG_POSTGRES_GC_SERVER_ADMINISTRATOR_LOGIN_PASSWORD,
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-postgres",
    }),
  });

  provider.Network.makeLoadBalancer({
    name: "rg-load-balancer::load-balancer",
    properties: ({ getId }) => ({
      sku: {
        name: "Standard",
        tier: "Regional",
      },
      properties: {
        frontendIPConfigurations: [
          {
            name: "frontend",
            properties: {
              publicIPAddress: {
                id: getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "rg-load-balancer::ip",
                }),
              },
            },
          },
        ],
        loadBalancingRules: [],
        probes: [],
        inboundNatRules: [],
        outboundRules: [],
        inboundNatPools: [],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
      publicIPAddresses: ["rg-load-balancer::ip"],
    }),
  });

  provider.Network.makeLoadBalancerBackendAddressPool({
    name: "rg-load-balancer::load-balancer::backendpool",
    properties: ({}) => ({
      properties: {},
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
      loadBalancer: "rg-load-balancer::load-balancer",
    }),
  });

  provider.Network.makeNatGateway({
    name: "rg-natgateway::nat-gw",
    properties: ({}) => ({
      name: "nat-gw",
      sku: {
        name: "Standard",
      },
      properties: {
        idleTimeoutInMinutes: 4,
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-natgateway",
      publicIpAddresses: ["rg-natgateway::ip-address"],
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "rg-vm-ad-login::vm514",
    properties: ({}) => ({
      name: "vm514",
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
      virtualNetwork: "rg-vm-ad-login::vnet",
      publicIpAddress: "rg-vm-ad-login::vm-ip",
      securityGroup: "rg-vm-ad-login::vm-nsg",
      subnet: "rg-vm-ad-login::vnet::default",
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "rg-vm-disks::vm537",
    properties: ({}) => ({
      name: "vm537",
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
      virtualNetwork: "rg-vm-disks::virtual-network",
      publicIpAddress: "rg-vm-disks::vm-ip",
      securityGroup: "rg-vm-disks::vm-nsg",
      subnet: "rg-vm-disks::virtual-network::default",
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "rg-load-balancer::basicnsgvnet-nic01",
    properties: ({}) => ({
      name: "basicnsgvnet-nic01",
      properties: {
        securityRules: [],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "rg-vm-ad-login::vm-nsg",
    properties: ({}) => ({
      name: "vm-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "rg-vm-disks::vm-nsg",
    properties: ({}) => ({
      name: "vm-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-load-balancer::ip",
    properties: ({}) => ({
      name: "ip",
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-natgateway::ip-address",
    properties: ({}) => ({
      name: "ip-address",
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-natgateway",
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-vm-ad-login::vm-ip",
    properties: ({}) => ({
      name: "vm-ip",
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-vm-disks::vm-ip",
    properties: ({}) => ({
      name: "vm-ip",
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-load-balancer::vnet::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/16",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
      virtualNetwork: "rg-load-balancer::vnet",
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-natgateway::virtual-network::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-natgateway",
      virtualNetwork: "rg-natgateway::virtual-network",
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-vm-ad-login::vnet::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
      virtualNetwork: "rg-vm-ad-login::vnet",
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-vm-disks::virtual-network::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
      virtualNetwork: "rg-vm-disks::virtual-network",
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-load-balancer::vnet",
    properties: ({}) => ({
      name: "vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-load-balancer",
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-natgateway::virtual-network",
    properties: ({}) => ({
      name: "virtual-network",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-natgateway",
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-vm-ad-login::vnet",
    properties: ({}) => ({
      name: "vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-ad-login",
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-vm-disks::virtual-network",
    properties: ({}) => ({
      name: "virtual-network",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-vm-disks",
    }),
  });

  provider.OperationalInsights.makeWorkspace({
    name: "rg-plantuml::logs",
    properties: ({}) => ({
      name: "logs",
      properties: {
        sku: {
          name: "pergb2018",
        },
        retentionInDays: 30,
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-plantuml",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-aks-basic",
    properties: ({}) => ({
      name: "rg-aks-basic",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-load-balancer",
    properties: ({}) => ({
      name: "rg-load-balancer",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-natgateway",
    properties: ({}) => ({
      name: "rg-natgateway",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-plantuml",
    properties: ({}) => ({
      name: "rg-plantuml",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-postgres",
    properties: ({}) => ({
      name: "rg-postgres",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-vm-ad-login",
    properties: ({}) => ({
      name: "rg-vm-ad-login",
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-vm-disks",
    properties: ({}) => ({
      name: "rg-vm-disks",
    }),
  });

  provider.Web.makeContainerApp({
    name: "rg-plantuml::plantuml",
    properties: ({}) => ({
      properties: {
        configuration: {
          ingress: {
            external: true,
            targetPort: 8080,
          },
        },
        template: {
          containers: [
            {
              image: "docker.io/plantuml/plantuml-server:jetty-v1.2021.15",
              name: "plantuml",
              resources: {
                cpu: 0.25,
                memory: ".5Gi",
              },
            },
          ],
          scale: {
            maxReplicas: 10,
          },
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-plantuml",
      kubeEnvironment: "rg-plantuml::dev",
    }),
  });

  provider.Web.makeKubeEnvironment({
    name: "rg-plantuml::dev",
    properties: ({}) => ({
      name: "dev",
    }),
    dependencies: () => ({
      resourceGroup: "rg-plantuml",
      workspace: "rg-plantuml::logs",
    }),
  });
};

exports.createResources = createResources;
