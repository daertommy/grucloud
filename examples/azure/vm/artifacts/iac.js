// Generated by azure2gc
const { get } = require("rubico");
const { AzureProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.resourceManagement.useDefaultResourceGroup({
    name: get("config.resourceManagement.ResourceGroup.networkWatcherRg.name"),
  });

  provider.resourceManagement.makeResourceGroup({
    name: get("config.resourceManagement.ResourceGroup.resourceGroup.name"),
    properties: get(
      "config.resourceManagement.ResourceGroup.resourceGroup.properties"
    ),
  });

  provider.virtualNetworks.makeVirtualNetwork({
    name: get("config.virtualNetworks.VirtualNetwork.virtualNetwork.name"),
    properties: get(
      "config.virtualNetworks.VirtualNetwork.virtualNetwork.properties"
    ),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
    }),
  });

  provider.virtualNetworks.makeSecurityGroup({
    name: get("config.virtualNetworks.SecurityGroup.securityGroup.name"),
    properties: get(
      "config.virtualNetworks.SecurityGroup.securityGroup.properties"
    ),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
    }),
  });

  provider.virtualNetworks.makePublicIpAddress({
    name: get("config.virtualNetworks.PublicIpAddress.ip.name"),
    properties: get("config.virtualNetworks.PublicIpAddress.ip.properties"),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
    }),
  });

  provider.virtualNetworks.makeNetworkInterface({
    name: get("config.virtualNetworks.NetworkInterface.networkInterface.name"),
    properties: get(
      "config.virtualNetworks.NetworkInterface.networkInterface.properties"
    ),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
      virtualNetwork: resources.virtualNetworks.VirtualNetwork.virtualNetwork,
      publicIpAddress: [resources.virtualNetworks.PublicIpAddress.ip],
      securityGroup: resources.virtualNetworks.SecurityGroup.securityGroup,
    }),
  });

  provider.compute.makeVirtualMachine({
    name: get("config.compute.VirtualMachine.vm.name"),
    properties: get("config.compute.VirtualMachine.vm.properties"),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
      networkInterface:
        resources.virtualNetworks.NetworkInterface.networkInterface,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AzureProvider, {
    config: require("./config"),
  });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
