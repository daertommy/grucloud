// Generated by azure2gc
const { AzureProvider } = require("@grucloud/provider-azure");

const createResources = ({ provider }) => {
  provider.resourceManagement.makeResourceGroup({
    name: "resource-group",
  });

  provider.virtualNetworks.makeVirtualNetwork({
    name: "virtual-network",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
        enableDdosProtection: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
      subnets: [resources.virtualNetworks.Subnet.subnet],
    }),
  });

  provider.virtualNetworks.makeSecurityGroup({
    name: "security-group",
    properties: ({ config }) => ({
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "Tcp",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 1000,
              direction: "Inbound",
            },
          },
          {
            name: "ICMP",
            properties: {
              protocol: "Icmp",
              sourcePortRange: "*",
              destinationPortRange: "*",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 1001,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
    }),
  });

  provider.virtualNetworks.makePublicIpAddress({
    name: "ip",
    properties: ({ config }) => ({
      properties: {
        publicIPAddressVersion: "IPv4",
        publicIPAllocationMethod: "Dynamic",
        idleTimeoutInMinutes: 4,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
    }),
  });

  provider.virtualNetworks.makeNetworkInterface({
    name: "network-interface",
    properties: ({ config }) => ({
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
      virtualNetwork: resources.virtualNetworks.VirtualNetwork.virtualNetwork,
      publicIpAddress: resources.virtualNetworks.PublicIpAddress.ip,
      securityGroup: resources.virtualNetworks.SecurityGroup.securityGroup,
    }),
  });

  provider.virtualNetworks.makeSubnet({
    name: "subnet",
    properties: ({ config }) => ({
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
  });

  provider.compute.makeVirtualMachine({
    name: "vm",
    properties: ({ config }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_A1_v2",
        },
        storageProfile: {
          imageReference: {
            publisher: "Canonical",
            offer: "UbuntuServer",
            sku: "18.04-LTS",
            version: "latest",
            exactVersion: "18.04.202109280",
          },
        },
        osProfile: {
          computerName: "myVM",
          adminUsername: "ops",
          linuxConfiguration: {
            disablePasswordAuthentication: false,
            provisionVMAgent: true,
          },
          allowExtensionOperations: true,
          requireGuestProvisionSignal: true,
          adminPassword: process.env.VM_ADMIN_PASSWORD,
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.resourceManagement.ResourceGroup.resourceGroup,
      networkInterface:
        resources.virtualNetworks.NetworkInterface.networkInterface,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AzureProvider, {
    config: require("./config"),
  });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
