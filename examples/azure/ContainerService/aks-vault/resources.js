// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "1669622d-27b3-4557-9b0d-eb984ecafbc5",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Administrator",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
  });

  provider.Authorization.makeRoleAssignment({
    name: "3e3868e9-db37-4784-af25-269be5a91a8a",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Secrets Officer",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
  });

  provider.Authorization.makeRoleAssignment({
    name: "7b1b71bb-b29d-4fc7-b678-5a821ff219e9",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Secrets Officer",
        principalName: "rg-aks-vault::des",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      principalDiskEncryptionSet:
        resources.Compute.DiskEncryptionSet["rg-aks-vault::des"],
    }),
  });

  provider.Authorization.makeRoleAssignment({
    name: "7d33c320-cf65-4ade-81ce-74d173f1a9b1",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Crypto Service Encryption User",
        principalName: "rg-aks-vault::des",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      principalDiskEncryptionSet:
        resources.Compute.DiskEncryptionSet["rg-aks-vault::des"],
    }),
  });

  provider.Authorization.makeRoleAssignment({
    name: "c72e2674-f010-478e-bb6d-34ec35fdab3d",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Crypto Officer",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
  });

  provider.Authorization.makeRoleAssignment({
    name: "d79e2814-3513-424f-8558-274dd5c2bb16",
    properties: ({}) => ({
      properties: {
        roleName: "Contributor",
        principalName: "rg-aks-vault::cluster",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      scopeResourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-vault_cluster_canadacentral"
        ],
      principalManagedCluster:
        resources.ContainerService.ManagedCluster["rg-aks-vault::cluster"],
    }),
  });

  provider.Compute.makeDiskEncryptionSet({
    name: "rg-aks-vault::des",
    properties: ({}) => ({
      properties: {
        encryptionType: "EncryptionAtRestWithCustomerKey",
        rotationToLatestKeyVersionEnabled: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-vault"],
      vault: resources.KeyVault.Vault["rg-aks-vault::gc-aks-vault"],
      key: resources.KeyVault.Key["rg-aks-vault::gc-aks-vault::key-des"],
    }),
  });

  provider.ContainerService.makeManagedCluster({
    name: "rg-aks-vault::cluster",
    properties: ({}) => ({
      sku: {
        name: "Basic",
        tier: "Free",
      },
      identity: {
        type: "SystemAssigned",
      },
      properties: {
        kubernetesVersion: "1.21.7",
        dnsPrefix: "cluster-rg-aks-vault-e012cd",
        agentPoolProfiles: [
          {
            name: "nodepool1",
            count: 3,
            vmSize: "Standard_DS2_v2",
            osDiskSizeGB: 128,
            osDiskType: "Managed",
            kubeletDiskType: "OS",
            maxPods: 110,
            type: "VirtualMachineScaleSets",
            enableAutoScaling: false,
            orchestratorVersion: "1.21.7",
            enableNodePublicIP: false,
            mode: "System",
            enableEncryptionAtHost: false,
            enableUltraSSD: false,
            osType: "Linux",
            osSKU: "Ubuntu",
            nodeImageVersion: "AKSUbuntu-1804gen2containerd-2022.01.19",
            enableFIPS: false,
          },
        ],
        linuxProfile: {
          adminUsername: "azureuser",
          ssh: {
            publicKeys: [
              {
                keyData:
                  "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/+ZCfuXkRdiRcNjERsbmuqtKBY+ctRVd/q06VNRGxqAGI+DGnc55eMxvhh1ptdjuNg6HA7yufumrj9AmxrKEtGmRfseeVUy3th7FphEKKYCkpb8zxIEdfRr5r374gl3QxrxeKzk2YgsCQAfwfaD+ZlNQyKHWgnfwFCGEh3ciL5eSQP5xittjJap35l17kwygtCYxPcA+5DlAjDtonLGzypw/Bnb8U6TutWiHsK5Jx4iYVo4rsPmy6MsTZUx0gAKf0jvRpROK4TOHUAfio05jxfDVfE2hOZAvYFas5fKOCI8in/xaVy/hoW3rFU7OvPWfyNv7+5IE6ytI59c5e9PMXJ9IVcQmiPkfTfK91YsYcyknf6SXdTjs0aPWRpCp+UpDr98qt8xqTMujI1RA075719T1I3OUO7+w/prFLUPkEHbOLnfJ1kzam6kX87OkEG6OwIqR3A7Sw1q3EmRfDppzBOw8Oaapla+52DMLeJ6j1eLNLyBcsrgVTbOLYyZXbORMLvr0FwiAmbUPBSPKFIT12N10dElScihA2YI1g6SS5nNZAiyU16T0zL9teXYEYlupXo7T5Dc44m7xiiuzx4xibh8MprUTDUKoHSmTTSZ9psggaYcrZZQKmO8P7Et8t44iEyZ7W8xpByHxRrqmuCrqx9dIopk8fXhnQA/sP/EbX5Q== frederic.heem@gmail.com\n",
              },
            ],
          },
        },
        oidcIssuerProfile: {
          enabled: false,
        },
        enableRBAC: true,
        networkProfile: {
          networkPlugin: "kubenet",
          podCidr: "10.244.0.0/16",
          serviceCidr: "10.0.0.0/16",
          dnsServiceIP: "10.0.0.10",
          dockerBridgeCidr: "172.17.0.1/16",
          outboundType: "loadBalancer",
          loadBalancerSku: "Standard",
          loadBalancerProfile: {
            managedOutboundIPs: {
              count: 1,
            },
          },
        },
        disableLocalAccounts: false,
        servicePrincipalProfile: {
          clientId: "msi",
        },
        addonProfiles: undefined,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-vault"],
      diskEncryptionSet:
        resources.Compute.DiskEncryptionSet["rg-aks-vault::des"],
    }),
  });

  provider.KeyVault.makeKey({
    name: "rg-aks-vault::gc-aks-vault::key-des",
    properties: ({}) => ({
      properties: {
        attributes: {
          enabled: true,
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-vault"],
      vault: resources.KeyVault.Vault["rg-aks-vault::gc-aks-vault"],
    }),
  });

  provider.KeyVault.makeVault({
    name: "rg-aks-vault::gc-aks-vault",
    properties: ({ config }) => ({
      location: "canadacentral",
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [],
        enabledForDeployment: false,
        enabledForDiskEncryption: true,
        enabledForTemplateDeployment: false,
        softDeleteRetentionInDays: 7,
        enableRbacAuthorization: true,
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-vault"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-aks-vault",
  });
};

exports.createResources = createResources;
