// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "8e4f43ad-e192-45ca-8801-af683c489f4f",
    properties: ({}) => ({
      properties: {
        roleName: "Contributor",
        principalName: "rg-aks-classic::cluster",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      scopeResourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Compute.makeVirtualMachineScaleSet({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-98983223-vmss",
    properties: ({ getId }) => ({
      sku: {
        name: "Standard_B4ms",
        tier: "Standard",
        capacity: 2,
      },
      identity: {
        type: "UserAssigned",
      },
      properties: {
        singlePlacementGroup: false,
        upgradePolicy: {
          mode: "Manual",
        },
        virtualMachineProfile: {
          osProfile: {
            computerNamePrefix: "aks-agentpool-98983223-vmss",
            adminUsername: "azureuser",
            linuxConfiguration: {
              disablePasswordAuthentication: true,
              ssh: {
                publicKeys: [
                  {
                    path: "/home/azureuser/.ssh/authorized_keys",
                  },
                ],
              },
              provisionVMAgent: true,
            },
            allowExtensionOperations: true,
            adminPassword:
              process.env
                .MC_RG_AKS_CLASSIC_CLUSTER_CANADACENTRAL_AKS_AGENTPOOL_98983223_VMSS_ADMIN_PASSWORD,
          },
          storageProfile: {
            osDisk: {
              osType: "Linux",
              createOption: "FromImage",
              caching: "ReadWrite",
              managedDisk: {
                storageAccountType: "Premium_LRS",
              },
              diskSizeGB: 128,
            },
            imageReference: {
              id: `/subscriptions/109a5e88-712a-48ae-9078-9ca8b3c81345/resourceGroups/AKS-Ubuntu/providers/Microsoft.Compute/galleries/AKSUbuntu/images/1804gen2containerd/versions/2022.01.08`,
            },
          },
          networkProfile: {
            networkInterfaceConfigurations: [
              {
                name: "aks-agentpool-98983223-vmss",
                properties: {
                  primary: true,
                  enableAcceleratedNetworking: false,
                  dnsSettings: {
                    dnsServers: [],
                  },
                  enableIPForwarding: true,
                  ipConfigurations: [
                    {
                      name: "ipconfig1",
                      properties: {
                        primary: true,
                        subnet: {
                          id: getId({
                            type: "Subnet",
                            group: "Network",
                            name: "mc_rg-aks-classic_cluster_canadacentral::aks-vnet-18663747::aks-subnet",
                          }),
                        },
                        privateIPAddressVersion: "IPv4",
                        loadBalancerBackendAddressPools: [
                          {
                            id: getId({
                              type: "LoadBalancerBackendAddressPool",
                              group: "Network",
                              name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes::aksoutboundbackendpool",
                            }),
                          },
                          {
                            id: getId({
                              type: "LoadBalancerBackendAddressPool",
                              group: "Network",
                              name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes::kubernetes",
                            }),
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
          },
        },
        overprovision: false,
        doNotRunExtensionsOnOverprovisionedVMs: false,
        platformFaultDomainCount: 1,
      },
      tags: {
        "aks-managed-createOperationID": "0d9cae27-a50e-4c2e-88da-99cdf1582c37",
        creationSource: "vmssclient-aks-agentpool-98983223-vmss",
        orchestrator: "Kubernetes:1.21.7",
        poolName: "agentpool",
        resourceNameSuffix: "18663747",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      subnets: [
        resources.Network.Subnet[
          "mc_rg-aks-classic_cluster_canadacentral::aks-vnet-18663747::aks-subnet"
        ],
      ],
      managedIdentities: [
        resources.ManagedIdentity.UserAssignedIdentity[
          "mc_rg-aks-classic_cluster_canadacentral::cluster-agentpool"
        ],
        resources.ManagedIdentity.UserAssignedIdentity[
          "mc_rg-aks-classic_cluster_canadacentral::httpapplicationrouting-cluster"
        ],
      ],
      loadBalancerBackendAddressPools: [
        resources.Network.LoadBalancerBackendAddressPool[
          "mc_rg-aks-classic_cluster_canadacentral::kubernetes::aksoutboundbackendpool"
        ],
        resources.Network.LoadBalancerBackendAddressPool[
          "mc_rg-aks-classic_cluster_canadacentral::kubernetes::kubernetes"
        ],
      ],
    }),
  });

  provider.Compute.makeVirtualMachineScaleSetExtension({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-98983223-vmss::aks-agentpool-98983223-vmss-akslinuxbilling",
    properties: ({}) => ({
      name: "aks-agentpool-98983223-vmss-AKSLinuxBilling",
      properties: {
        publisher: "Microsoft.AKS",
        type: "Compute.AKS.Linux.Billing",
        typeHandlerVersion: "1.0",
        autoUpgradeMinorVersion: true,
        settings: {},
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      vmScaleSet:
        resources.Compute.VirtualMachineScaleSet[
          "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-98983223-vmss"
        ],
    }),
  });

  provider.Compute.makeVirtualMachineScaleSetExtension({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-98983223-vmss::vmsscse",
    properties: ({}) => ({
      name: "vmssCSE",
      properties: {
        publisher: "Microsoft.Azure.Extensions",
        type: "CustomScript",
        typeHandlerVersion: "2.0",
        autoUpgradeMinorVersion: true,
        settings: {},
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      vmScaleSet:
        resources.Compute.VirtualMachineScaleSet[
          "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-98983223-vmss"
        ],
    }),
  });

  provider.ContainerRegistry.makeRegistry({
    name: "rg-aks-classic::grucloudregistry",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        dataEndpointEnabled: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-classic"],
    }),
  });

  provider.ContainerService.makeAgentPool({
    name: "rg-aks-classic::cluster::agentpool",
    properties: ({}) => ({
      properties: {
        count: 2,
        vmSize: "Standard_B4ms",
        osDiskSizeGB: 128,
        osDiskType: "Managed",
        kubeletDiskType: "OS",
        maxPods: 110,
        osSKU: "Ubuntu",
        enableAutoScaling: false,
        type: "VirtualMachineScaleSets",
        mode: "System",
        orchestratorVersion: "1.21.7",
        enableNodePublicIP: false,
        enableFIPS: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-classic"],
      resource:
        resources.ContainerService.ManagedCluster["rg-aks-classic::cluster"],
    }),
  });

  provider.ContainerService.makeManagedCluster({
    name: "rg-aks-classic::cluster",
    properties: ({}) => ({
      sku: {
        name: "Basic",
        tier: "Free",
      },
      identity: {
        type: "SystemAssigned",
      },
      properties: {
        kubernetesVersion: "1.21.7",
        dnsPrefix: "cluster-dns",
        agentPoolProfiles: [
          {
            name: "agentpool",
            count: 2,
            vmSize: "Standard_B4ms",
            osDiskSizeGB: 128,
            osDiskType: "Managed",
            kubeletDiskType: "OS",
            maxPods: 110,
            type: "VirtualMachineScaleSets",
            enableAutoScaling: false,
            provisioningState: "Succeeded",
            powerState: {
              code: "Running",
            },
            orchestratorVersion: "1.21.7",
            enableNodePublicIP: false,
            mode: "System",
            osType: "Linux",
            osSKU: "Ubuntu",
            nodeImageVersion: "AKSUbuntu-1804gen2containerd-2022.01.08",
            enableFIPS: false,
          },
        ],
        addonProfiles: {
          azurepolicy: {
            enabled: false,
            config: null,
          },
          httpApplicationRouting: {
            enabled: true,
            config: {
              HTTPApplicationRoutingZoneName:
                "90a9bd3cf15647ff9ba5.canadacentral.aksapp.io",
            },
            identity: {
              resourceId:
                "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourcegroups/MC_rg-aks-classic_cluster_canadacentral/providers/Microsoft.ManagedIdentity/userAssignedIdentities/httpapplicationrouting-cluster",
              clientId: "f5319351-461f-4fd4-a932-0bdc0fddad42",
              objectId: "9057ff50-d288-4993-8e82-63249705f2b5",
            },
          },
        },
        oidcIssuerProfile: {
          enabled: false,
        },
        nodeResourceGroup: "MC_rg-aks-classic_cluster_canadacentral",
        enableRBAC: true,
        networkProfile: {
          loadBalancerSku: "Standard",
          loadBalancerProfile: {
            effectiveOutboundIPs: [
              {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/MC_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/publicIPAddresses/8fa667e8-939a-4ffe-b5c8-51c02199c719",
              },
            ],
          },
        },
        apiServerAccessProfile: {
          enablePrivateCluster: false,
        },
        identityProfile: {
          kubeletidentity: {
            resourceId:
              "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourcegroups/MC_rg-aks-classic_cluster_canadacentral/providers/Microsoft.ManagedIdentity/userAssignedIdentities/cluster-agentpool",
            clientId: "5be7fd9d-3aea-4c5f-8e4d-6e0c8f08c84b",
            objectId: "3abe60b5-0cef-4752-b6e8-e4459888e2f9",
          },
        },
        windowsProfile: {
          adminPassword: process.env.RG_AKS_CLASSIC_CLUSTER_ADMIN_PASSWORD,
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-aks-classic"],
    }),
  });

  provider.ManagedIdentity.makeUserAssignedIdentity({
    name: "mc_rg-aks-classic_cluster_canadacentral::cluster-agentpool",
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.ManagedIdentity.makeUserAssignedIdentity({
    name: "mc_rg-aks-classic_cluster_canadacentral::httpapplicationrouting-cluster",
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Network.makeLoadBalancer({
    name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes",
    properties: ({ getId }) => ({
      sku: {
        name: "Standard",
        tier: "Regional",
      },
      properties: {
        frontendIPConfigurations: [
          {
            name: "8fa667e8-939a-4ffe-b5c8-51c02199c719",
            properties: {
              provisioningState: "Succeeded",
              privateIPAllocationMethod: "Dynamic",
              publicIPAddress: {
                id: getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "mc_rg-aks-classic_cluster_canadacentral::8fa667e8-939a-4ffe-b5c8-51c02199c719",
                }),
              },
              outboundRules: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/outboundRules/aksOutboundRule",
                },
              ],
            },
          },
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a",
            properties: {
              provisioningState: "Succeeded",
              privateIPAllocationMethod: "Dynamic",
              publicIPAddress: {
                id: getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes-a5678f076b104405fbb9ca43e2a45c6a",
                }),
              },
              loadBalancingRules: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
                },
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
                },
              ],
            },
          },
        ],
        backendAddressPools: [
          {
            name: "aksOutboundBackendPool",
          },
          {
            name: "kubernetes",
          },
        ],
        loadBalancingRules: [
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
            etag: 'W/"ffc9f47e-04fb-49b5-8e46-83831181cc67"',
            type: "Microsoft.Network/loadBalancers/loadBalancingRules",
            properties: {
              provisioningState: "Succeeded",
              frontendIPConfiguration: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/frontendIPConfigurations/a5678f076b104405fbb9ca43e2a45c6a",
              },
              frontendPort: 80,
              backendPort: 80,
              enableFloatingIP: true,
              idleTimeoutInMinutes: 4,
              protocol: "Tcp",
              enableDestinationServiceEndpoint: false,
              enableTcpReset: true,
              allowBackendPortConflict: false,
              loadDistribution: "Default",
              disableOutboundSnat: true,
              backendAddressPool: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/backendAddressPools/kubernetes",
              },
              backendAddressPools: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/backendAddressPools/kubernetes",
                },
              ],
              probe: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/probes/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
              },
            },
          },
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
            etag: 'W/"ffc9f47e-04fb-49b5-8e46-83831181cc67"',
            type: "Microsoft.Network/loadBalancers/loadBalancingRules",
            properties: {
              provisioningState: "Succeeded",
              frontendIPConfiguration: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/frontendIPConfigurations/a5678f076b104405fbb9ca43e2a45c6a",
              },
              frontendPort: 443,
              backendPort: 443,
              enableFloatingIP: true,
              idleTimeoutInMinutes: 4,
              protocol: "Tcp",
              enableDestinationServiceEndpoint: false,
              enableTcpReset: true,
              allowBackendPortConflict: false,
              loadDistribution: "Default",
              disableOutboundSnat: true,
              backendAddressPool: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/backendAddressPools/kubernetes",
              },
              backendAddressPools: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/backendAddressPools/kubernetes",
                },
              ],
              probe: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/probes/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
              },
            },
          },
        ],
        probes: [
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/probes/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
            etag: 'W/"ffc9f47e-04fb-49b5-8e46-83831181cc67"',
            properties: {
              provisioningState: "Succeeded",
              protocol: "Http",
              port: 30913,
              requestPath: "/healthz",
              intervalInSeconds: 5,
              numberOfProbes: 2,
              loadBalancingRules: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
                },
              ],
            },
            type: "Microsoft.Network/loadBalancers/probes",
          },
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/probes/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
            etag: 'W/"ffc9f47e-04fb-49b5-8e46-83831181cc67"',
            properties: {
              provisioningState: "Succeeded",
              protocol: "Http",
              port: 30913,
              requestPath: "/healthz",
              intervalInSeconds: 5,
              numberOfProbes: 2,
              loadBalancingRules: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
                },
              ],
            },
            type: "Microsoft.Network/loadBalancers/probes",
          },
        ],
        inboundNatRules: [],
        outboundRules: [
          {
            name: "aksOutboundRule",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/outboundRules/aksOutboundRule",
            etag: 'W/"ffc9f47e-04fb-49b5-8e46-83831181cc67"',
            type: "Microsoft.Network/loadBalancers/outboundRules",
            properties: {
              provisioningState: "Succeeded",
              allocatedOutboundPorts: 0,
              protocol: "All",
              enableTcpReset: true,
              idleTimeoutInMinutes: 30,
              backendAddressPool: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/backendAddressPools/aksOutboundBackendPool",
              },
              frontendIPConfigurations: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/frontendIPConfigurations/8fa667e8-939a-4ffe-b5c8-51c02199c719",
                },
              ],
            },
          },
        ],
        inboundNatPools: [],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      publicIPAddresses: [
        resources.Network.PublicIPAddress[
          "mc_rg-aks-classic_cluster_canadacentral::8fa667e8-939a-4ffe-b5c8-51c02199c719"
        ],
        resources.Network.PublicIPAddress[
          "mc_rg-aks-classic_cluster_canadacentral::kubernetes-a5678f076b104405fbb9ca43e2a45c6a"
        ],
      ],
    }),
  });

  provider.Network.makeLoadBalancerBackendAddressPool({
    name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes::aksoutboundbackendpool",
    properties: ({}) => ({
      properties: {
        outboundRules: [
          {
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/outboundRules/aksOutboundRule",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      loadBalancer:
        resources.Network.LoadBalancer[
          "mc_rg-aks-classic_cluster_canadacentral::kubernetes"
        ],
    }),
  });

  provider.Network.makeLoadBalancerBackendAddressPool({
    name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes::kubernetes",
    properties: ({}) => ({
      properties: {
        loadBalancingRules: [
          {
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-80",
          },
          {
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/loadBalancers/kubernetes/loadBalancingRules/a5678f076b104405fbb9ca43e2a45c6a-TCP-443",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      loadBalancer:
        resources.Network.LoadBalancer[
          "mc_rg-aks-classic_cluster_canadacentral::kubernetes"
        ],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-nsg",
    properties: ({}) => ({
      properties: {
        securityRules: [
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-80-Internet",
            properties: {
              protocol: "Tcp",
              sourcePortRange: "*",
              destinationPortRange: "80",
              sourceAddressPrefix: "Internet",
              destinationAddressPrefix: "20.151.194.187",
              access: "Allow",
              priority: 500,
              direction: "Inbound",
            },
          },
          {
            name: "a5678f076b104405fbb9ca43e2a45c6a-TCP-443-Internet",
            properties: {
              protocol: "Tcp",
              sourcePortRange: "*",
              destinationPortRange: "443",
              sourceAddressPrefix: "Internet",
              destinationAddressPrefix: "20.151.194.187",
              access: "Allow",
              priority: 501,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "mc_rg-aks-classic_cluster_canadacentral::8fa667e8-939a-4ffe-b5c8-51c02199c719",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "mc_rg-aks-classic_cluster_canadacentral::kubernetes-a5678f076b104405fbb9ca43e2a45c6a",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Network.makeRoute({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-routetable::aks-agentpool-98983223-vmss000001____102440024",
    properties: ({}) => ({
      properties: {
        addressPrefix: "10.244.0.0/24",
        nextHopType: "VirtualAppliance",
        nextHopIpAddress: "10.240.0.5",
        hasBgpOverride: false,
      },
      name: "aks-agentpool-98983223-vmss000001____102440024",
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      routeTable:
        resources.Network.RouteTable[
          "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-routetable"
        ],
    }),
  });

  provider.Network.makeRoute({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-routetable::aks-agentpool-98983223-vmss000002____102442024",
    properties: ({}) => ({
      properties: {
        addressPrefix: "10.244.2.0/24",
        nextHopType: "VirtualAppliance",
        nextHopIpAddress: "10.240.0.4",
        hasBgpOverride: false,
      },
      name: "aks-agentpool-98983223-vmss000002____102442024",
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      routeTable:
        resources.Network.RouteTable[
          "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-routetable"
        ],
    }),
  });

  provider.Network.makeRouteTable({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-agentpool-18663747-routetable",
    properties: ({}) => ({
      properties: {
        routes: [
          {
            name: "aks-agentpool-98983223-vmss000001____102440024",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/routeTables/aks-agentpool-18663747-routetable/routes/aks-agentpool-98983223-vmss000001____102440024",
            etag: 'W/"4dc11650-1098-4100-9679-93ab521f0488"',
            properties: {
              provisioningState: "Succeeded",
              addressPrefix: "10.244.0.0/24",
              nextHopType: "VirtualAppliance",
              nextHopIpAddress: "10.240.0.5",
              hasBgpOverride: false,
            },
            type: "Microsoft.Network/routeTables/routes",
          },
          {
            name: "aks-agentpool-98983223-vmss000002____102442024",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/mc_rg-aks-classic_cluster_canadacentral/providers/Microsoft.Network/routeTables/aks-agentpool-18663747-routetable/routes/aks-agentpool-98983223-vmss000002____102442024",
            etag: 'W/"4dc11650-1098-4100-9679-93ab521f0488"',
            properties: {
              provisioningState: "Succeeded",
              addressPrefix: "10.244.2.0/24",
              nextHopType: "VirtualAppliance",
              nextHopIpAddress: "10.240.0.4",
              hasBgpOverride: false,
            },
            type: "Microsoft.Network/routeTables/routes",
          },
        ],
        disableBgpRoutePropagation: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Network.makeSubnet({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-vnet-18663747::aks-subnet",
    properties: ({}) => ({
      name: "aks-subnet",
      properties: {
        addressPrefix: "10.240.0.0/16",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
      virtualNetwork:
        resources.Network.VirtualNetwork[
          "mc_rg-aks-classic_cluster_canadacentral::aks-vnet-18663747"
        ],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "mc_rg-aks-classic_cluster_canadacentral::aks-vnet-18663747",
    properties: ({}) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/8"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup[
          "mc_rg-aks-classic_cluster_canadacentral"
        ],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "mc_rg-aks-classic_cluster_canadacentral",
    properties: ({}) => ({
      tags: {
        "aks-managed-cluster-name": "cluster",
        "aks-managed-cluster-rg": "rg-aks-classic",
      },
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-aks-classic",
  });
};

exports.createResources = createResources;
