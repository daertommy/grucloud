// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  // provider.Authorization.makeRoleAssignment({
  //   name: "ec71d611-48ea-4000-8421-805b7188c8e5",
  //   properties: ({}) => ({
  //     name: "ec71d611-48ea-4000-8421-805b7188c8e5",
  //     properties: {
  //       roleName: "Contributor",
  //       principalName: "rg-aks-basic::cluster",
  //       principalType: "ServicePrincipal",
  //     },
  //   }),
  //   dependencies: () => ({
  //     scopeResourceGroup: "mc_rg-aks-basic_cluster_canadacentral",
  //     principalManagedCluster: "rg-aks-basic::cluster",
  //   }),
  // });

  provider.ContainerService.makeManagedCluster({
    properties: ({}) => ({
      name: "cluster",
      sku: {
        name: "Basic",
        tier: "Free",
      },
      identity: {
        type: "SystemAssigned",
      },
      properties: {
        kubernetesVersion: "1.21.7",
        dnsPrefix: "cluster-dns",
        agentPoolProfiles: [
          {
            name: "agentpool",
            count: 1,
            vmSize: "Standard_B4ms",
            osDiskSizeGB: 128,
            osDiskType: "Managed",
            kubeletDiskType: "OS",
            maxPods: 110,
            type: "VirtualMachineScaleSets",
            enableAutoScaling: false,
            orchestratorVersion: "1.21.7",
            enableNodePublicIP: false,
            mode: "System",
            osType: "Linux",
            osSKU: "Ubuntu",
            nodeImageVersion: "AKSUbuntu-1804gen2containerd-2022.01.19",
            enableFIPS: false,
          },
        ],
        addonProfiles: {
          azurepolicy: {
            enabled: false,
            config: null,
          },
          httpApplicationRouting: {
            enabled: false,
          },
        },
        oidcIssuerProfile: {
          enabled: false,
        },
        enableRBAC: true,
        networkProfile: {
          networkPlugin: "kubenet",
          podCidr: "10.244.0.0/16",
          serviceCidr: "10.0.0.0/16",
          dnsServiceIP: "10.0.0.10",
          dockerBridgeCidr: "172.17.0.1/16",
          outboundType: "loadBalancer",
          loadBalancerSku: "Standard",
          loadBalancerProfile: {
            managedOutboundIPs: {
              count: 1,
            },
          },
        },
        apiServerAccessProfile: {
          enablePrivateCluster: false,
        },
        servicePrincipalProfile: {
          clientId: "msi",
        },
      },
    }),
    dependencies: () => ({
      resourceGroup: "rg-aks-basic",
    }),
  });

  provider.Resources.makeResourceGroup({
    properties: ({}) => ({
      name: "rg-aks-basic",
    }),
  });
};

exports.createResources = createResources;
