// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Compute.makeSshPublicKey({
    name: "key-pair",
    properties: ({}) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCslQeJxWwmq/fcMuFhYgp26yob\r\nbqrpx4WGp8gkNhFkXPBFRQ17wO9T8VM7jGzGpdxnKeaefMSsfO4lEeeHUPuQtkZG\r\nva9xz6Tq/C9xXzpI08JCptdLiGIklgz+Qz5wS0Qm97CryYOViYN3u8QXIwUMD2Ib\r\nPRg8T1JMqSRVk0KZD7UJw/qH52VUX/ODu6Oze8NvxJKIgB/zZmtGQnvLCnH2Cag6\r\nhQLWLQfdvs50Eo6scOeOr3ct/JIxB6oDeoTMCOJ9x5352FCxnwdzSxBBnu1BVHJF\r\n4I51qZ4D8JTnlo4JuaeDHCbs4QBhmNclKmSnLexxWmSDvyKMJFNJDlJsDYNotV4G\r\nQynH0IpQek/D1sQHC6xBHaHPRDKIaoy8xg/uzjBe2ZMWCj0crGAK9k9k2PSd3ANG\r\nZV+/LSbNIzhBipqx22Uqmq5lsgZfl0/inGdyVHT7tSyuy8Ga5vVz+wC6P6Kg6TIl\r\nsFqZd6mQS6M9w7gNZQeUTmr6tWkspAbdHi9d18k= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "vm",
    properties: ({}) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.VM_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
      },
      identity: {
        type: "UserAssigned",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
      networkInterfaces: [resources.Network.NetworkInterface["vm330"]],
      managedIdentities: [
        resources.ManagedIdentity.UserAssignedIdentity["identity-vault"],
      ],
      sshPublicKeys: [resources.Compute.SshPublicKey["key-pair"]],
    }),
  });

  provider.ManagedIdentity.makeUserAssignedIdentity({
    name: "identity-vault",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "vm330",
    properties: ({}) => ({
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-managed-identity-vnet"],
      publicIpAddress: resources.Network.PublicIPAddress["vm-ip"],
      securityGroup: resources.Network.NetworkSecurityGroup["vm-nsg"],
      subnet: resources.Network.Subnet["default"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "vm-nsg",
    properties: ({}) => ({
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "vm-ip",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makeSubnet({
    name: "default",
    properties: ({}) => ({
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-managed-identity-vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-managed-identity-vnet",
    properties: ({}) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-managed-identity",
  });
};

exports.createResources = createResources;
