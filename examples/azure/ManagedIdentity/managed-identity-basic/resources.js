// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Compute.makeSshPublicKey({
    name: "kp-vm",
    properties: ({ config }) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCcIyJFatpOi1mDiIJaiHmdCm2M\r\n0PNrqTM6hKGNelL2tUEz5IK1m/MwYca6HMo74wDv3MW1ym+GlDdWycysnDqZ9NvD\r\n3w3/FiIdWWv9ekzo8oJdsHz713LC6dgt3US0kMIFc1S4B48wOldAygG3xpOk5/ME\r\nZs+y/2y0453B5K/AJmbudtcE+fKUOn/To8Bo10psCuHD5r8jTngNg/L+HHdAVyLQ\r\ncqGE7VlHMlPkVR5lnAKyf3yRtolvP5tUe7qUcEx7/i6uK5LtRbH0vj8WB/Sg+RIF\r\njgKTSN7XNU/bQkCnXGfMbaTCiEpWxAul9EnW7knketkFrxjGl654s/LtOoo670uO\r\n6X3edOGRzelOukVOOzKbBirNB7c0yYOD5cJrKYYbfDyMQEfKFSW2hpslkH76U126\r\nSaXMSENqYAw0XwBmo7eTILBEY4fj//KJJm7NK1X+gQQVQTZB5Xa/kGCh54v3LLaB\r\nK8jeEzpHnxE5AfMGcJ8pTsISEh8tzh8nvpuSZy0= generated-by-azure\r\n",
      },
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "vm",
    properties: ({ config }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "ops",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/ops/.ssh/authorized_keys",
                  keyData:
                    "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCcIyJFatpOi1mDiIJaiHmdCm2M\r\n0PNrqTM6hKGNelL2tUEz5IK1m/MwYca6HMo74wDv3MW1ym+GlDdWycysnDqZ9NvD\r\n3w3/FiIdWWv9ekzo8oJdsHz713LC6dgt3US0kMIFc1S4B48wOldAygG3xpOk5/ME\r\nZs+y/2y0453B5K/AJmbudtcE+fKUOn/To8Bo10psCuHD5r8jTngNg/L+HHdAVyLQ\r\ncqGE7VlHMlPkVR5lnAKyf3yRtolvP5tUe7qUcEx7/i6uK5LtRbH0vj8WB/Sg+RIF\r\njgKTSN7XNU/bQkCnXGfMbaTCiEpWxAul9EnW7knketkFrxjGl654s/LtOoo670uO\r\n6X3edOGRzelOukVOOzKbBirNB7c0yYOD5cJrKYYbfDyMQEfKFSW2hpslkH76U126\r\nSaXMSENqYAw0XwBmo7eTILBEY4fj//KJJm7NK1X+gQQVQTZB5Xa/kGCh54v3LLaB\r\nK8jeEzpHnxE5AfMGcJ8pTsISEh8tzh8nvpuSZy0= generated-by-azure\r\n",
                },
              ],
            },
          },
          adminPassword: process.env.VM_ADMIN_PASSWORD,
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
      networkInterface: resources.Network.NetworkInterface["vm214"],
    }),
  });

  provider.ManagedIdentity.makeUserAssignedIdentity({
    name: "my-identity-test",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "vm214",
    properties: ({ config }) => ({
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-managed-identity-vnet"],
      publicIpAddress: resources.Network.PublicIPAddress["vm-ip"],
      securityGroup: resources.Network.NetworkSecurityGroup["vm-nsg"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "vm-nsg",
    properties: ({ config }) => ({
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "vm-ip",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-managed-identity-vnet",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-managed-identity"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-managed-identity",
  });
};

exports.createResources = createResources;
