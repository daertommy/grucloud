// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Compute.makeSshPublicKey({
    name: "vm-scale_key",
    properties: ({ config }) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCzTfZOC2SCugZnl6jmTff/mT9Z\r\nbpS+7737q7rrI4946uz+GMlKNdX4GJDzOI2K4SraPYuXRTXQs+zlS9+x9Kk3vfiL\r\n3sky4gfc6VQd1Ee77RWsi5lJ32+F8kW7uks2hPSZUFtsTAG/R7G5mOCc7xYhC7xu\r\nav1nWZleKLF8DFfil7H9AnQvn0AKGF6tmoNIiPospWe4hVmM0XyMe5yFZFUgTvpy\r\nlJDO3+ybmMBqeWgTZOSjaIAuKSQ8g38n60J7MEeAgLeNHUCnWiCSC3tQdO5K1aI6\r\nEDyHk59XLRPH0fkACNDuFFqNBHwRbpVjrD2ok05UVygNmaLJ8jrBe2MtB2QOhB8W\r\nDMHbw3i7k2X6XliaHBYDsamh/NzgF2k1rrVYxBy9ACD/BtuPXbJUYNekRjr91fP7\r\nG/bwer1damtFWAvaeIRmZSwII8ty7bPphElOHSbsuWHdFM4qP9lAXXDgh7QdTwj7\r\nKLr+IdFJ/MnoOfdaw/A/kuWFWw01dHUw5s5LFgE= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Compute.makeVirtualMachineScaleSet({
    name: "vm-scale-set",
    properties: ({ config }) => ({
      sku: {
        name: "Standard_B1ls",
        tier: "Standard",
        capacity: 2,
      },
      properties: {
        singlePlacementGroup: false,
        upgradePolicy: {
          mode: "Manual",
        },
        scaleInPolicy: {
          rules: ["Default"],
        },
        virtualMachineProfile: {
          osProfile: {
            computerNamePrefix: "vm-scale-",
            adminUsername: "azureuser",
            linuxConfiguration: {
              disablePasswordAuthentication: true,
              ssh: {
                publicKeys: [
                  {
                    path: "/home/azureuser/.ssh/authorized_keys",
                  },
                ],
              },
              provisionVMAgent: true,
            },
            allowExtensionOperations: true,
            adminPassword: process.env.VM_SCALE_SET_ADMIN_PASSWORD,
          },
          storageProfile: {
            imageReference: {
              publisher: "canonical",
              offer: "0001-com-ubuntu-server-focal",
              sku: "20_04-lts",
              version: "latest",
            },
          },
          diagnosticsProfile: {
            bootDiagnostics: {
              enabled: true,
            },
          },
        },
        overprovision: false,
        doNotRunExtensionsOnOverprovisionedVMs: false,
        platformFaultDomainCount: 1,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makeLoadBalancer({
    name: "load-balancer",
    properties: ({ config }) => ({
      sku: {
        name: "Standard",
        tier: "Regional",
      },
      properties: {
        frontendIPConfigurations: [
          {
            name: "frontendIp",
            properties: {
              provisioningState: "Succeeded",
              privateIPAllocationMethod: "Dynamic",
              publicIPAddress: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Network/publicIPAddresses/ip-address",
              },
            },
          },
        ],
        backendAddressPools: [
          {
            name: "backend-pool",
            properties: {
              provisioningState: "Succeeded",
              loadBalancerBackendAddresses: [
                {
                  name: "3f5ec05d-9fc4-49c1-9db4-678ae033e51c",
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Network/loadBalancers/load-balancer/backendAddressPools/backend-pool/loadBalancerBackendAddresses/3f5ec05d-9fc4-49c1-9db4-678ae033e51c",
                  etag: 'W/"1796fc6a-af7a-4898-874d-538f61b435ca"',
                  properties: {
                    provisioningState: "Succeeded",
                    networkInterfaceIPConfiguration: {
                      id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/0/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
                    },
                    inboundNatRulesPortMapping: [],
                  },
                  type: "Microsoft.Network/loadBalancers/backendAddressPools/loadBalancerBackendAddresses",
                },
                {
                  name: "c4fc5a83-8857-4e6e-9759-74ce76f001b9",
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Network/loadBalancers/load-balancer/backendAddressPools/backend-pool/loadBalancerBackendAddresses/c4fc5a83-8857-4e6e-9759-74ce76f001b9",
                  etag: 'W/"1796fc6a-af7a-4898-874d-538f61b435ca"',
                  properties: {
                    provisioningState: "Succeeded",
                    networkInterfaceIPConfiguration: {
                      id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/1/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
                    },
                    inboundNatRulesPortMapping: [],
                  },
                  type: "Microsoft.Network/loadBalancers/backendAddressPools/loadBalancerBackendAddresses",
                },
              ],
              backendIPConfigurations: [
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/0/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
                },
                {
                  id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/1/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
                },
              ],
            },
          },
        ],
        loadBalancingRules: [],
        probes: [],
        inboundNatRules: [],
        outboundRules: [],
        inboundNatPools: [],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      publicIPAddresses: [resources.Network.PublicIPAddress["ip-address"]],
    }),
  });

  provider.Network.makeLoadBalancerBackendAddressPool({
    name: "backend-pool",
    properties: ({ config }) => ({
      properties: {
        loadBalancerBackendAddresses: [
          {
            name: "3f5ec05d-9fc4-49c1-9db4-678ae033e51c",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Network/loadBalancers/load-balancer/backendAddressPools/backend-pool/loadBalancerBackendAddresses/3f5ec05d-9fc4-49c1-9db4-678ae033e51c",
            etag: 'W/"1796fc6a-af7a-4898-874d-538f61b435ca"',
            properties: {
              provisioningState: "Succeeded",
              networkInterfaceIPConfiguration: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/0/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
              },
              inboundNatRulesPortMapping: [],
            },
            type: "Microsoft.Network/loadBalancers/backendAddressPools/loadBalancerBackendAddresses",
          },
          {
            name: "c4fc5a83-8857-4e6e-9759-74ce76f001b9",
            id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Network/loadBalancers/load-balancer/backendAddressPools/backend-pool/loadBalancerBackendAddresses/c4fc5a83-8857-4e6e-9759-74ce76f001b9",
            etag: 'W/"1796fc6a-af7a-4898-874d-538f61b435ca"',
            properties: {
              provisioningState: "Succeeded",
              networkInterfaceIPConfiguration: {
                id: "/subscriptions/e012cd34-c794-4e35-916f-f38dcd8ac45c/resourceGroups/rg-load-balancer/providers/Microsoft.Compute/virtualMachineScaleSets/vm-scale-set/virtualMachines/1/networkInterfaces/rg-load-balancer-vnet-nic01/ipConfigurations/rg-load-balancer-vnet-nic01-defaultIpConfiguration",
              },
              inboundNatRulesPortMapping: [],
            },
            type: "Microsoft.Network/loadBalancers/backendAddressPools/loadBalancerBackendAddresses",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      loadBalancer: resources.Network.LoadBalancer["load-balancer"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "basicNsgrg-load-balancer-vnet-nic01",
    properties: ({ config }) => ({
      properties: {
        securityRules: [],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "ip-address",
    properties: ({ config }) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makeSubnet({
    name: "default",
    properties: ({ config }) => ({
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      virtualNetwork: resources.Network.VirtualNetwork["load-balancer"],
    }),
  });

  provider.Network.makeSubnet({
    name: "default",
    properties: ({ config }) => ({
      properties: {
        addressPrefix: "10.1.0.0/16",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      virtualNetwork: resources.Network.VirtualNetwork["rg-load-balancer-vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "load-balancer",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-load-balancer-vnet",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.1.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-load-balancer",
  });
};

exports.createResources = createResources;
