// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Compute.makeSshPublicKey({
    name: "rg-load-balancer::vmss_key",
    properties: ({}) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCxXnVXbmiV4UWi7FTpR4mWx4pp\r\nM+9t/77vpw3rwtFW/n0V/2N6+j9yuCP5Mu2Pi7c+i8UQ3bkofHOpjsk4uAu0vr8a\r\nC0/LPiHFmlvtEfKvomoNtLO5iRnTjpsPFFqvfNQJKDsOnGoBO4pAF2xdr96V2Doh\r\nggxdj5ZyGh0EbQqm/XKrW1boOYkoqxGQKO8EZj4l0qWzRmpMw2NXQtqOO+pJ2IVJ\r\nhQOwnXk4G/v9yxogwuUGp4cFu02bix72LzRgzXLfsFkQqwRSg50xlNqsoBysTPhb\r\nibQhLNbSHqJtyXgoPNuEohREjuH1EjU0tFJrv285xd7xWRnVyG2w6+WWckr84uwO\r\no3456BJWD9PoQvXTJVMhR1iR8J8FesqZP1JwrV3CLS205z6z5GLgcKulVsCal9/G\r\nvnxXM1Ob9zAEFd6QBAuK0ejbOb1tmXgwnhlFAWr7Fq1TbAfk0ga6Cm5chEmI21ZK\r\nVO9j0Reu0NAONyrPs09y7u3r38CgGTyot/VS5mU= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Compute.makeVirtualMachineScaleSet({
    name: "rg-load-balancer::vmss",
    properties: ({ getId }) => ({
      sku: {
        name: "Standard_B1ls",
        tier: "Standard",
        capacity: 1,
      },
      properties: {
        singlePlacementGroup: false,
        upgradePolicy: {
          mode: "Manual",
        },
        scaleInPolicy: {
          rules: ["Default"],
        },
        virtualMachineProfile: {
          osProfile: {
            computerNamePrefix: "vmssfxzig",
            adminUsername: "azureuser",
            linuxConfiguration: {
              disablePasswordAuthentication: true,
              ssh: {
                publicKeys: [
                  {
                    path: "/home/azureuser/.ssh/authorized_keys",
                  },
                ],
              },
              provisionVMAgent: true,
            },
            allowExtensionOperations: true,
            adminPassword: process.env.RG_LOAD_BALANCER_VMSS_ADMIN_PASSWORD,
          },
          storageProfile: {
            osDisk: {
              osType: "Linux",
              createOption: "FromImage",
              caching: "ReadWrite",
              managedDisk: {
                storageAccountType: "Premium_LRS",
              },
              diskSizeGB: 30,
            },
            imageReference: {
              publisher: "canonical",
              offer: "0001-com-ubuntu-server-focal",
              sku: "20_04-lts",
              version: "latest",
            },
          },
          diagnosticsProfile: {
            bootDiagnostics: {
              enabled: true,
            },
          },
          networkProfile: {
            networkInterfaceConfigurations: [
              {
                name: "vnet-nic01",
                properties: {
                  primary: true,
                  enableAcceleratedNetworking: false,
                  networkSecurityGroup: {
                    id: getId({
                      type: "NetworkSecurityGroup",
                      group: "Network",
                      name: "rg-load-balancer::basicnsgvnet-nic01",
                    }),
                  },
                  dnsSettings: {
                    dnsServers: [],
                  },
                  enableIPForwarding: false,
                  ipConfigurations: [
                    {
                      name: "vnet-nic01-defaultIpConfiguration",
                      properties: {
                        primary: true,
                        subnet: {
                          id: getId({
                            type: "Subnet",
                            group: "Network",
                            name: "rg-load-balancer::vnet::default",
                          }),
                        },
                        privateIPAddressVersion: "IPv4",
                        loadBalancerBackendAddressPools: [
                          {
                            id: getId({
                              type: "LoadBalancerBackendAddressPool",
                              group: "Network",
                              name: "rg-load-balancer::load-balancer::backendpool",
                            }),
                          },
                        ],
                      },
                    },
                  ],
                },
              },
            ],
          },
        },
        overprovision: false,
        doNotRunExtensionsOnOverprovisionedVMs: false,
        platformFaultDomainCount: 1,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      subnets: [resources.Network.Subnet["rg-load-balancer::vnet::default"]],
      sshPublicKeys: [
        resources.Compute.SshPublicKey["rg-load-balancer::vmss_key"],
      ],
      networkSecurityGroups: [
        resources.Network.NetworkSecurityGroup[
          "rg-load-balancer::basicnsgvnet-nic01"
        ],
      ],
      loadBalancerBackendAddressPools: [
        resources.Network.LoadBalancerBackendAddressPool[
          "rg-load-balancer::load-balancer::backendpool"
        ],
      ],
    }),
  });

  provider.Network.makeLoadBalancer({
    name: "rg-load-balancer::load-balancer",
    properties: ({ getId }) => ({
      sku: {
        name: "Standard",
        tier: "Regional",
      },
      properties: {
        frontendIPConfigurations: [
          {
            name: "frontend",
            properties: {
              publicIPAddress: {
                id: getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "rg-load-balancer::ip",
                }),
              },
            },
          },
        ],
        loadBalancingRules: [],
        probes: [],
        inboundNatRules: [],
        outboundRules: [],
        inboundNatPools: [],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      publicIPAddresses: [
        resources.Network.PublicIPAddress["rg-load-balancer::ip"],
      ],
    }),
  });

  provider.Network.makeLoadBalancerBackendAddressPool({
    name: "rg-load-balancer::load-balancer::backendpool",
    properties: ({}) => ({
      properties: {},
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      loadBalancer:
        resources.Network.LoadBalancer["rg-load-balancer::load-balancer"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "rg-load-balancer::basicnsgvnet-nic01",
    properties: ({}) => ({
      properties: {
        securityRules: [],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-load-balancer::ip",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-load-balancer::vnet::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/16",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-load-balancer::vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-load-balancer::vnet",
    properties: ({}) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-load-balancer"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-load-balancer",
  });
};

exports.createResources = createResources;
