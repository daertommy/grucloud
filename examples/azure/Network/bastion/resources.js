// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "VirtualMachine",
    group: "Compute",
    properties: ({ getId }) => ({
      name: "my-machine",
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "my-machine",
          adminUsername: "azureuser",
          linuxConfiguration: {
            enableVMAgentPlatformUpdates: false,
          },
          adminPassword: process.env.RG_BASTION_MY_MACHINE_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts-gen2",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "my-machine_OsDisk_1_9d8c212be79f4e1eab372385ccc2dc52",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Delete",
            diskSizeGB: 30,
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "rg-bastion::my-machine169",
              }),
              properties: {
                deleteOption: "Detach",
              },
            },
          ],
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      networkInterfaces: ["rg-bastion::my-machine169"],
    }),
  },
  {
    type: "VirtualMachineExtension",
    group: "Compute",
    properties: ({ config }) => ({
      name: "AADSSHLoginForLinux",
      location: config.location,
      properties: {
        publisher: "Microsoft.Azure.ActiveDirectory",
        type: "AADSSHLoginForLinux",
        typeHandlerVersion: "1.0",
        autoUpgradeMinorVersion: true,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      vm: "rg-bastion::my-machine",
    }),
  },
  {
    type: "BastionHost",
    group: "Network",
    properties: ({ config, getId }) => ({
      name: "bastion",
      location: config.location,
      properties: {
        ipConfigurations: [
          {
            properties: {
              privateIPAllocationMethod: "Dynamic",
              subnet: {
                id: `${getId({
                  type: "Subnet",
                  group: "Network",
                  name: "rg-bastion::vnet::AzureBastionSubnet",
                })}`,
              },
              publicIPAddress: {
                id: `${getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "rg-bastion::ip-bastion",
                })}`,
              },
            },
            name: "IpConf",
          },
        ],
        scaleUnits: 2,
      },
      sku: {
        name: "Basic",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      subnets: ["rg-bastion::vnet::AzureBastionSubnet"],
      publicIpAddresses: ["rg-bastion::ip-bastion"],
    }),
  },
  {
    type: "NetworkInterface",
    group: "Network",
    properties: ({ config, getId }) => ({
      name: "my-machine169",
      location: config.location,
      properties: {
        ipConfigurations: [
          {
            properties: {
              subnet: {
                id: `${getId({
                  type: "Subnet",
                  group: "Network",
                  name: "rg-bastion::vnet::subnet",
                })}`,
              },
            },
            name: "ipconfig1",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      networkSecurityGroup: "rg-bastion::my-machine-nsg",
      subnets: ["rg-bastion::vnet::subnet"],
    }),
  },
  {
    type: "NetworkSecurityGroup",
    group: "Network",
    properties: ({}) => ({
      name: "my-machine-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
              sourcePortRanges: [],
              destinationPortRanges: [],
              sourceAddressPrefixes: [],
              destinationAddressPrefixes: [],
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
    }),
  },
  {
    type: "PublicIPAddress",
    group: "Network",
    properties: ({}) => ({
      name: "ip-bastion",
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
    }),
  },
  {
    type: "Subnet",
    group: "Network",
    properties: ({}) => ({
      name: "AzureBastionSubnet",
      properties: {
        addressPrefix: "172.16.0.0/26",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      virtualNetwork: "rg-bastion::vnet",
    }),
  },
  {
    type: "Subnet",
    group: "Network",
    properties: ({}) => ({
      name: "subnet",
      properties: {
        addressPrefix: "172.16.1.0/26",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
      virtualNetwork: "rg-bastion::vnet",
    }),
  },
  {
    type: "VirtualNetwork",
    group: "Network",
    properties: ({}) => ({
      name: "vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["172.16.0.0/16"],
        },
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-bastion",
    }),
  },
  {
    type: "ResourceGroup",
    group: "Resources",
    properties: ({}) => ({
      name: "rg-bastion",
    }),
  },
];
