// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Network.makeNatGateway({
    name: "rg-natgateway::nat-gw",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        idleTimeoutInMinutes: 4,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-natgateway"],
      publicIpAddresses: [
        resources.Network.PublicIPAddress["rg-natgateway::ip-address"],
      ],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-natgateway::ip-address",
    properties: ({}) => ({
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-natgateway"],
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-natgateway::virtual-network::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-natgateway"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-natgateway::virtual-network"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-natgateway::virtual-network",
    properties: ({}) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-natgateway"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-natgateway",
  });
};

exports.createResources = createResources;
