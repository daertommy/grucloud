// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "0c443613-bc05-4fa2-b6f2-d657c260dc0c",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Crypto Officer",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
  });

  provider.Compute.makeDiskEncryptionSet({
    name: "rg-keyvault-rbac::de",
    properties: ({}) => ({
      name: "de",
      properties: {
        encryptionType: "EncryptionAtRestWithCustomerKey",
        rotationToLatestKeyVersionEnabled: false,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
      vault: resources.KeyVault.Vault["rg-keyvault-rbac::gc-vault-rbac"],
      key: resources.KeyVault.Key["rg-keyvault-rbac::gc-vault-rbac::my-key"],
    }),
  });

  provider.KeyVault.makeKey({
    name: "rg-keyvault-rbac::gc-vault-rbac::key",
    properties: ({}) => ({
      name: "key",
      properties: {
        attributes: {
          enabled: true,
        },
        kty: "RSA",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
      vault: resources.KeyVault.Vault["rg-keyvault-rbac::gc-vault-rbac"],
    }),
  });

  provider.KeyVault.makeKey({
    name: "rg-keyvault-rbac::gc-vault-rbac::my-key",
    properties: ({}) => ({
      name: "my-key",
      properties: {
        attributes: {
          enabled: true,
        },
        kty: "RSA",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
      vault: resources.KeyVault.Vault["rg-keyvault-rbac::gc-vault-rbac"],
    }),
  });

  provider.KeyVault.makeVault({
    name: "rg-keyvault-rbac::gc-vault-rbac",
    properties: ({ config }) => ({
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [],
        enabledForDeployment: false,
        enabledForDiskEncryption: true,
        enabledForTemplateDeployment: false,
        softDeleteRetentionInDays: 7,
        enableRbacAuthorization: true,
        enablePurgeProtection: true,
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-keyvault-rbac",
    properties: ({}) => ({
      name: "rg-keyvault-rbac",
    }),
  });
};

exports.createResources = createResources;
