// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  // provider.Authorization.makeRoleAssignment({
  //   name: "11982547-8b79-4f05-a137-b682f92f1add",
  //   properties: ({ config }) => ({
  //     properties: {
  //       roleName: "Key Vault Crypto Service Encryption User",
  //       principalName: "de",
  //       principalType: "ServicePrincipal",
  //     },
  //   }),
  //   dependencies: ({ resources }) => ({
  //     principal: resources.Compute.DiskEncryptionSet["rg-keyvault-rbac::de"],
  //   }),
  // });

  provider.Compute.makeDiskEncryptionSet({
    name: "rg-keyvault-rbac::de",
    properties: ({ config }) => ({
      properties: {
        encryptionType: "EncryptionAtRestWithCustomerKey",
        rotationToLatestKeyVersionEnabled: false,
      },
    }),
    dependencies: pipe([
      ({ resources }) => ({
        resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
        vault: resources.KeyVault.Vault["rg-keyvault-rbac::gc-vault-rbac"],
        key: resources.KeyVault.Key["rg-keyvault-rbac::gc-vault-rbac::my-key"],
      }),
    ]),
  });

  provider.KeyVault.makeKey({
    name: "rg-keyvault-rbac::gc-vault-rbac::my-key",
    properties: ({ config }) => ({
      properties: {
        attributes: {
          enabled: true,
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
      vault: resources.KeyVault.Vault["rg-keyvault-rbac::gc-vault-rbac"],
    }),
  });

  provider.KeyVault.makeVault({
    name: "rg-keyvault-rbac::gc-vault-rbac",
    properties: ({ config }) => ({
      location: "centralus",
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [],
        enabledForDeployment: false,
        enabledForDiskEncryption: true,
        enabledForTemplateDeployment: false,
        softDeleteRetentionInDays: 7,
        enableRbacAuthorization: true,
        enablePurgeProtection: true,
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-keyvault-rbac"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-keyvault-rbac",
  });
};

exports.createResources = createResources;
