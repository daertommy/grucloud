// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "eef4a72d-0d39-478d-899e-64cb62f94498",
    properties: ({ config }) => ({
      properties: {
        roleName: "Key Vault Crypto Officer",
        principalName: "vm-vault",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      principalVirtualMachine: resources.Compute.VirtualMachine["vm-vault"],
    }),
  });

  provider.Compute.makeSshPublicKey({
    name: "keypair-vm-vault",
    properties: ({ config }) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDHnft9RNWHWd6VJTnFpNfh0gs4\r\nliy/BoQFCki/UhfLCqfHX8eOggKOUFjv94hFq1B+2uPDoPMJ4uKx/jk4VD2Q8EqE\r\n5DCOqOpfIFRu5phmxtOBNleLmh0HF0X3RRFqGxMp09MhijfEo8PCVmZW62aO2CuZ\r\nxRhGfZ8EWfRtxOtB9HNw2NSFnIrB2LA78L7Yv6kc2uFEfXa8uG47EiuACZQ3WsJI\r\n6L5QOBaOrKv8z/grkKisKBxKV0yJ4COPAew9qP3O7Z8doDmLX055OW9SALMF/ZOe\r\niLHCM6EJdoFUUpbh+GZjweDM5OjD1XuCKJQY4vjNFNNfd18mOpaGSnvw9GjEwIrY\r\npIz4mNAVdmywlRr9xKeE+JmdIjFpSBRSidfidQjnlaypVXgnaZ3apiwZCJxsACfY\r\nxiTJ5NdfQFEAOJ05svf7Qmdk1pz4LQP208m8vhE0mzTRVch93RfS1nWDd1UTEnSD\r\nUu8bQjfKpcixhJW2WnIiVjPgOCy5DtS9szSiypE= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "vm-vault",
    properties: ({ config }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
        },
        osProfile: {
          computerName: "vm-vault",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.VM_VAULT_ADMIN_PASSWORD,
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      networkInterface: resources.Network.NetworkInterface["vm-vault738"],
      sshPublicKeys: [resources.Compute.SshPublicKey["keypair-vm-vault"]],
    }),
  });

  provider.KeyVault.makeVault({
    name: "gc-vault-vm",
    properties: ({ config }) => ({
      location: "centralus",
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [],
        enabledForDeployment: true,
        enabledForDiskEncryption: false,
        enabledForTemplateDeployment: false,
        softDeleteRetentionInDays: 7,
        enableRbacAuthorization: true,
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "vm-vault738",
    properties: ({ config }) => ({
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      virtualNetwork: resources.Network.VirtualNetwork["rg-vm-vault-vnet"],
      publicIpAddress: resources.Network.PublicIPAddress["vm-vault-ip"],
      securityGroup: resources.Network.NetworkSecurityGroup["vm-vault-nsg"],
      subnet: resources.Network.Subnet["default"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "vm-vault-nsg",
    properties: ({ config }) => ({
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "vm-vault-ip",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makeSubnet({
    name: "default",
    properties: ({ config }) => ({
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      virtualNetwork: resources.Network.VirtualNetwork["rg-vm-vault-vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-vm-vault-vnet",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-vm-vault",
  });
};

exports.createResources = createResources;
