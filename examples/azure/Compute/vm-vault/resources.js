// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    name: "b7908c97-a1c4-48ec-be3c-ba5013a17bcb",
    properties: ({}) => ({
      properties: {
        roleName: "Key Vault Crypto Officer",
        principalName: "rg-vm-vault::vm",
        principalType: "ServicePrincipal",
      },
    }),
    dependencies: ({ resources }) => ({
      principalVirtualMachine:
        resources.Compute.VirtualMachine["rg-vm-vault::vm"],
    }),
  });

  provider.Compute.makeSshPublicKey({
    name: "rg-vm-vault::admingrucloud",
    properties: ({}) => ({
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDdsP6627hgq8ztRN5EuRJgHCrJ\r\nyKk64lSY6E3BaVjK8Yf0S2LGNP8SU3KGDDT7rS+r5XPd4e4BP3rBxbO49oBdI56S\r\nsfs++YEdMeYDPjj2lod7i0msRiXUa50ibdNQ1iP4YBgigv3XV/clgv21oaSWAnjs\r\nK2/dBK4HhV8+Yw0jpCNs/CXdvbsbzzLLXlnGyOIIuVn/aUsGeVtHfaSuvudw7Tu0\r\nCPD9IFdecV/Bu2AGc/kHwfCO8t7Zu0JZfOAmTP6040IwJLPFUfvavmfcdE8UhnQ3\r\nQay6cN2CaRN42JSin/JcB2awlIPIgy4qzcUzY71J18kElRz+O5U1r+dAYLvqw9hi\r\n3cnN7nsCYKZ9QNivhKu+4cdr5WeI868bMUqWEEOVke9cgDqfyIHCzatJGEPRcl0d\r\nmlXLc6r5tW9D+aE49M8YkRpS0dpUcJW4QPg9Ll3Ptd7IlbIbVhKJ9ua169Bva89/\r\n1rU2eFzafxOZjmXgBhw+vyL5gdjo9TT4DFB4XoU= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    name: "rg-vm-vault::vm",
    properties: ({ getId }) => ({
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.RG_VM_VAULT_VM_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "vm_disk1_c4566598c5584ec39afe5069c280801a",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Detach",
            diskSizeGB: 30,
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "rg-vm-vault::vm426",
              }),
            },
          ],
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      networkInterfaces: [
        resources.Network.NetworkInterface["rg-vm-vault::vm426"],
      ],
      sshPublicKeys: [
        resources.Compute.SshPublicKey["rg-vm-vault::admingrucloud"],
      ],
    }),
  });

  provider.KeyVault.makeVault({
    name: "rg-vm-vault::gc-vault-vm",
    properties: ({ config }) => ({
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [],
        enabledForDeployment: true,
        enabledForDiskEncryption: false,
        enabledForTemplateDeployment: false,
        softDeleteRetentionInDays: 7,
        enableRbacAuthorization: true,
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makeNetworkInterface({
    name: "rg-vm-vault::vm426",
    properties: ({}) => ({
      name: "vm426",
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-vm-vault::virtual-network"],
      publicIpAddress: resources.Network.PublicIPAddress["rg-vm-vault::vm-ip"],
      securityGroup:
        resources.Network.NetworkSecurityGroup["rg-vm-vault::vm-nsg"],
      subnet: resources.Network.Subnet["rg-vm-vault::virtual-network::default"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    name: "rg-vm-vault::vm-nsg",
    properties: ({}) => ({
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makePublicIPAddress({
    name: "rg-vm-vault::vm-ip",
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Network.makeSubnet({
    name: "rg-vm-vault::virtual-network::default",
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-vm-vault::virtual-network"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "rg-vm-vault::virtual-network",
    properties: ({}) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-vault"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-vm-vault",
  });
};

exports.createResources = createResources;
