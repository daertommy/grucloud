// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.KeyVault.makeVault({
    name: "gc-vault-disk-2",
    properties: ({ config }) => ({
      location: "centralus",
      properties: {
        sku: {
          family: "A",
          name: "Standard",
        },
        accessPolicies: [
          {
            tenantId: `${config.tenantId}`,
            objectId: "36d662c2-1069-4c1f-969f-ab3450c43f06",
            permissions: {
              keys: [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
              ],
              secrets: [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
              ],
              certificates: [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers",
              ],
            },
          },
        ],
        enabledForDeployment: false,
        enabledForDiskEncryption: true,
        enabledForTemplateDeployment: false,
        enablePurgeProtection: true,
        networkAcls: {
          bypass: "AzureServices",
          defaultAction: "Deny",
          ipRules: [],
        },
        publicNetworkAccess: "Enabled",
        tenantId: `${config.tenantId}`,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-disk-encrypted"],
      subnets: [resources.Network.Subnet["default"]],
    }),
  });

  provider.Network.makeSubnet({
    name: "default",
    properties: ({ config }) => ({
      properties: {
        addressPrefix: "10.0.0.0/24",
        serviceEndpoints: [
          {
            service: "Microsoft.KeyVault",
            locations: ["*"],
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-disk-encrypted"],
      virtualNetwork: resources.Network.VirtualNetwork["vnet-vault"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    name: "vnet-vault",
    properties: ({ config }) => ({
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-disk-encrypted"],
    }),
  });

  provider.Resources.makeResourceGroup({
    name: "rg-disk-encrypted",
  });
};

exports.createResources = createResources;
