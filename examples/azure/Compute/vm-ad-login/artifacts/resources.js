// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Authorization.makeRoleAssignment({
    properties: ({}) => ({
      name: "6b666cf9-7a83-4fd6-8242-1ed706f1a299",
      properties: {
        roleName: "Virtual Machine User Login",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
  });

  provider.Authorization.makeRoleAssignment({
    properties: ({}) => ({
      name: "ae123f45-0f98-4844-afb6-8d4e9a980b11",
      properties: {
        roleName: "Virtual Machine User Login",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
    dependencies: ({ resources }) => ({
      scopeVirtualMachine: resources.Compute.VirtualMachine["vm-ad-login"],
    }),
  });

  provider.Authorization.makeRoleAssignment({
    properties: ({}) => ({
      name: "f0516cf2-f1a0-4c25-a824-01929538c860",
      properties: {
        roleName: "Virtual Machine User Login",
        principalId: "33ccdfbf-d20f-42bf-a59b-e75fc52729bb",
      },
    }),
    dependencies: ({ resources }) => ({
      scopeResourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
    }),
  });

  provider.Compute.makeSshPublicKey({
    properties: ({}) => ({
      name: "vm-ad-login_key",
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuFO2BGw/Prov17ZxxCxf648P2\r\nI47TZzs1k7SEDG08wZFqCMpvvQ7ixOuZS6R5/HxWM8WJ12BAgcnGm1fXzvK9+H62\r\nLG1E4E3wQVYvjmDOq06y35loSJ9k06CGQYkkM4LcLDb/w4EOQjwOJeWd4WGAM8bv\r\nTtZIcPWfKujr/8VsW12aBJO4zXWlgrBuFqIgr9/IrXueZBuI1evNb5h0Pik17QPI\r\nckLVyiH+IEC0jqep8fxgSMHC9UnGx7l1xlWDY1LEEQcVo6wtJDrY+m/CbVU4QtiW\r\nKjqzRwgMZVUbntgTzOIKkT7v842vUc4yOOuwshQ7w+OiEs/2HQo70orqGVzE+pyj\r\nq+AjM6rzbEnBqsC2qlrazF7ARlLs7lC+iHHkNG0cuZrePzIShsq5fQuRx33CWOo3\r\nKCIxlnvBJ/x1G+Y5rgat2uv+CrD/QWRAmabKj4H36NLDBDZhsxh07WbpojcyFKkN\r\nTGJvgJAg1+2ZrY0RMXbWk+nq5n2yQZQQ1QSIoFE= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    properties: ({ getId }) => ({
      name: "vm-ad-login",
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm-ad-login",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.VM_AD_LOGIN_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "vm-ad-login_OsDisk_1_c074f73b9f7a4fbb92b7c9befd8bbf3f",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Detach",
            diskSizeGB: 30,
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "vm-ad-login705",
              }),
            },
          ],
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
      networkInterfaces: [resources.Network.NetworkInterface["vm-ad-login705"]],
      sshPublicKeys: [resources.Compute.SshPublicKey["vm-ad-login_key"]],
    }),
  });

  provider.Compute.makeVirtualMachineExtension({
    properties: ({}) => ({
      name: "AADSSHLoginForLinux",
      properties: {
        publisher: "Microsoft.Azure.ActiveDirectory",
        type: "AADSSHLoginForLinux",
        typeHandlerVersion: "1.0",
        autoUpgradeMinorVersion: true,
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
      vm: resources.Compute.VirtualMachine["vm-ad-login"],
    }),
  });

  provider.Network.makeNetworkInterface({
    properties: ({}) => ({
      name: "vm-ad-login705",
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
      virtualNetwork: resources.Network.VirtualNetwork["rg-vm-ad-login-vnet"],
      publicIpAddress: resources.Network.PublicIPAddress["vm-ad-login-ip"],
      securityGroup: resources.Network.NetworkSecurityGroup["vm-ad-login-nsg"],
      subnet: resources.Network.Subnet["default"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    properties: ({}) => ({
      name: "vm-ad-login-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
    }),
  });

  provider.Network.makePublicIPAddress({
    properties: ({}) => ({
      name: "vm-ad-login-ip",
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
    }),
  });

  provider.Network.makeSubnet({
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
      virtualNetwork: resources.Network.VirtualNetwork["rg-vm-ad-login-vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    properties: ({}) => ({
      name: "rg-vm-ad-login-vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup: resources.Resources.ResourceGroup["rg-vm-ad-login"],
    }),
  });

  provider.Resources.makeResourceGroup({
    properties: ({}) => ({
      name: "rg-vm-ad-login",
    }),
  });
};

exports.createResources = createResources;
