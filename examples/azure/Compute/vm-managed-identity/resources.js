// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.Compute.makeSshPublicKey({
    properties: ({}) => ({
      name: "AdminGruCloud",
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCUaOf6WMP2G14KmITySPZRfBlj\r\nKmREIyccOTVEHhuewb0MbCh50H8cvMRpIzFUbhZ4sl7eIa2SaWkrZUf45CptdTYs\r\nYIMUTiFnkVa6UgUx6oRbbYWi85L7HJrU3XnUfeD7wXUe502aMerkqW9TOkVTVGDd\r\nkFjtsHngtFMrdvhGP5EEwwu5c5uy4lsiWvACA4dDIlg2+CeXlYp96cZ9kxcbZ8Vx\r\nrRmWhhIwdYllTYgvLPFXjK1aLAM4nmD7/0ZgEf8MbfZkJlEgRg7c1USKMHyxFONJ\r\nYFN8yZVaxgXk+1qooAd5p1C1hLkUyjTixIvXspZEprAdWS2cYvex99G6CG4lg2ub\r\ntpize7HeF8a3M+uxXlbSJDRpOWgK/2G2vQ9XkiA2zpPjzNLsAPW2cR5c3gXn4XFL\r\nOAVqdU78XDpzmRZfjp/NwVItJ5H02BnQkpChJxGp3HVmIB4/AfgaIFIgbxUGi+LW\r\nTcr1zqwHd0BauEPwlBZD119hXashajimSddMJTU= generated-by-azure\r\n",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
    }),
  });

  provider.Compute.makeVirtualMachine({
    properties: ({ getId }) => ({
      name: "vm",
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "vm",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                },
              ],
            },
          },
          adminPassword: process.env.VM_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "vm_OsDisk_1_7c1e682b31ab4deb8b5659c4f91e96d5",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Detach",
            diskSizeGB: 30,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "vm376",
              }),
            },
          ],
        },
      },
      identity: {
        type: "UserAssigned",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
      networkInterfaces: [resources.Network.NetworkInterface["vm376"]],
      managedIdentities: [
        resources.ManagedIdentity.UserAssignedIdentity["my-identity"],
      ],
      sshPublicKeys: [resources.Compute.SshPublicKey["AdminGruCloud"]],
    }),
  });

  provider.ManagedIdentity.makeUserAssignedIdentity({
    properties: ({}) => ({
      name: "my-identity",
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
    }),
  });

  provider.Network.makeNetworkInterface({
    properties: ({}) => ({
      name: "vm376",
      properties: {
        ipConfigurations: [
          {
            name: "ipconfig1",
            properties: {
              privateIPAllocationMethod: "Dynamic",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-vm-managed-identity-vnet"],
      publicIpAddress: resources.Network.PublicIPAddress["vm-ip"],
      securityGroup: resources.Network.NetworkSecurityGroup["vm-nsg"],
      subnet: resources.Network.Subnet["default"],
    }),
  });

  provider.Network.makeNetworkSecurityGroup({
    properties: ({}) => ({
      name: "vm-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
            },
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
    }),
  });

  provider.Network.makePublicIPAddress({
    properties: ({}) => ({
      name: "vm-ip",
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
    }),
  });

  provider.Network.makeSubnet({
    properties: ({}) => ({
      name: "default",
      properties: {
        addressPrefix: "10.0.0.0/24",
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
      virtualNetwork:
        resources.Network.VirtualNetwork["rg-vm-managed-identity-vnet"],
    }),
  });

  provider.Network.makeVirtualNetwork({
    properties: ({}) => ({
      name: "rg-vm-managed-identity-vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["10.0.0.0/16"],
        },
      },
    }),
    dependencies: ({ resources }) => ({
      resourceGroup:
        resources.Resources.ResourceGroup["rg-vm-managed-identity"],
    }),
  });

  provider.Resources.makeResourceGroup({
    properties: ({}) => ({
      name: "rg-vm-managed-identity",
    }),
  });
};

exports.createResources = createResources;
