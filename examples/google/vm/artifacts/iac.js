// Generated by gcp2gc
const { GoogleProvider } = require("@grucloud/provider-google");

const createResources = ({ provider }) => {
  provider.iam.makeServiceAccount({
    name: "sa-test-vm",
    properties: ({ config }) => ({
      serviceAccount: {
        displayName: "SA dev",
        description: "Managed By GruCloud",
      },
    }),
  });

  provider.compute.makeFirewall({
    name: "firewall-22-80-433",
    properties: ({ config }) => ({
      description: "Managed By GruCloud",
      priority: 1000,
      sourceRanges: ["0.0.0.0/0"],
      allowed: [
        {
          IPProtocol: "tcp",
          ports: ["22", "80", "433"],
        },
      ],
      direction: "INGRESS",
      logConfig: {
        enable: false,
      },
    }),
  });

  provider.compute.makeFirewall({
    name: "firewall-icmp",
    properties: ({ config }) => ({
      description: "Managed By GruCloud",
      priority: 1000,
      sourceRanges: ["0.0.0.0/0"],
      allowed: [
        {
          IPProtocol: "icmp",
        },
      ],
      direction: "INGRESS",
      logConfig: {
        enable: false,
      },
    }),
  });

  provider.compute.makeAddress({
    name: "ip-webserver",
    properties: ({ config }) => ({
      description: "Managed By GruCloud",
    }),
  });

  provider.compute.makeDisk({
    name: "disk",
    properties: ({ config }) => ({
      sizeGb: "20",
      type: "pd-standard",
    }),
  });

  provider.compute.makeVmInstance({
    name: "webserver",
    properties: ({ config }) => ({
      tags: {},
      machineType: "f1-micro",
      canIpForward: false,
      metadata: {
        items: [
          {
            key: "enable-oslogin",
            value: "True",
          },
        ],
      },
      labels: {
        "managed-by": "grucloud",
        "gc-stage": "dev",
      },
      startRestricted: false,
      deletionProtection: false,
      reservationAffinity: {
        consumeReservationType: "ANY_RESERVATION",
      },
      displayDevice: {
        enableDisplay: false,
      },
      shieldedInstanceConfig: {
        enableSecureBoot: false,
        enableVtpm: true,
        enableIntegrityMonitoring: true,
      },
      shieldedInstanceIntegrityPolicy: {
        updateAutoLearnPolicy: true,
      },
      confidentialInstanceConfig: {
        enableConfidentialCompute: false,
      },
      sourceImage:
        "projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20210908",
    }),
    dependencies: ({ resources }) => ({
      address: resources.compute.Address.ipWebserver,
      disks: [resources.compute.Disk.disk],
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(GoogleProvider, {
    config: require("./config"),
  });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
