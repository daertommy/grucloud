// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "sam-app-MQConsumerRole-1B7X8RWYMFW5X",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "mq:DescribeBroker",
                  "secretsmanager:GetSecretValue",
                  "ec2:CreateNetworkInterface",
                  "ec2:DescribeNetworkInterfaces",
                  "ec2:DescribeVpcs",
                  "ec2:DeleteNetworkInterface",
                  "ec2:DescribeSubnets",
                  "ec2:DescribeSecurityGroups",
                ],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "MQConsumerRolePolicy0",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["secretsmanager:GetSecretValue"],
                Resource: `${getId({
                  type: "Secret",
                  group: "SecretsManager",
                  name: "MQaccess",
                  path: "live.ARN",
                })}`,
                Effect: "Allow",
              },
              {
                Action: ["mq:DescribeBroker"],
                Resource: `${getId({
                  type: "Broker",
                  group: "MQ",
                  name: "myQueue",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "SamAutoGeneratedAMQPolicy",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
    dependencies: ({}) => ({
      mqBrokers: ["myQueue"],
      secretsManagerSecrets: ["MQaccess"],
    }),
  },
  {
    type: "EventSourceMapping",
    group: "Lambda",
    properties: ({ getId }) => ({
      BatchSize: 100,
      Queues: ["myQueue"],
      SourceAccessConfigurations: [
        {
          Type: "BASIC_AUTH",
          URI: `${getId({
            type: "Secret",
            group: "SecretsManager",
            name: "MQaccess",
          })}`,
        },
        {
          Type: "VIRTUAL_HOST",
          URI: "/",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-MQConsumer-fNre3FdF3RjH",
      mqBroker: "myQueue",
      secretsManagerSecrets: ["MQaccess"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "sam-app-MQConsumer-fNre3FdF3RjH",
        Handler: "app.lambda_handler",
        Runtime: "python3.7",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-MQConsumerRole-1B7X8RWYMFW5X",
    }),
  },
  {
    type: "Broker",
    group: "MQ",
    properties: ({}) => ({
      AuthenticationStrategy: "simple",
      AutoMinorVersionUpgrade: false,
      BrokerName: "myQueue",
      DeploymentMode: "SINGLE_INSTANCE",
      EncryptionOptions: {
        UseAwsOwnedKey: true,
      },
      EngineType: "RabbitMQ",
      EngineVersion: "3.8.11",
      HostInstanceType: "mq.m5.large",
      Logs: {
        General: false,
      },
      MaintenanceWindowStartTime: {
        DayOfWeek: "FRIDAY",
        TimeOfDay: "22:00",
        TimeZone: "UTC",
      },
      PubliclyAccessible: true,
      StorageType: "ebs",
      Users: [],
    }),
  },
  {
    type: "Secret",
    group: "SecretsManager",
    properties: ({ generatePassword }) => ({
      Name: "MQaccess",
      SecretString: {
        username: "mquser",
        password: generatePassword({ length: 18 }),
      },
    }),
  },
];
