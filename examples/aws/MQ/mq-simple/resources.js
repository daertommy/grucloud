// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Broker",
    group: "MQ",
    properties: ({}) => ({
      AuthenticationStrategy: "simple",
      AutoMinorVersionUpgrade: true,
      BrokerName: "my-broker",
      DeploymentMode: "SINGLE_INSTANCE",
      EncryptionOptions: {
        UseAwsOwnedKey: true,
      },
      EngineType: "ActiveMQ",
      EngineVersion: "5.17.1",
      HostInstanceType: "mq.t3.micro",
      Logs: {
        Audit: false,
        General: false,
      },
      MaintenanceWindowStartTime: {
        DayOfWeek: "THURSDAY",
        TimeOfDay: "19:00",
        TimeZone: "UTC",
      },
      PubliclyAccessible: true,
      StorageType: "efs",
      Users: [
        {
          Username: "my-user",
          Password: JSON.parse(process.env.MY_BROKER_PASSWORD)[0],
        },
      ],
    }),
    dependencies: ({}) => ({
      configuration: "my-broker-configuration",
    }),
  },
  {
    type: "Configuration",
    group: "MQ",
    properties: ({}) => ({
      AuthenticationStrategy: "simple",
      EngineType: "ActiveMQ",
      EngineVersion: "5.17.1",
      Name: "my-broker-configuration",
      Data: '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<broker xmlns="http://activemq.apache.org/schema/core" schedulePeriodForDestinationPurge="10000">\n  <!--\n  A configuration contains all of the settings for your ActiveMQ broker, in XML format (similar to ActiveMQ\'s activemq.xml file).\n  You can create a configuration before creating any brokers. You can then apply the configuration to one or more brokers.\n\n  You can use additional attributes for the broker element above. These attributes allow you to configure broker-wide settings.\n\n  For more information, see Configuration and Amazon MQ Broker Configuration Parameters in the Amazon MQ Developer Guide:\n  https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-broker-configuration-parameters.html\n  -->\n  <!--\n  Mirrored queues let you send a copy of each message to a topic with a similar name automatically.\n  For more information, see http://activemq.apache.org/mirrored-queues.html\n\n  Virtual destinations let you configure advanced routing of messages between destinations.\n  For more information, see http://activemq.apache.org/virtual-destinations.html\n  -->\n  <!--\n  <destinationInterceptors>\n    <mirroredQueue copyMessage="true" postfix=".qmirror" prefix=""/>\n    <virtualDestinationInterceptor>\n      <virtualDestinations>\n        <virtualTopic name="&gt;" prefix="VirtualTopicConsumers.*." selectorAware="false"/>\n        <compositeQueue name="MY.QUEUE">\n          <forwardTo>\n            <queue physicalName="FOO"/>\n            <topic physicalName="BAR"/>\n          </forwardTo>\n        </compositeQueue>\n      </virtualDestinations>\n    </virtualDestinationInterceptor>\n  </destinationInterceptors>\n  -->\n  <!--\n  By default, Amazon MQ optimizes for queues with fast consumers:\n  Consumers are considered fast if they are able to keep up with the rate of messages generated by producers.\n  Consumers are considered slow if a queue builds up a backlog of unacknowledged messages, potentially causing a decrease in producer throughput.\n  To instruct Amazon MQ to optimize for queues with slow consumers, set the concurrentStoreAndDispatchQueues attribute to false.\n  For more information, see https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/ensuring-effective-amazon-mq-performance.html\n  -->\n  <!--\n  <persistenceAdapter>\n    <kahaDB  concurrentStoreAndDispatchQueues="false"/>\n  </persistenceAdapter>\n  -->\n  <destinationPolicy>\n    <policyMap>\n      <policyEntries>\n        <!--\n        gcInactiveDestinations is used to automatically purge inactive destinations\n        preventing them from unnecessarily using broker resources.\n\n        An \'inactive\' destination is one that has no messages pending and no consumers connected.\n\n        For more information, see: http://activemq.apache.org/delete-inactive-destinations.html\n        -->\n        <policyEntry topic="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000">\n          <!--\n          The constantPendingMessageLimitStrategy is used to prevent\n          slow topic consumers to block producers and affect other consumers\n          by limiting the number of messages that are retained\n\n          For more information, see: http://activemq.apache.org/slow-consumer-handling.html\n          -->\n          <pendingMessageLimitStrategy>\n            <constantPendingMessageLimitStrategy limit="1000"/>\n          </pendingMessageLimitStrategy>\n        </policyEntry>\n        <policyEntry queue="&gt;" gcInactiveDestinations="true" inactiveTimoutBeforeGC="600000" />\n        <!--\n        Destination policies let you configure a rich set of behaviors for your queues and topics.\n        For more information, see http://activemq.apache.org/per-destination-policies.html\n        -->\n        <!--\n        <policyEntry topic="FOO.&gt;">\n          <dispatchPolicy>\n            <roundRobinDispatchPolicy/>\n          </dispatchPolicy>\n          <subscriptionRecoveryPolicy>\n            <lastImageSubscriptionRecoveryPolicy/>\n          </subscriptionRecoveryPolicy>\n        </policyEntry>\n        <policyEntry advisoryForConsumed="true" tempTopic="true"/>\n        <policyEntry advisoryForConsumed="true" tempQueue="true"/>\n        -->\n      </policyEntries>\n    </policyMap>\n  </destinationPolicy>\n  <!--\n  Typically, destinations are created automatically when they are used. Amazon MQ lets you create destinations when the broker is started.\n  For more information, see http://activemq.apache.org/configure-startup-destinations.html\n  -->\n  <!--\n  <destinations>\n    <queue physicalName="FOO.BAR"/>\n    <topic physicalName="SOME.TOPIC"/>\n  </destinations>\n  -->\n  <!--\n  You can control advanced ActiveMQ features using plugins.\n  -->\n  <plugins>\n    <!--\n    The Authorization plugin allows you to control the groups of users that are allowed to perform certain operations on your destinations.\n    For more information, see http://activemq.apache.org/security.html\n    -->\n    <!--\n    <authorizationPlugin>\n      <map>\n        <authorizationMap>\n          <authorizationEntries>\n            <authorizationEntry admin="guests,users" queue="GUEST.&gt;" read="guests" write="guests,users"/>\n            <authorizationEntry admin="guests,users" read="guests,users" topic="ActiveMQ.Advisory.&gt;" write="guests,users"/>\n          </authorizationEntries>\n          <tempDestinationAuthorizationEntry>\n            <tempDestinationAuthorizationEntry admin="tempDestinationAdmins" read="tempDestinationAdmins" write="tempDestinationAdmins"/>\n          </tempDestinationAuthorizationEntry>\n        </authorizationMap>\n      </map>\n    </authorizationPlugin>\n    -->\n    <!--\n    The Discarding DLQ plugin simplifies the configuration of your global dead-letter queue strategy.\n    You can take advantage of a more granular per-destination control by using destination policies.\n    For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html\n    -->\n    <!--\n    <discardingDLQBrokerPlugin dropAll="true" dropTemporaryQueues="true" dropTemporaryTopics="true"/>\n    -->\n    <!--\n    The Force Persistency Mode plugin can override the persistency mode set on messages.\n    -->\n    <!--\n    <forcePersistencyModeBrokerPlugin persistenceFlag="true"/>\n    -->\n    <!--\n    The Redelivery plugin extends the capabilities of destination policies with respect to message redelivery.\n    For more information, see http://activemq.apache.org/message-redelivery-and-dlq-handling.html\n    -->\n    <!--\n    <redeliveryPlugin fallbackToDeadLetter="true" sendToDlqIfMaxRetriesExceeded="true">\n      <redeliveryPolicyMap>\n        <redeliveryPolicyMap>\n          <redeliveryPolicyEntries>\n            <redeliveryPolicy maximumRedeliveries="4" queue="SpecialQueue" redeliveryDelay="10000"/>\n          </redeliveryPolicyEntries>\n          <defaultEntry>\n            <redeliveryPolicy initialRedeliveryDelay="5000" maximumRedeliveries="4" redeliveryDelay="10000"/>\n          </defaultEntry>\n        </redeliveryPolicyMap>\n      </redeliveryPolicyMap>\n    </redeliveryPlugin>\n    -->\n    <!--\n    The Statistics plugin lets you query broker or destination statistics by sending messages to the broker.\n    For more information, see http://activemq.apache.org/statisticsplugin.html\n    -->\n    <!--\n    <statisticsBrokerPlugin/>\n    -->\n    <!--\n    The Timestamping plugin lets the broker use server-side time instead of client-provided time for messages.\n    For more information, see http://activemq.apache.org/timestampplugin.html\n    -->\n    <!--\n    <timeStampingBrokerPlugin ttlCeiling="86400000" zeroExpirationOverride="86400000"/>\n    -->\n  </plugins>\n  <!--\n  Network connectors let you connect brokers into networks of brokers.\n  For more information, see Creating and Configuring an Amazon MQ Network of Brokers\n  (https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/amazon-mq-creating-configuring-network-of-brokers.html)\n  in the Amazon MQ Developer Guide and also Networks of Brokers\n  (http://activemq.apache.org/networks-of-brokers.html) in the ActiveMQ documentation.\n  -->\n  <!--\n  <networkConnectors>\n    <networkConnector name="myNetworkConnector" userName="commonUser" uri="masterslave:(ssl://b-1a2b3c4d-1.mq.region.amazonaws.com:61617,ssl://b-1a2b3c4d-2.mq.region.amazonaws.com:61617)"/>\n  </networkConnectors>\n  -->\n</broker>\n',
    }),
  },
];
