// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Fleet",
    group: "AppStream",
    properties: ({}) => ({
      ComputeCapacity: {
        DesiredInstances: 1,
      },
      FleetType: "ON_DEMAND",
      ImageName: "AppStream-AmazonLinux2-09-21-2022",
      InstanceType: "stream.standard.small",
      Name: "my-ondemand-fleet",
      StreamView: "APP",
    }),
    dependencies: ({}) => ({
      securityGroups: ["sg::vpc-default::default"],
      subnets: [
        "vpc-default::subnet-default-a",
        "vpc-default::subnet-default-b",
      ],
    }),
  },
  {
    type: "Stack",
    group: "AppStream",
    properties: ({}) => ({
      ApplicationSettings: {
        Enabled: false,
        SettingsGroup: "stack",
      },
      Name: "stack",
      StorageConnectors: [
        {
          ConnectorType: "HOMEFOLDERS",
        },
      ],
      StreamingExperienceSettings: {
        PreferredProtocol: "TCP",
      },
      FleetName: "my-ondemand-fleet",
    }),
    dependencies: ({}) => ({
      fleet: "my-ondemand-fleet",
    }),
  },
  { type: "Vpc", group: "EC2", name: "vpc-default", isDefault: true },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-a",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-b",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::vpc-default::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "AmazonAppStreamPCAAccess",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "prod.euc.ecm.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonAppStreamPCAAccess",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonAppStreamPCAAccess",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "AmazonAppStreamServiceAccess",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "appstream.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonAppStreamServiceAccess",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonAppStreamServiceAccess",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "ApplicationAutoScalingForAmazonAppStreamAccess",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "application-autoscaling.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "ApplicationAutoScalingForAmazonAppStreamAccess",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/ApplicationAutoScalingForAmazonAppStreamAccess",
        },
      ],
    }),
  },
];
