// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "ComputeEnvironment",
    group: "Batch",
    properties: ({ config }) => ({
      computeEnvironmentName: "compute-environment",
      computeResources: {
        maxvCpus: 128,
        type: "FARGATE",
      },
      containerOrchestrationType: "ECS",
      serviceRole: `arn:aws:iam::${config.accountId()}:role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch`,
      type: "MANAGED",
    }),
    dependencies: ({}) => ({
      securityGroups: ["sg::vpc-default::default"],
      subnets: [
        "vpc-default::subnet-default-a",
        "vpc-default::subnet-default-b",
      ],
    }),
  },
  {
    type: "JobDefinition",
    group: "Batch",
    properties: ({}) => ({
      containerProperties: {
        command: ["echo", "hello grucloud"],
        fargatePlatformConfiguration: {
          platformVersion: "1.4.0",
        },
        image: "public.ecr.aws/amazonlinux/amazonlinux:latest",
        resourceRequirements: [
          {
            type: "VCPU",
            value: "1",
          },
          {
            type: "MEMORY",
            value: "2048",
          },
        ],
      },
      jobDefinitionName: "job-definition",
      platformCapabilities: ["FARGATE"],
      type: "container",
    }),
    dependencies: ({}) => ({
      roleExecution: "role-execution-batch",
    }),
  },
  {
    type: "JobQueue",
    group: "Batch",
    properties: ({ getId }) => ({
      computeEnvironmentOrder: [
        {
          computeEnvironment: `${getId({
            type: "ComputeEnvironment",
            group: "Batch",
            name: "compute-environment",
          })}`,
          order: 1,
        },
      ],
      jobQueueName: "my-job-queue",
      priority: 1,
    }),
    dependencies: ({}) => ({
      computeEnvironments: ["compute-environment"],
      schedulingPolicy: "my-scheduling-policy",
    }),
  },
  {
    type: "SchedulingPolicy",
    group: "Batch",
    properties: ({}) => ({
      fairsharePolicy: {
        computeReservation: 0,
        shareDecaySeconds: 0,
        shareDistribution: [],
      },
      name: "my-scheduling-policy",
    }),
  },
  { type: "Vpc", group: "EC2", name: "vpc-default", isDefault: true },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-a",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-b",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::vpc-default::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "role-execution-batch",
    dependencies: ({}) => ({
      roles: ["role-execution-batch"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "role-execution-batch",
      Description: "Allows ECS to call AWS services on your behalf.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  },
];
