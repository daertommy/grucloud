// Generated by 'gc gencode'
const { pipe, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/aws/eks/retail-store/cluster",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/retail-store/worker-fluentbit-logs",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "retail-store-carts",
      AttributeDefinitions: [
        {
          AttributeName: "customerId",
          AttributeType: "S",
        },
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
      GlobalSecondaryIndexes: [
        {
          IndexName: "idx_global_customerId",
          KeySchema: [
            {
              AttributeName: "customerId",
              KeyType: "HASH",
            },
          ],
          Projection: {
            ProjectionType: "ALL",
          },
          // ProvisionedThroughput: {
          //   ReadCapacityUnits: 0,
          //   WriteCapacityUnits: 0,
          // },
        },
      ],
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "retail-store",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  { type: "InternetGateway", group: "EC2", name: "retail-store" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "retail-store",
      internetGateway: "retail-store",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `retail-store-${config.region}a`,
    properties: ({}) => ({
      PrivateIpAddressIndex: 208,
    }),
    dependencies: ({ config }) => ({
      subnet: `retail-store::retail-store-public-${config.region}a`,
      eip: `retail-store-${config.region}a`,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 10,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-private-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 11,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-private-${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-public-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-public-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 1,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `retail-store-public-${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 2,
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "retail-store-private",
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "retail-store-public",
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-private",
      subnet: `retail-store::retail-store-private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-private",
      subnet: `retail-store::retail-store-private-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-private",
      subnet: `retail-store::retail-store-private-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-public",
      subnet: `retail-store::retail-store-public-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-public",
      subnet: `retail-store::retail-store-public-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "retail-store::retail-store-public",
      subnet: `retail-store::retail-store-public-${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      natGateway: `retail-store-${config.region}a`,
      routeTable: "retail-store::retail-store-private",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "retail-store",
      routeTable: "retail-store::retail-store-public",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::retail-store::eks-cluster-sg-retail-store-1247604631",
    readOnly: true,
    filterLives: ({ resources }) =>
      pipe([
        () => resources,
        find(
          pipe([
            get("live.Tags"),
            find(
              and([
                eq(get("Key"), "aws:eks:cluster-name"),
                eq(get("Value"), "retail-store"),
              ])
            ),
          ])
        ),
      ])(),
    dependencies: ({}) => ({
      vpc: "retail-store",
      eksCluster: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "k8s-elb-a7ac4842404cb4b3291897082281d9e0",
      Description:
        "Security group for Kubernetes ELB a7ac4842404cb4b3291897082281d9e0 (ui/ui-lb)",
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "owned",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-catalog",
      Description: "Security group for catalog component",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-catalog-2023022220301607090000000a",
      Description: "Control traffic to/from RDS Aurora retail-store-catalog",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-checkout",
      Description: "Security group for checkout component",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-checkout-20230222204109491300000021",
      Description: "Security group for Elasticache Redis",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-cluster-2023022220301607130000000b",
      Description: "EKS cluster security group",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-node-20230222203016070500000008",
      Description: "EKS node shared security group",
      Tags: [
        {
          Key: "kubernetes.io/cluster/retail-store",
          Value: "owned",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-orders",
      Description: "Security group for orders component",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-store-orders-20230222203016070700000009",
      Description: "Control traffic to/from RDS Aurora retail-store-orders",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "retail-storeordersmq-broker-20230222204109491300000020",
      Description: "Managed by Terraform",
    }),
    dependencies: ({}) => ({
      vpc: "retail-store",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::eks-cluster-sg-retail-store-1247604631",
      securityGroupFrom: [
        "sg::retail-store::eks-cluster-sg-retail-store-1247604631",
        "sg::retail-store::k8s-elb-a7ac4842404cb4b3291897082281d9e0",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::eks-cluster-sg-retail-store-1247604631",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::eks-cluster-sg-retail-store-1247604631",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 3,
      IpProtocol: "icmp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 4,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::k8s-elb-a7ac4842404cb4b3291897082281d9e0",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::k8s-elb-a7ac4842404cb4b3291897082281d9e0",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 3306,
      IpProtocol: "tcp",
      ToPort: 3306,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-catalog-2023022220301607090000000a",
      securityGroupFrom: [
        "sg::retail-store::retail-store-catalog",
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 8080,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
          Description: "Allow inbound HTTP API traffic",
        },
      ],
      ToPort: 8080,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::retail-store-catalog",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 6379,
      IpProtocol: "tcp",
      ToPort: 6379,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-checkout-20230222204109491300000021",
      securityGroupFrom: [
        "sg::retail-store::retail-store-checkout",
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 8080,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
          Description: "Allow inbound HTTP API traffic",
        },
      ],
      ToPort: 8080,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::retail-store-checkout",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 10250,
      IpProtocol: "tcp",
      ToPort: 10250,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 3306,
      IpProtocol: "tcp",
      ToPort: 3306,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-orders-20230222203016070700000009",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
        "sg::retail-store::retail-store-orders",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 8080,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
          Description: "Allow inbound HTTP API traffic",
        },
      ],
      ToPort: 8080,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::retail-store::retail-store-orders",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 0,
      IpProtocol: "tcp",
      ToPort: 65535,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-storeordersmq-broker-20230222204109491300000020",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
        "sg::retail-store::retail-store-orders",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 10250,
      IpProtocol: "tcp",
      ToPort: 10250,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 123,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress NTP/TCP to internet",
        },
      ],
      ToPort: 123,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress all HTTPS to internet",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 123,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress NTP/UDP to internet",
        },
      ],
      ToPort: 123,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      securityGroupFrom: [
        "sg::retail-store::retail-store-node-20230222203016070500000008",
      ],
    }),
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: ({ config }) => `retail-store-${config.region}a`,
  },
  {
    type: "Addon",
    group: "EKS",
    properties: ({}) => ({
      addonName: "vpc-cni",
      addonVersion: "v1.12.2-eksbuild.1",
      configurationValues: '{"env":{"ENABLE_POD_ENI":"true"}}',
    }),
    dependencies: ({}) => ({
      cluster: "retail-store",
    }),
  },
  {
    type: "Cluster",
    group: "EKS",
    properties: ({ getId }) => ({
      name: "retail-store",
      encryptionConfig: [
        {
          provider: {
            keyArn: `${getId({
              type: "Key",
              group: "KMS",
              name: "alias/retail-store",
            })}`,
          },
          resources: ["secrets"],
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `retail-store::retail-store-private-${config.region}a`,
        `retail-store::retail-store-private-${config.region}b`,
        `retail-store::retail-store-private-${config.region}c`,
      ],
      securityGroups: [
        "sg::retail-store::retail-store-cluster-2023022220301607130000000b",
      ],
      role: "retail-store-cluster-role",
      kmsKeys: ["alias/retail-store"],
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-nodegroup-1-20230222203900677800000015",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 1,
        maxSize: 3,
        minSize: 1,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      diskSize: 50,
      tags: {
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/retail-store": "owned",
        "kubernetes.io/cluster/retail-store": "owned",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "retail-store",
      subnets: [`retail-store::retail-store-private-${config.region}a`],
      instanceProfile: "retail-store-managed-nodegroup-1",
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-nodegroup-2-2023022220390089440000001a",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 1,
        maxSize: 3,
        minSize: 1,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      diskSize: 50,
      tags: {
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/retail-store": "owned",
        "kubernetes.io/cluster/retail-store": "owned",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "retail-store",
      subnets: [`retail-store::retail-store-private-${config.region}b`],
      instanceProfile: "retail-store-managed-nodegroup-2",
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-nodegroup-3-2023022220390106410000001c",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 1,
        maxSize: 3,
        minSize: 1,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      diskSize: 50,
      tags: {
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/retail-store": "owned",
        "kubernetes.io/cluster/retail-store": "owned",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "retail-store",
      subnets: [`retail-store::retail-store-private-${config.region}c`],
      instanceProfile: "retail-store-managed-nodegroup-3",
    }),
  },
  {
    type: "CacheParameterGroup",
    group: "ElastiCache",
    properties: ({}) => ({
      CacheParameterGroupName: "retail-store-checkout",
      CacheParameterGroupFamily: "redis4.0",
      Description: "Elasticache parameter group for retail-store-checkout",
    }),
  },
  {
    type: "CacheSubnetGroup",
    group: "ElastiCache",
    properties: ({}) => ({
      CacheSubnetGroupName: "retail-store-checkout",
      CacheSubnetGroupDescription:
        "Elasticache subnet group for retail-store-checkout",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `retail-store::retail-store-private-${config.region}a`,
        `retail-store::retail-store-private-${config.region}b`,
        `retail-store::retail-store-private-${config.region}c`,
      ],
    }),
  },
  {
    type: "ReplicationGroup",
    group: "ElastiCache",
    properties: ({}) => ({
      ReplicationGroupDescription: "retail-store-checkout",
      ReplicationGroupId: "retail-store-checkout",
      SnapshotWindow: "06:30-07:30",
      ClusterEnabled: false,
      CacheNodeType: "cache.t3.micro",
      CacheParameterGroupName: "retail-store-checkout",
      CacheSubnetGroupName: "retail-store-checkout",
      NumCacheClusters: 1,
    }),
    dependencies: ({}) => ({
      parameterGroup: "retail-store-checkout",
      securityGroups: [
        "sg::retail-store::retail-store-checkout-20230222204109491300000021",
      ],
      subnetGroup: "retail-store-checkout",
    }),
  },
  {
    type: "OpenIDConnectProvider",
    group: "IAM",
    dependencies: ({}) => ({
      cluster: "retail-store",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "retail-store-aws-for-fluent-bit-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account aws-for-fluent-bit-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `arn:aws:iam::${config.accountId()}:oidc-provider/oidc.eks.${
                config.region
              }.amazonaws.com/id/BA1C9C81813BFCABBD6FB9368FFAF1DC`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                "oidc.eks.us-east-1.amazonaws.com/id/BA1C9C81813BFCABBD6FB9368FFAF1DC:sub":
                  "system:serviceaccount:aws-for-fluent-bit:aws-for-fluent-bit-sa",
                "oidc.eks.us-east-1.amazonaws.com/id/BA1C9C81813BFCABBD6FB9368FFAF1DC:aud":
                  "sts.amazonaws.com",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["retail-store-fluentbit"],
      openIdConnectProvider: "oidp::eks-cluster::retail-store",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "retail-store-carts-dynamo",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Federated: `arn:aws:iam::${config.accountId()}:oidc-provider/oidc.eks.${
                config.region
              }.amazonaws.com/id/BA1C9C81813BFCABBD6FB9368FFAF1DC`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringEquals: {
                "oidc.eks.us-east-1.amazonaws.com/id/BA1C9C81813BFCABBD6FB9368FFAF1DC:sub":
                  "system:serviceaccount:carts:carts",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["retail-store-carts-dynamo"],
      openIdConnectProvider: "oidp::eks-cluster::retail-store",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "retail-store-cluster-role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSClusterAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "eks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEKSClusterPolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
        },
        {
          PolicyName: "AmazonEKSVPCResourceController",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "retail-store-managed-nodegroup-1",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "retail-store-managed-nodegroup-2",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "retail-store-managed-nodegroup-3",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "retail-store-carts-dynamo",
      PolicyDocument: {
        Statement: [
          {
            Action: "dynamodb:*",
            Effect: "Allow",
            Resource: [
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/retail-store-carts`,
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/retail-store-carts/index/*`,
            ],
            Sid: "AllAPIActionsOnCart",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Dynamo policy for carts application",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "retail-store-fluentbit",
      PolicyDocument: {
        Statement: [
          {
            Action: "logs:PutLogEvents",
            Effect: "Allow",
            Resource: `arn:aws:logs:${
              config.region
            }:${config.accountId()}:log-group:*:log-stream:*`,
            Sid: "PutLogEvents",
          },
          {
            Action: [
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: `arn:aws:logs:${
              config.region
            }:${config.accountId()}:log-group:*`,
            Sid: "CreateCWLogs",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM Policy for AWS for FluentBit",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "retail-store-managed-nodegroup-1",
    dependencies: ({}) => ({
      roles: ["retail-store-managed-nodegroup-1"],
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "retail-store-managed-nodegroup-2",
    dependencies: ({}) => ({
      roles: ["retail-store-managed-nodegroup-2"],
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "retail-store-managed-nodegroup-3",
    dependencies: ({}) => ({
      roles: ["retail-store-managed-nodegroup-3"],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "alias/retail-store",
    properties: ({ config }) => ({
      Description: "retail-store EKS cluster secret encryption key",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "Allow access for all principals in the account that are authorized",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:CreateGrant",
            ],
            Resource: "*",
            Condition: {
              StringEquals: {
                "kms:CallerAccount": `${config.accountId()}`,
                "kms:ViaService": `eks.${config.region}.amazonaws.com`,
              },
            },
          },
          {
            Sid: "Allow direct access to key metadata to the account",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: [
              "kms:RevokeGrant",
              "kms:List*",
              "kms:Get*",
              "kms:Describe*",
            ],
            Resource: "*",
          },
          {
            Sid: "Allow access for Key Administrators",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
          {
            Sid: "Allow use of the key",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:role/retail-store-cluster-role`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:Decrypt",
            ],
            Resource: "*",
          },
          {
            Sid: "Allow attachment of persistent resources",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:role/retail-store-cluster-role`,
            },
            Action: ["kms:RevokeGrant", "kms:ListGrants", "kms:CreateGrant"],
            Resource: "*",
            Condition: {
              Bool: {
                "kms:GrantIsForAWSResource": "true",
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Broker",
    group: "MQ",
    properties: ({}) => ({
      AuthenticationStrategy: "simple",
      AutoMinorVersionUpgrade: false,
      BrokerName: "retail-storeordersmq-broker",
      DeploymentMode: "SINGLE_INSTANCE",
      EncryptionOptions: {
        UseAwsOwnedKey: true,
      },
      EngineType: "RabbitMQ",
      EngineVersion: "3.10.10",
      HostInstanceType: "mq.t3.micro",
      Logs: {
        General: true,
      },
      MaintenanceWindowStartTime: {
        DayOfWeek: "SUNDAY",
        TimeOfDay: "03:00",
        TimeZone: "UTC",
      },
      PubliclyAccessible: false,
      StorageType: "ebs",
      Users: [],
    }),
    dependencies: ({ config }) => ({
      securityGroups: [
        "sg::retail-store::retail-storeordersmq-broker-20230222204109491300000020",
      ],
      subnets: [`retail-store::retail-store-private-${config.region}a`],
    }),
  },
  {
    type: "DBCluster",
    group: "RDS",
    properties: ({}) => ({
      BackupRetentionPeriod: 7,
      DatabaseName: "catalog",
      DBClusterIdentifier: "retail-store-catalog",
      DBClusterParameterGroup:
        "retail-store-catalog-20230222202804503500000004",
      Engine: "aurora-mysql",
      EngineVersion: "5.7.mysql_aurora.2.11.1",
      Port: 3306,
      MasterUsername: process.env.RETAIL_STORE_CATALOG_MASTER_USERNAME,
      PreferredBackupWindow: "02:00-03:00",
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00",
      IAMDatabaseAuthenticationEnabled: false,
      EngineMode: "provisioned",
      DeletionProtection: false,
      HttpEndpointEnabled: false,
      MasterUserPassword: process.env.RETAIL_STORE_CATALOG_MASTER_USER_PASSWORD,
    }),
    dependencies: ({}) => ({
      dbClusterParameterGroup:
        "retail-store-catalog-20230222202804503500000004",
      dbSubnetGroup: "retail-store-catalog",
      securityGroups: [
        "sg::retail-store::retail-store-catalog-2023022220301607090000000a",
      ],
    }),
  },
  {
    type: "DBCluster",
    group: "RDS",
    properties: ({}) => ({
      BackupRetentionPeriod: 7,
      DatabaseName: "orders",
      DBClusterIdentifier: "retail-store-orders",
      DBClusterParameterGroup: "retail-store-orders-20230222202804497300000001",
      Engine: "aurora-mysql",
      EngineVersion: "5.7.mysql_aurora.2.11.1",
      Port: 3306,
      MasterUsername: process.env.RETAIL_STORE_ORDERS_MASTER_USERNAME,
      PreferredBackupWindow: "02:00-03:00",
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00",
      IAMDatabaseAuthenticationEnabled: false,
      EngineMode: "provisioned",
      DeletionProtection: false,
      HttpEndpointEnabled: false,
      MasterUserPassword: process.env.RETAIL_STORE_ORDERS_MASTER_USER_PASSWORD,
    }),
    dependencies: ({}) => ({
      dbClusterParameterGroup: "retail-store-orders-20230222202804497300000001",
      dbSubnetGroup: "retail-store-orders",
      securityGroups: [
        "sg::retail-store::retail-store-orders-20230222203016070700000009",
      ],
    }),
  },
  {
    type: "DBClusterParameterGroup",
    group: "RDS",
    properties: ({}) => ({
      DBClusterParameterGroupName:
        "retail-store-catalog-20230222202804503500000004",
      DBParameterGroupFamily: "aurora-mysql5.7",
      Description: "Managed by Terraform",
      Parameters: [],
    }),
  },
  {
    type: "DBClusterParameterGroup",
    group: "RDS",
    properties: ({}) => ({
      DBClusterParameterGroupName:
        "retail-store-orders-20230222202804497300000001",
      DBParameterGroupFamily: "aurora-mysql5.7",
      Description: "Managed by Terraform",
      Parameters: [],
    }),
  },
  {
    type: "DBInstance",
    group: "RDS",
    properties: ({}) => ({
      DBInstanceIdentifier: "retail-store-catalog-one",
      DBInstanceClass: "db.t3.small",
      Engine: "aurora-mysql",
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00",
      EngineVersion: "5.7.mysql_aurora.2.11.1",
      PubliclyAccessible: false,
      StorageType: "aurora",
      DBClusterIdentifier: "retail-store-catalog",
      StorageEncrypted: true,
    }),
    dependencies: ({}) => ({
      dbSubnetGroup: "retail-store-catalog",
      securityGroups: [
        "sg::retail-store::retail-store-catalog-2023022220301607090000000a",
      ],
      dbCluster: "retail-store-catalog",
    }),
  },
  {
    type: "DBInstance",
    group: "RDS",
    properties: ({}) => ({
      DBInstanceIdentifier: "retail-store-orders-one",
      DBInstanceClass: "db.t3.small",
      Engine: "aurora-mysql",
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00",
      EngineVersion: "5.7.mysql_aurora.2.11.1",
      PubliclyAccessible: false,
      StorageType: "aurora",
      DBClusterIdentifier: "retail-store-orders",
      StorageEncrypted: true,
    }),
    dependencies: ({}) => ({
      dbSubnetGroup: "retail-store-orders",
      securityGroups: [
        "sg::retail-store::retail-store-orders-20230222203016070700000009",
      ],
      dbCluster: "retail-store-orders",
    }),
  },
  {
    type: "DBSubnetGroup",
    group: "RDS",
    properties: ({}) => ({
      DBSubnetGroupName: "retail-store-catalog",
      DBSubnetGroupDescription: "For Aurora cluster retail-store-catalog",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `retail-store::retail-store-private-${config.region}a`,
        `retail-store::retail-store-private-${config.region}b`,
        `retail-store::retail-store-private-${config.region}c`,
      ],
    }),
  },
  {
    type: "DBSubnetGroup",
    group: "RDS",
    properties: ({}) => ({
      DBSubnetGroupName: "retail-store-orders",
      DBSubnetGroupDescription: "For Aurora cluster retail-store-orders",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `retail-store::retail-store-private-${config.region}a`,
        `retail-store::retail-store-private-${config.region}b`,
        `retail-store::retail-store-private-${config.region}c`,
      ],
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    properties: ({}) => ({
      Name: "/mq/mq_application_password",
      Type: "SecureString",
      Value: "01kgCsH1Xak9TwnNkh4w2Lgt",
      Description: "AMQ password for the application user",
      DataType: "text",
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    properties: ({}) => ({
      Name: "/mq/mq_application_username",
      Type: "String",
      Value: "quiet-beetle",
      Description: "AMQ username for the application user",
      DataType: "text",
    }),
  },
];
