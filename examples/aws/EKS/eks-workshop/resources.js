// Generated by 'gc gencode'
const { pipe, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

exports.createResources = () => [
  {
    type: "Workspace",
    group: "Aps",
    properties: ({}) => ({
      alias: "eks-workshop",
    }),
  },
  {
    type: "Environment",
    group: "Cloud9",
    properties: ({}) => ({
      connectionType: "CONNECT_SSH",
      description: "",
      name: "eks-workshop",
      instanceType: "t3.medium",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      EventPattern: {
        "detail-type": ["EC2 Instance State-change Notification"],
        source: ["aws.ec2"],
      },
      Name: "NTHInstanceStateChangeRule-eks-workshop",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      EventPattern: {
        "detail-type": ["EC2 Instance Rebalance Recommendation"],
        source: ["aws.ec2"],
      },
      Name: "NTHRebalanceRule-eks-workshop",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      EventPattern: {
        "detail-type": ["AWS Health Event"],
        source: ["aws.health"],
      },
      Name: "NTHScheduledChangeRule-eks-workshop",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      EventPattern: {
        "detail-type": ["EC2 Spot Instance Interruption Warning"],
        source: ["aws.ec2"],
      },
      Name: "NTHSpotTermRule-eks-workshop",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "terraform-20230225035219204600000035",
    }),
    dependencies: ({}) => ({
      rule: "NTHInstanceStateChangeRule-eks-workshop",
      sqsQueue: "aws_node_termination_handler2023022503515098070000002b",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "terraform-20230225035218011600000032",
    }),
    dependencies: ({}) => ({
      rule: "NTHRebalanceRule-eks-workshop",
      sqsQueue: "aws_node_termination_handler2023022503515098070000002b",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "terraform-20230225035218658700000033",
    }),
    dependencies: ({}) => ({
      rule: "NTHScheduledChangeRule-eks-workshop",
      sqsQueue: "aws_node_termination_handler2023022503515098070000002b",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "terraform-20230225035218897800000034",
    }),
    dependencies: ({}) => ({
      rule: "NTHSpotTermRule-eks-workshop",
      sqsQueue: "aws_node_termination_handler2023022503515098070000002b",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/aws/eks/eks-workshop/cluster",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/eks-workshop/worker-fluentbit-logs-4jWKlf",
      retentionInDays: 90,
    }),
    dependencies: ({}) => ({
      kmsKey: "14587e27-94b3-454e-9a33-71c854d7a087",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "eks-workshop-carts",
      AttributeDefinitions: [
        {
          AttributeName: "customerId",
          AttributeType: "S",
        },
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
      GlobalSecondaryIndexes: [
        {
          IndexName: "idx_global_customerId",
          KeySchema: [
            {
              AttributeName: "customerId",
              KeyType: "HASH",
            },
          ],
          Projection: {
            ProjectionType: "ALL",
          },
          ProvisionedThroughput: {
            ReadCapacityUnits: 0,
            WriteCapacityUnits: 0,
          },
        },
      ],
      StreamSpecification: {
        StreamEnabled: true,
        StreamViewType: "NEW_AND_OLD_IMAGES",
      },
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "eks-workshop",
    properties: ({}) => ({
      CidrBlock: "10.42.0.0/16",
      DnsHostnames: true,
    }),
  },
  { type: "InternetGateway", group: "EC2", name: "eks-workshop" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "eks-workshop",
      internetGateway: "eks-workshop",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `eks-workshop-${config.region}a`,
    properties: ({}) => ({
      PrivateIpAddressIndex: 192,
    }),
    dependencies: ({ config }) => ({
      subnet: `eks-workshop::eks-workshop-public-${config.region}a`,
      eip: `eks-workshop-${config.region}a`,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 10,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 10,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 11,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 11,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-private-${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-public-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-public-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 1,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `eks-workshop-public-${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 2,
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "eks-workshop-private",
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "eks-workshop-public",
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-private",
      subnet: `eks-workshop::eks-workshop-private-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-public",
      subnet: `eks-workshop::eks-workshop-public-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-public",
      subnet: `eks-workshop::eks-workshop-public-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "eks-workshop::eks-workshop-public",
      subnet: `eks-workshop::eks-workshop-public-${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      natGateway: `eks-workshop-${config.region}a`,
      routeTable: "eks-workshop::eks-workshop-private",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "eks-workshop",
      routeTable: "eks-workshop::eks-workshop-public",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::eks-workshop::aws-cloud9-eks-workshop-3366c0da99f74f078c0500a5243a5c10-InstanceSecurityGroup-1BN9AXHL4TAHH",
    readOnly: true,
    properties: ({}) => ({
      GroupName:
        "aws-cloud9-eks-workshop-3366c0da99f74f078c0500a5243a5c10-InstanceSecurityGroup-1BN9AXHL4TAHH",
      Description:
        "Security group for AWS Cloud9 environment aws-cloud9-eks-workshop-3366c0da99f74f078c0500a5243a5c10",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::eks-workshop::eks-cluster-sg-eks-workshop-332659399",
    readOnly: true,
    filterLives: ({ resources }) =>
      pipe([
        () => resources,
        find(
          pipe([
            get("live.Tags"),
            find(
              and([
                eq(get("Key"), "aws:eks:cluster-name"),
                eq(get("Value"), "eks-workshop"),
              ])
            ),
          ])
        ),
      ])(),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
      eksCluster: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "eks-workshop-catalog",
      Description: "Applied to catalog application pods",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "eks-workshop-catalog-rds-20230225033707815000000004",
      Description: "Catalog RDS security group",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "eks-workshop-cluster-20230225033707815900000006",
      Description: "EKS cluster security group",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "eks-workshop-efs",
      Description: "efs security group allow access to port 2049",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "eks-workshop-node-20230225033707815800000005",
      Description: "EKS node shared security group",
      Tags: [
        {
          Key: "karpenter.sh/discovery",
          Value: "eks-workshop",
        },
        {
          Key: "kubernetes.io/cluster/eks-workshop",
          Value: "owned",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 22,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "35.172.155.192/27",
        },
        {
          CidrIp: "35.172.155.96/27",
        },
      ],
      ToPort: 22,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::aws-cloud9-eks-workshop-3366c0da99f74f078c0500a5243a5c10-InstanceSecurityGroup-1BN9AXHL4TAHH",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.42.0.0/16",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::eks-workshop::eks-cluster-sg-eks-workshop-332659399",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "10.42.0.0/16",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::eks-workshop::eks-cluster-sg-eks-workshop-332659399",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 3306,
      IpProtocol: "tcp",
      ToPort: 3306,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-catalog-rds-20230225033707815000000004",
      securityGroupFrom: ["sg::eks-workshop::eks-workshop-catalog"],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 8080,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.42.0.0/16",
          Description: "Allow inbound HTTP API traffic",
        },
      ],
      ToPort: 8080,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::eks-workshop::eks-workshop-catalog",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
      IpRanges: [
        {
          CidrIp: "10.42.0.0/16",
          Description: "Ingress from Cloud9 Host",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 2049,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.42.0.0/16",
          Description: "allow inbound NFS traffic",
        },
      ],
      ToPort: 2049,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::eks-workshop::eks-workshop-efs",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 10250,
      IpProtocol: "tcp",
      ToPort: 10250,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 4443,
      IpProtocol: "tcp",
      ToPort: 4443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 8443,
      IpProtocol: "tcp",
      ToPort: 8443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 9443,
      IpProtocol: "tcp",
      ToPort: 9443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 10250,
      IpProtocol: "tcp",
      ToPort: 10250,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 123,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress NTP/TCP to internet",
        },
      ],
      ToPort: 123,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress all HTTPS to internet",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 123,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Egress NTP/UDP to internet",
        },
      ],
      ToPort: 123,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      securityGroupFrom: [
        "sg::eks-workshop::eks-workshop-node-20230225033707815800000005",
      ],
    }),
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: ({ config }) => `eks-workshop-${config.region}a`,
  },
  {
    type: "VpcIpv4CidrBlockAssociation",
    group: "EC2",
    properties: ({}) => ({
      CidrBlock: "100.64.0.0/16",
    }),
    dependencies: ({}) => ({
      vpc: "eks-workshop",
    }),
  },
  {
    type: "FileSystem",
    group: "EFS",
    name: "eks-workshop-efs-assets",
    dependencies: ({}) => ({
      kmsKey: "57c22e89-0d6f-452e-9cdf-385c11ae6872",
    }),
  },
  {
    type: "MountTarget",
    group: "EFS",
    properties: ({ config }) => ({
      AvailabilityZoneName: `${config.region}a`,
    }),
    dependencies: ({ config }) => ({
      fileSystem: "eks-workshop-efs-assets",
      subnet: `eks-workshop::eks-workshop-private-${config.region}a`,
      securityGroups: ["sg::eks-workshop::eks-workshop-efs"],
    }),
  },
  {
    type: "MountTarget",
    group: "EFS",
    properties: ({ config }) => ({
      AvailabilityZoneName: `${config.region}b`,
    }),
    dependencies: ({ config }) => ({
      fileSystem: "eks-workshop-efs-assets",
      subnet: `eks-workshop::eks-workshop-private-${config.region}b`,
      securityGroups: ["sg::eks-workshop::eks-workshop-efs"],
    }),
  },
  {
    type: "MountTarget",
    group: "EFS",
    properties: ({ config }) => ({
      AvailabilityZoneName: `${config.region}c`,
    }),
    dependencies: ({ config }) => ({
      fileSystem: "eks-workshop-efs-assets",
      subnet: `eks-workshop::eks-workshop-private-${config.region}c`,
      securityGroups: ["sg::eks-workshop::eks-workshop-efs"],
    }),
  },
  {
    type: "Addon",
    group: "EKS",
    properties: ({}) => ({
      addonName: "adot",
      addonVersion: "v0.66.0-eksbuild.1",
      tags: {
        ClusterRoleVersion: "1397",
        RoleVersion: "1396",
      },
    }),
    dependencies: ({}) => ({
      cluster: "eks-workshop",
    }),
  },
  {
    type: "Addon",
    group: "EKS",
    properties: ({}) => ({
      addonName: "vpc-cni",
      addonVersion: "v1.12.5-eksbuild.1",
      configurationValues:
        '{"env":{"ENABLE_PREFIX_DELEGATION":"true", "ENABLE_POD_ENI":"true"}}',
    }),
    dependencies: ({}) => ({
      cluster: "eks-workshop",
    }),
  },
  {
    type: "Cluster",
    group: "EKS",
    properties: ({ getId }) => ({
      name: "eks-workshop",
      encryptionConfig: [
        {
          provider: {
            keyArn: `${getId({
              type: "Key",
              group: "KMS",
              name: "2d94f1a9-f8bb-4a3e-92a6-11f5a4a1f18a",
            })}`,
          },
          resources: ["secrets"],
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `eks-workshop::eks-workshop-private-${config.region}a`,
        `eks-workshop::eks-workshop-private-${config.region}b`,
        `eks-workshop::eks-workshop-private-${config.region}c`,
      ],
      securityGroups: [
        "sg::eks-workshop::eks-workshop-cluster-20230225033707815900000006",
      ],
      role: "eks-workshop-cluster-role",
      kmsKeys: ["2d94f1a9-f8bb-4a3e-92a6-11f5a4a1f18a"],
    }),
  },
  {
    type: "FargateProfile",
    group: "EKS",
    properties: ({}) => ({
      fargateProfileName: "checkout-profile",
      selectors: [
        {
          labels: {
            fargate: "yes",
          },
          namespace: "checkout",
        },
      ],
      tags: {
        "kubernetes.io/cluster/eks-workshop": "owned",
        "k8s.io/cluster/eks-workshop": "owned",
      },
    }),
    dependencies: ({ config }) => ({
      iamRole: "eks-workshop-checkout-profile",
      cluster: "eks-workshop",
      subnets: [
        `eks-workshop::eks-workshop-private-${config.region}a`,
        `eks-workshop::eks-workshop-private-${config.region}b`,
        `eks-workshop::eks-workshop-private-${config.region}c`,
      ],
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-ondemand-20230225035143174400000024",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 2,
        maxSize: 6,
        minSize: 2,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      labels: {
        blocker: "acaf0e72cf9fe0ad11bb06e0fc612de9cf50054d",
        "workshop-default": "yes",
      },
      diskSize: 50,
      tags: {
        "kubernetes.io/cluster/eks-workshop": "owned",
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
        "k8s.io/cluster-autoscaler/eks-workshop": "owned",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "eks-workshop",
      subnets: [
        `eks-workshop::eks-workshop-private-${config.region}a`,
        `eks-workshop::eks-workshop-private-${config.region}b`,
        `eks-workshop::eks-workshop-private-${config.region}c`,
      ],
      role: "eks-workshop-managed-ondemand",
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-ondemand-tainted-20230225035143458100000028",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 0,
        maxSize: 1,
        minSize: 0,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      labels: {
        blocker: "acaf0e72cf9fe0ad11bb06e0fc612de9cf50054d",
        tainted: "yes",
        "workshop-default": "no",
      },
      diskSize: 50,
      tags: {
        "kubernetes.io/cluster/eks-workshop": "owned",
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
        "k8s.io/cluster-autoscaler/eks-workshop": "owned",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "eks-workshop",
      subnets: [
        `eks-workshop::eks-workshop-private-${config.region}a`,
        `eks-workshop::eks-workshop-private-${config.region}b`,
        `eks-workshop::eks-workshop-private-${config.region}c`,
      ],
      role: "eks-workshop-managed-ondemand-tainted",
    }),
  },
  {
    type: "NodeGroup",
    group: "EKS",
    properties: ({}) => ({
      nodegroupName: "managed-system-20230225035143111900000022",
      capacityType: "ON_DEMAND",
      scalingConfig: {
        desiredSize: 1,
        maxSize: 2,
        minSize: 1,
      },
      instanceTypes: ["m5.large"],
      amiType: "AL2_x86_64",
      labels: {
        blocker: "acaf0e72cf9fe0ad11bb06e0fc612de9cf50054d",
        "workshop-system": "yes",
      },
      diskSize: 50,
      tags: {
        "kubernetes.io/cluster/eks-workshop": "owned",
        "managed-by": "terraform-aws-eks-blueprints",
        "k8s.io/cluster-autoscaler/enabled": "TRUE",
        "k8s.io/cluster-autoscaler/eks-workshop": "owned",
      },
    }),
    dependencies: ({ config }) => ({
      cluster: "eks-workshop",
      subnets: [`eks-workshop::eks-workshop-private-${config.region}a`],
      role: "eks-workshop-managed-system",
    }),
  },
  {
    type: "OpenIDConnectProvider",
    group: "IAM",
    dependencies: ({}) => ({
      cluster: "eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-ack-ec2-irsa",
      Description: "AWS IAM Role for the Kubernetes service account ack-ec2.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:ack-ec2:ack-ec2",
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2FullAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
        },
      ],
    }),
    dependencies: ({}) => ({
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-ack-rds-irsa",
      Description: "AWS IAM Role for the Kubernetes service account ack-rds.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:ack-rds:ack-rds",
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonRDSFullAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonRDSFullAccess",
        },
      ],
    }),
    dependencies: ({}) => ({
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-adot-collector",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringEquals: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:other:adot-collector",
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonPrometheusRemoteWriteAccess",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess",
        },
      ],
    }),
    dependencies: ({}) => ({
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-adot-collector-ci",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringEquals: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:other:adot-collector-ci",
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "CloudWatchAgentServerPolicy",
          PolicyArn: "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
        },
      ],
    }),
    dependencies: ({}) => ({
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-aws-for-fluent-bit-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account aws-for-fluent-bit-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:aws-for-fluent-bit:aws-for-fluent-bit-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-fluentbit"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-aws-load-balancer-controller-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account aws-load-balancer-controller-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:aws-load-balancer-controller:aws-load-balancer-controller-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-lb-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-aws-node-termination-handler-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account aws-node-termination-handler-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:kube-system:aws-node-termination-handler-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-aws-nth-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-aws-provider-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account aws-provider-*.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:crossplane-system:aws-provider-*",
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AdministratorAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AdministratorAccess",
        },
      ],
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-aws-provider-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-carts-dynamo",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringEquals: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:carts:carts",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-carts-dynamo"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-cert-manager-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account cert-manager.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:cert-manager:cert-manager",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-cert-manager-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-checkout-profile",
      Description: "EKS Fargate IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSFargateAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "eks-fargate-pods.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEKSFargatePodExecutionRolePolicy",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
        },
      ],
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-checkout-profile-cwlogs"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-cloud9",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AdministratorAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AdministratorAccess",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-policy-0"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-cloud9-bootstrap",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: [
        "eks-workshop-cloud9-bootstrap",
        "eks-workshop-cloud9-bootstrap-logs",
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-cluster-autoscaler-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account cluster-autoscaler-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:kube-system:cluster-autoscaler-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-cluster-autoscaler-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-cluster-role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSClusterAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "eks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEKSClusterPolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
        },
        {
          PolicyName: "AmazonEKSVPCResourceController",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-ebs-csi-controller-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account ebs-csi-controller-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]:
                  "system:serviceaccount:kube-system:ebs-csi-controller-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-aws-ebs-csi-driver-irsa"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-efs-csi-sa-irsa",
      Description:
        "AWS IAM Role for the Kubernetes service account efs-csi-sa.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:kube-system:efs-csi-sa",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-efs-csi-policy"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "eks-workshop-karpenter-irsa",
      Description: "AWS IAM Role for the Kubernetes service account karpenter.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::eks-cluster::eks-workshop",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              StringLike: {
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:aud`]: "sts.amazonaws.com",
                [`${getId({
                  type: "OpenIDConnectProvider",
                  group: "IAM",
                  name: "oidp::eks-cluster::eks-workshop",
                  path: "live.Url",
                })}:sub`]: "system:serviceaccount:karpenter:karpenter",
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-karpenter"],
      openIdConnectProvider: "oidp::eks-cluster::eks-workshop",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-managed-ondemand",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-managed-ondemand-tainted",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "eks-workshop-managed-system",
      Description: "EKS Managed Node group IAM Role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "EKSWorkerAssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2ContainerRegistryReadOnly",
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
        },
        {
          PolicyName: "AmazonEKS_CNI_Policy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
        },
        {
          PolicyName: "AmazonEKSWorkerNodePolicy",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "eks-workshop-shell-role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-shell-role"],
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-aws-ebs-csi-driver-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ec2:ModifyVolume",
              "ec2:DetachVolume",
              "ec2:DescribeVolumesModifications",
              "ec2:DescribeVolumes",
              "ec2:DescribeTags",
              "ec2:DescribeSnapshots",
              "ec2:DescribeInstances",
              "ec2:DescribeAvailabilityZones",
              "ec2:CreateSnapshot",
              "ec2:AttachVolume",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:CreateTags",
            Condition: {
              StringEquals: {
                "ec2:CreateAction": ["CreateVolume", "CreateSnapshot"],
              },
            },
            Effect: "Allow",
            Resource: [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
            ],
            Sid: "",
          },
          {
            Action: "ec2:DeleteTags",
            Effect: "Allow",
            Resource: [
              "arn:aws:ec2:*:*:volume/*",
              "arn:aws:ec2:*:*:snapshot/*",
            ],
            Sid: "",
          },
          {
            Action: "ec2:CreateVolume",
            Condition: {
              StringLike: {
                "aws:RequestTag/ebs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:CreateVolume",
            Condition: {
              StringLike: {
                "aws:RequestTag/CSIVolumeName": "*",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:CreateVolume",
            Condition: {
              StringLike: {
                "aws:RequestTag/kubernetes.io/cluster/*": "owned",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:DeleteVolume",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:DeleteVolume",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/CSIVolumeName": "*",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:DeleteVolume",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/kubernetes.io/cluster/*": "owned",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:DeleteSnapshot",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/CSIVolumeSnapshotName": "*",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:DeleteSnapshot",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/ebs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM Policy for AWS EBS CSI Driver",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-aws-nth-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "sqs:ReceiveMessage",
              "sqs:DeleteMessage",
              "ec2:DescribeInstances",
              "autoscaling:DescribeTags",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:CompleteLifecycleAction",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM role policy for AWS Node Termination Handler",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-aws-provider-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "s3:Put*",
              "s3:ListBucket",
              "s3:Get*",
              "s3:DeleteObjectVersion",
              "s3:DeleteObject",
              "s3:DeleteBucket",
              "s3:CreateBucket",
            ],
            Effect: "Allow",
            Resource: "arn:aws:s3:::*",
            Sid: "VisualEditor0",
          },
          {
            Action: "s3:ListAllMyBuckets",
            Effect: "Allow",
            Resource: "*",
            Sid: "VisualEditor1",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Crossplane AWS Provider IAM policy",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-carts-dynamo",
      PolicyDocument: {
        Statement: [
          {
            Action: "dynamodb:*",
            Effect: "Allow",
            Resource: [
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/eks-workshop-carts`,
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/eks-workshop-carts/index/*`,
            ],
            Sid: "AllAPIActionsOnCart",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Dynamo policy for carts application",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-cert-manager-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: "route53:GetChange",
            Effect: "Allow",
            Resource: "arn:aws:route53:::change/*",
            Sid: "",
          },
          {
            Action: "route53:ListHostedZonesByName",
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "cert-manager IAM policy.",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-checkout-profile-cwlogs",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Allow fargate profiles to write logs to CloudWatch",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-cloud9-bootstrap",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ec2:DescribeInstances",
              "ec2:DescribeIamInstanceProfileAssociations",
              "ec2:DescribeVolumes",
              "ec2:AssociateIamInstanceProfile",
              "ec2:ModifyVolume",
              "ec2:ReplaceIamInstanceProfileAssociation",
              "iam:ListInstanceProfiles",
              "iam:PassRole",
              "ssm:DescribeInstanceInformation",
              "ssm:SendCommand",
              "ssm:GetCommandInvocation",
            ],
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-cloud9-bootstrap-logs",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:PutLogEvents",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/lambda/eks-workshop-cloud9-bootstrap:*:*`,
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/lambda/eks-workshop-cloud9-bootstrap:*`,
            ],
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-cluster-autoscaler-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ec2:DescribeLaunchTemplateVersions",
              "ec2:DescribeInstanceTypes",
              "autoscaling:DescribeTags",
              "autoscaling:DescribeLaunchConfigurations",
              "autoscaling:DescribeAutoScalingInstances",
              "autoscaling:DescribeAutoScalingGroups",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "eks:DescribeNodegroup",
              "ec2:DescribeInstanceTypes",
              "autoscaling:TerminateInstanceInAutoScalingGroup",
              "autoscaling:SetDesiredCapacity",
            ],
            Condition: {
              StringEquals: {
                "autoscaling:ResourceTag/k8s.io/cluster-autoscaler/eks-workshop":
                  "owned",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Cluster Autoscaler IAM policy",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-efs-csi-policy",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "elasticfilesystem:DescribeMountTargets",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeAccessPoints",
              "ec2:DescribeAvailabilityZones",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "elasticfilesystem:CreateAccessPoint",
            Condition: {
              StringLike: {
                "aws:RequestTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "elasticfilesystem:DeleteAccessPoint",
            Condition: {
              StringLike: {
                "aws:ResourceTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM Policy for AWS EFS CSI Driver",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-fluentbit",
      PolicyDocument: {
        Statement: [
          {
            Action: "logs:PutLogEvents",
            Effect: "Allow",
            Resource: `arn:aws:logs:${
              config.region
            }:${config.accountId()}:log-group:*:log-stream:*`,
            Sid: "PutLogEvents",
          },
          {
            Action: [
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: `arn:aws:logs:${
              config.region
            }:${config.accountId()}:log-group:*`,
            Sid: "CreateCWLogs",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM Policy for AWS for FluentBit",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-gitops",
      PolicyDocument: {
        Statement: [
          {
            Action: ["codecommit:GitPush", "codecommit:GitPull"],
            Effect: "Allow",
            Resource: `arn:aws:codecommit:${
              config.region
            }:${config.accountId()}:eks-workshop-gitops`,
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-grafana-other",
      PolicyDocument: {
        Statement: [
          {
            Action: ["aps:*"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-karpenter",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ssm:GetParameter",
              "pricing:GetProducts",
              "iam:PassRole",
              "ec2:RunInstances",
              "ec2:DescribeSubnets",
              "ec2:DescribeSpotPriceHistory",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeLaunchTemplates",
              "ec2:DescribeInstances",
              "ec2:DescribeInstanceTypes",
              "ec2:DescribeInstanceTypeOfferings",
              "ec2:DescribeImages",
              "ec2:DescribeAvailabilityZones",
              "ec2:DeleteLaunchTemplate",
              "ec2:CreateTags",
              "ec2:CreateLaunchTemplate",
              "ec2:CreateFleet",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "Karpenter",
          },
          {
            Action: "ec2:TerminateInstances",
            Condition: {
              StringLike: {
                "ec2:ResourceTag/Name": "*karpenter*",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "ConditionalEC2Termination",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "IAM Policy for Karpenter",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "eks-workshop-lb-irsa",
      PolicyDocument: {
        Statement: [
          {
            Action: "iam:CreateServiceLinkedRole",
            Condition: {
              StringEquals: {
                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTags",
              "elasticloadbalancing:DescribeSSLPolicies",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeListenerCertificates",
              "ec2:GetCoipPoolUsage",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcPeeringConnections",
              "ec2:DescribeTags",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeInstances",
              "ec2:DescribeCoipPools",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeAddresses",
              "ec2:DescribeAccountAttributes",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "wafv2:GetWebACLForResource",
              "wafv2:GetWebACL",
              "wafv2:DisassociateWebACL",
              "wafv2:AssociateWebACL",
              "waf-regional:GetWebACLForResource",
              "waf-regional:GetWebACL",
              "waf-regional:DisassociateWebACL",
              "waf-regional:AssociateWebACL",
              "shield:GetSubscriptionState",
              "shield:DescribeProtection",
              "shield:DeleteProtection",
              "shield:CreateProtection",
              "iam:ListServerCertificates",
              "iam:GetServerCertificate",
              "cognito-idp:DescribeUserPoolClient",
              "acm:ListCertificates",
              "acm:DescribeCertificate",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "ec2:RevokeSecurityGroupIngress",
              "ec2:AuthorizeSecurityGroupIngress",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:CreateSecurityGroup",
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: "ec2:CreateTags",
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false",
              },
              StringEquals: {
                "ec2:CreateAction": "CreateSecurityGroup",
              },
            },
            Effect: "Allow",
            Resource: "arn:aws:ec2:*:*:security-group/*",
            Sid: "",
          },
          {
            Action: ["ec2:DeleteTags", "ec2:CreateTags"],
            Condition: {
              Null: {
                "aws:ResourceTag/ingress.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: "arn:aws:ec2:*:*:security-group/*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:RemoveTags",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:AddTags",
            ],
            Condition: {
              Null: {
                "aws:ResourceTag/ingress.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
            ],
            Sid: "",
          },
          {
            Action: ["ec2:DeleteTags", "ec2:CreateTags"],
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: "arn:aws:ec2:*:*:security-group/*",
            Sid: "",
          },
          {
            Action: [
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
              "ec2:AuthorizeSecurityGroupIngress",
            ],
            Condition: {
              Null: {
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:CreateTargetGroup",
              "elasticloadbalancing:CreateLoadBalancer",
            ],
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:DeleteRule",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:CreateRule",
              "elasticloadbalancing:CreateListener",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:RemoveTags",
              "elasticloadbalancing:AddTags",
            ],
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
            ],
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:RemoveTags",
              "elasticloadbalancing:AddTags",
            ],
            Effect: "Allow",
            Resource: [
              "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
              "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*",
            ],
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:SetSubnets",
              "elasticloadbalancing:SetSecurityGroups",
              "elasticloadbalancing:SetIpAddressType",
              "elasticloadbalancing:ModifyTargetGroupAttributes",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:DeleteTargetGroup",
              "elasticloadbalancing:DeleteLoadBalancer",
            ],
            Condition: {
              Null: {
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeregisterTargets",
            ],
            Effect: "Allow",
            Resource: "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
            Sid: "",
          },
          {
            Action: [
              "elasticloadbalancing:SetWebAcl",
              "elasticloadbalancing:RemoveListenerCertificates",
              "elasticloadbalancing:ModifyRule",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:AddListenerCertificates",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description: "Allows lb controller to manage ALB and NLB",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-policy-0",
      PolicyDocument: {
        Statement: [
          {
            Action: ["eks:ListClusters", "eks:CreateNodegroup"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["eks:DescribeCluster", "eks:ListNodegroups"],
            Effect: "Allow",
            Resource: `arn:aws:eks:${
              config.region
            }:${config.accountId()}:cluster/eks-workshop`,
          },
          {
            Action: [
              "eks:UpdateNodegroupConfig",
              "eks:DescribeNodegroup",
              "eks:DeleteNodegroup",
              "eks:UpdateNodegroupVersion",
            ],
            Effect: "Allow",
            Resource: `arn:aws:eks:${
              config.region
            }:${config.accountId()}:nodegroup/eks-workshop/*`,
          },
          {
            Action: ["autoscaling:UpdateAutoScalingGroup"],
            Condition: {
              StringEquals: {
                "autoscaling:ResourceTag/eks:cluster-name": "eks-workshop",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["autoscaling:DescribeAutoScalingGroups"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["eks:DescribeFargateProfile"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSecurityGroupRules",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["elasticfilesystem:CreateAccessPoint"],
            Condition: {
              StringLike: {
                "aws:RequestTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: "elasticfilesystem:DeleteAccessPoint",
            Condition: {
              StringEquals: {
                "aws:ResourceTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "aps:QueryMetrics",
              "iam:CreateRole",
              "iam:GetRole",
              "iam:PutRolePolicy",
              "ecr-public:GetAuthorizationToken",
              "sts:GetServiceBearerToken",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "iam:DeleteRolePolicy",
              "iam:DeleteRole",
              "rds:DescribeDBInstances",
              "mq:ListBrokers",
              "mq:DescribeBroker",
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy",
              "iam:PassRole",
              "iam:ListOpenIDConnectProviders",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["elasticloadbalancing:Describe*"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["iam:ListAttachedRolePolicies", "iam:GetPolicyVersion"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["ssm:DescribeParameters"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["ssm:GetParameter"],
            Effect: "Allow",
            Resource: `arn:aws:ssm:${
              config.region
            }:${config.accountId()}:parameter/eks-workshop-gitops-ssh`,
          },
          {
            Action: ["ssm:GetParameter"],
            Effect: "Allow",
            Resource: `arn:aws:ssm:${config.region}::parameter/aws/service/eks/optimized-ami/*`,
          },
          {
            Action: ["rds:DescribeDBInstances"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "eks-workshop-shell-role",
      PolicyDocument: {
        Statement: [
          {
            Action: ["eks:ListClusters", "eks:CreateNodegroup"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["eks:DescribeCluster", "eks:ListNodegroups"],
            Effect: "Allow",
            Resource: `arn:aws:eks:${
              config.region
            }:${config.accountId()}:cluster/eks-workshop`,
          },
          {
            Action: [
              "eks:UpdateNodegroupConfig",
              "eks:DescribeNodegroup",
              "eks:DeleteNodegroup",
              "eks:UpdateNodegroupVersion",
            ],
            Effect: "Allow",
            Resource: `arn:aws:eks:${
              config.region
            }:${config.accountId()}:nodegroup/eks-workshop/*`,
          },
          {
            Action: ["autoscaling:UpdateAutoScalingGroup"],
            Condition: {
              StringEquals: {
                "autoscaling:ResourceTag/eks:cluster-name": "eks-workshop",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["autoscaling:DescribeAutoScalingGroups"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["eks:DescribeFargateProfile"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "cloudformation:ListStacks",
              "cloudformation:DescribeStacks",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "ec2:DescribeInstances",
              "ec2:DescribeVolumes",
              "ec2:DescribeAvailabilityZones",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeSecurityGroupRules",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "elasticfilesystem:DescribeAccessPoints",
              "elasticfilesystem:DescribeFileSystems",
              "elasticfilesystem:DescribeMountTargets",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["elasticfilesystem:CreateAccessPoint"],
            Condition: {
              StringLike: {
                "aws:RequestTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: "elasticfilesystem:DeleteAccessPoint",
            Condition: {
              StringEquals: {
                "aws:ResourceTag/efs.csi.aws.com/cluster": "true",
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "aps:QueryMetrics",
              "iam:CreateRole",
              "iam:GetRole",
              "iam:PutRolePolicy",
              "ecr-public:GetAuthorizationToken",
              "sts:GetServiceBearerToken",
              "ec2:DescribeSubnets",
              "ec2:DescribeVpcs",
              "iam:DeleteRolePolicy",
              "iam:DeleteRole",
              "rds:DescribeDBInstances",
              "mq:ListBrokers",
              "mq:DescribeBroker",
              "iam:AttachRolePolicy",
              "iam:DetachRolePolicy",
              "iam:PassRole",
              "iam:ListOpenIDConnectProviders",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["elasticloadbalancing:Describe*"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["iam:ListAttachedRolePolicies", "iam:GetPolicyVersion"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["ssm:DescribeParameters"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["ssm:GetParameter"],
            Effect: "Allow",
            Resource: `arn:aws:ssm:${
              config.region
            }:${config.accountId()}:parameter/eks-workshop-gitops-ssh`,
          },
          {
            Action: ["ssm:GetParameter"],
            Effect: "Allow",
            Resource: `arn:aws:ssm:${config.region}::parameter/aws/service/eks/optimized-ami/*`,
          },
          {
            Action: ["rds:DescribeDBInstances"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description:
        "Policy for EKS Workshop local environment to access AWS services",
    }),
  },
  {
    type: "User",
    group: "IAM",
    properties: ({}) => ({
      UserName: "eks-workshop-gitops",
    }),
    dependencies: ({}) => ({
      policies: ["eks-workshop-gitops"],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "14587e27-94b3-454e-9a33-71c854d7a087",
    properties: ({ config }) => ({
      Description: "EKS Workers FluentBit CloudWatch Log group KMS Key",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "Enable IAM User Permissions",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
          {
            Sid: "Enable Encryption for LogGroup",
            Effect: "Allow",
            Principal: {
              Service: `logs.${config.region}.amazonaws.com`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt*",
              "kms:Describe*",
              "kms:Decrypt*",
            ],
            Resource: "*",
            Condition: {
              ArnEquals: {
                "kms:EncryptionContext:aws:logs:arn":
                  "arn:aws:logs:us-east-1:840541460064:log-group:/eks-workshop/worker-fluentbit-logs-4jWKlf",
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "2d94f1a9-f8bb-4a3e-92a6-11f5a4a1f18a",
    properties: ({ config }) => ({
      Description: "eks-workshop EKS cluster secret encryption key",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "Allow access for all principals in the account that are authorized",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:Decrypt",
              "kms:CreateGrant",
            ],
            Resource: "*",
            Condition: {
              StringEquals: {
                "kms:CallerAccount": `${config.accountId()}`,
                "kms:ViaService": `eks.${config.region}.amazonaws.com`,
              },
            },
          },
          {
            Sid: "Allow direct access to key metadata to the account",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: [
              "kms:RevokeGrant",
              "kms:List*",
              "kms:Get*",
              "kms:Describe*",
            ],
            Resource: "*",
          },
          {
            Sid: "Allow access for Key Administrators",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
          {
            Sid: "Allow use of the key",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:role/eks-workshop-cluster-role`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:Decrypt",
            ],
            Resource: "*",
          },
          {
            Sid: "Allow attachment of persistent resources",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:role/eks-workshop-cluster-role`,
            },
            Action: ["kms:RevokeGrant", "kms:ListGrants", "kms:CreateGrant"],
            Resource: "*",
            Condition: {
              Bool: {
                "kms:GrantIsForAWSResource": "true",
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "57c22e89-0d6f-452e-9cdf-385c11ae6872",
    properties: ({ config }) => ({
      Description: "KMS CMK for various resources like EFS, DynamoDB",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "Enable IAM User Permissions",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
          {
            Sid: "Allow DynamoDB to get information about the CMK",
            Effect: "Allow",
            Principal: {
              Service: "dynamodb.amazonaws.com",
            },
            Action: ["kms:List*", "kms:Get*", "kms:Describe*"],
            Resource: "*",
          },
          {
            Sid: "Allow principals to encrypt.",
            Effect: "Allow",
            Principal: {
              AWS: "*",
            },
            Action: [
              "kms:ReEncrypt",
              "kms:GenerateDataKey*",
              "kms:Encrypt",
              "kms:DescribeKey",
              "kms:Decrypt",
            ],
            Resource: "*",
            Condition: {
              StringLike: {
                "kms:CallerAccount": `${config.accountId()}`,
                "kms:ViaService": [
                  "dynamodb.*.amazonaws.com",
                  "elasticfilesystem.*.amazonaws.com",
                ],
              },
            },
          },
          {
            Sid: "Allow principals to decrypt.",
            Effect: "Allow",
            Principal: {
              AWS: "*",
            },
            Action: ["kms:DescribeKey", "kms:Decrypt"],
            Resource: "*",
            Condition: {
              StringLike: {
                "kms:CallerAccount": `${config.accountId()}`,
                "kms:ViaService": [
                  "dynamodb.*.amazonaws.com",
                  "elasticfilesystem.*.amazonaws.com",
                ],
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "eks-workshop-cloud9-bootstrap",
        Handler: "bootstrap.lambda_handler",
        Runtime: "python3.9",
        Timeout: 900,
      },
    }),
    dependencies: ({}) => ({
      role: "eks-workshop-cloud9-bootstrap",
    }),
  },
  {
    type: "DBInstance",
    group: "RDS",
    properties: ({}) => ({
      DBInstanceIdentifier: "eks-workshop-catalog",
      DBInstanceClass: "db.t4g.micro",
      Engine: "mysql",
      MasterUsername: process.env.EKS_WORKSHOP_CATALOG_MASTER_USERNAME,
      DBName: "catalog",
      AllocatedStorage: 20,
      PreferredBackupWindow: "03:00-06:00",
      BackupRetentionPeriod: 0,
      PreferredMaintenanceWindow: "mon:00:00-mon:03:00",
      EngineVersion: "8.0.27",
      PubliclyAccessible: false,
      StorageEncrypted: true,
      DeletionProtection: false,
      DBClusterParameterGroup: "default.mysql8.0",
      MasterUserPassword: process.env.EKS_WORKSHOP_CATALOG_MASTER_USER_PASSWORD,
    }),
    dependencies: ({}) => ({
      dbSubnetGroup: "eks-workshop-catalog-20230225033722157900000007",
      securityGroups: [
        "sg::eks-workshop::eks-workshop-catalog-rds-20230225033707815000000004",
      ],
    }),
  },
  {
    type: "DBSubnetGroup",
    group: "RDS",
    properties: ({}) => ({
      DBSubnetGroupName: "eks-workshop-catalog-20230225033722157900000007",
      DBSubnetGroupDescription: "eks-workshop-catalog subnet group",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `eks-workshop::eks-workshop-private-${config.region}a`,
        `eks-workshop::eks-workshop-private-${config.region}b`,
        `eks-workshop::eks-workshop-private-${config.region}c`,
      ],
    }),
  },
  {
    type: "Queue",
    group: "SQS",
    properties: ({ config }) => ({
      Attributes: {
        MessageRetentionPeriod: "300",
        Policy: {
          Version: "2012-10-17",
          Statement: [
            {
              Sid: "",
              Effect: "Allow",
              Principal: {
                Service: ["events.amazonaws.com", "sqs.amazonaws.com"],
              },
              Action: "sqs:SendMessage",
              Resource: `arn:aws:sqs:${
                config.region
              }:${config.accountId()}:aws_node_termination_handler2023022503515098070000002b`,
            },
          ],
        },
      },
      QueueName: "aws_node_termination_handler2023022503515098070000002b",
    }),
  },
  {
    type: "Document",
    group: "SSM",
    properties: ({}) => ({
      Content: {
        schemaVersion: "2.2",
        description: "Bootstrap Cloud9 Instance",
        mainSteps: [
          {
            action: "aws:runShellScript",
            name: "Cloud9Bootstrap",
            inputs: {
              runCommand: [
                `set -e

export CLOUD9_ENVIRONMENT_ID="3366c0da99f74f078c0500a5243a5c10"

echo "Running base bootstrap..."
echo "IyEvYmluL2Jhc2gKCnNldCAtZQoKU1RSPSQoY2F0IC9ldGMvb3MtcmVsZWFzZSkKU1VCPSJWRVJTSU9OX0lEPVwiMlwiIgoKbWFya2VyX2ZpbGU9Ii9yb290L3Jlc2l6ZWQubWFyayIKCmlmIFtbICEgLWYgIiRtYXJrZXJfZmlsZSIgXV07IHRoZW4KICBpZiBbICQocmVhZGxpbmsgLWYgL2Rldi94dmRhKSA9ICIvZGV2L3h2ZGEiIF0KICB0aGVuCiAgICBzdWRvIGdyb3dwYXJ0IC9kZXYveHZkYSAxCiAgICBpZiBbWyAiJFNUUiIgPT0gKiIkU1VCIiogXV0KICAgIHRoZW4KICAgICAgc3VkbyB4ZnNfZ3Jvd2ZzIC1kIC8KICAgIGVsc2UKICAgICAgc3VkbyByZXNpemUyZnMgL2Rldi94dmRhMQogICAgZmkKICBlbHNlCiAgICBzdWRvIGdyb3dwYXJ0IC9kZXYvbnZtZTBuMSAxCiAgICBpZiBbWyAiJFNUUiIgPT0gKiIkU1VCIiogXV0KICAgIHRoZW4KICAgICAgc3VkbyB4ZnNfZ3Jvd2ZzIC1kIC8KICAgIGVsc2UKICAgICAgc3VkbyByZXNpemUyZnMgL2Rldi9udm1lMG4xcDEKICAgIGZpCiAgZmkKZmkKCnRvdWNoICRtYXJrZXJfZmlsZQoKc3VkbyB5dW0gaW5zdGFsbCAteSBnaXQK" | base64 -d | bash

echo "Running extension bootstrap..."
echo "c2V0IC1lCgpybSAtcmYgL3RtcC93b3Jrc2hvcC1yZXBvc2l0b3J5CmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vYXdzLXNhbXBsZXMvZWtzLXdvcmtzaG9wLXYyIC90bXAvd29ya3Nob3AtcmVwb3NpdG9yeQooY2QgL3RtcC93b3Jrc2hvcC1yZXBvc2l0b3J5ICYmIGdpdCBjaGVja291dCBtYWluKQoKKGNkIC90bXAvd29ya3Nob3AtcmVwb3NpdG9yeS9lbnZpcm9ubWVudCAmJiBiYXNoIC4vaW5zdGFsbGVyLnNoKQoKYmFzaCAtYyAiYXdzIGNsb3VkOSB1cGRhdGUtZW52aXJvbm1lbnQgLS1lbnZpcm9ubWVudC1pZCAkQ0xPVUQ5X0VOVklST05NRU5UX0lEIC0tbWFuYWdlZC1jcmVkZW50aWFscy1hY3Rpb24gRElTQUJMRSB8fCB0cnVlIgoKbWtkaXIgLXAgL3dvcmtzcGFjZQpjcCAtUiAvdG1wL3dvcmtzaG9wLXJlcG9zaXRvcnkvZW52aXJvbm1lbnQvd29ya3NwYWNlLyogL3dvcmtzcGFjZQpjcCAtUiAvd29ya3NwYWNlIC93b3Jrc3BhY2UtYmFja3VwCmNob3duIGVjMi11c2VyIC1SIC93b3Jrc3BhY2UKY2htb2QgK3ggL3RtcC93b3Jrc2hvcC1yZXBvc2l0b3J5L2Vudmlyb25tZW50L2Jpbi8qCmNwIC90bXAvd29ya3Nob3AtcmVwb3NpdG9yeS9lbnZpcm9ubWVudC9iaW4vKiAvdXNyL2xvY2FsL2JpbgoKcm0gLXJmIC90bXAvd29ya3Nob3AtcmVwb3NpdG9yeQoKc3VkbyAtSCAtdSBlYzItdXNlciBiYXNoIC1jICJsbiAtc2YgL3dvcmtzcGFjZSB+L2Vudmlyb25tZW50L3dvcmtzcGFjZSIKCmlmIFtbICEgLWQgIi9ob21lL2VjMi11c2VyLy5iYXNocmMuZCIgXV07IHRoZW4KICBzdWRvIC1IIC11IGVjMi11c2VyIGJhc2ggLWMgIm1rZGlyIC1wIH4vLmJhc2hyYy5kIgogIHN1ZG8gLUggLXUgZWMyLXVzZXIgYmFzaCAtYyAidG91Y2ggfi8uYmFzaHJjLmQvZHVtbXkuYmFzaCIKCiAgc3VkbyAtSCAtdSBlYzItdXNlciBiYXNoIC1jICJlY2hvICdmb3IgZmlsZSBpbiB+Ly5iYXNocmMuZC8qLmJhc2g7IGRvIHNvdXJjZSBcIlwkZmlsZVwiOyBkb25lJyA+PiB+Ly5iYXNocmMiCmZpCgpzdWRvIC1IIC11IGVjMi11c2VyIGJhc2ggLWMgImVjaG8gJ2F3cyBjbG91ZDkgdXBkYXRlLWVudmlyb25tZW50IC0tZW52aXJvbm1lbnQtaWQgJENMT1VEOV9FTlZJUk9OTUVOVF9JRCAtLW1hbmFnZWQtY3JlZGVudGlhbHMtYWN0aW9uIERJU0FCTEUgJj4gL2Rldi9udWxsIHx8IHRydWUnID4gfi8uYmFzaHJjLmQvYzkuYmFzaCIKCnN1ZG8gLUggLXUgZWMyLXVzZXIgYmFzaCAtYyAiZWNobyAnZXhwb3J0IEFXU19QQUdFUj1cIlwiJyA+IH4vLmJhc2hyYy5kL2F3cy5iYXNoIgoKc3VkbyAtSCAtdSBlYzItdXNlciBiYXNoIC1jICJlY2hvICdhd3MgZWtzIHVwZGF0ZS1rdWJlY29uZmlnIC0tbmFtZSBla3Mtd29ya3Nob3AgPiAvZGV2L251bGwnID4gfi8uYmFzaHJjLmQva3ViZWNvbmZpZy5iYXNoIgoKY2F0IDw8IEVPVCA+IC9ob21lL2VjMi11c2VyLy5iYXNocmMuZC9lbnYuYmFzaApzZXQgLWEKQVdTX0FDQ09VTlRfSUQ9ODQwNTQxNDYwMDY0CkFXU19ERUZBVUxUX1JFR0lPTj11cy1lYXN0LTEKRUtTX0NMVVNURVJfTkFNRT1la3Mtd29ya3Nob3AKRUtTX0RFRkFVTFRfTU5HX05BTUU9bWFuYWdlZC1vbmRlbWFuZC0yMDIzMDIyNTAzNTE0MzE3NDQwMDAwMDAyNApFS1NfREVGQVVMVF9NTkdfTUlOPTIKRUtTX0RFRkFVTFRfTU5HX01BWD02CkVLU19ERUZBVUxUX01OR19ERVNJUkVEPTIKQ0FSVFNfRFlOQU1PREJfVEFCTEVOQU1FPWVrcy13b3Jrc2hvcC1jYXJ0cwpDQVJUU19JQU1fUk9MRT1hcm46YXdzOmlhbTo6ODQwNTQxNDYwMDY0OnJvbGUvZWtzLXdvcmtzaG9wLWNhcnRzLWR5bmFtbwpDQVRBTE9HX1JEU19FTkRQT0lOVD1la3Mtd29ya3Nob3AtY2F0YWxvZy5jOG10eGF1eTVuZ3AudXMtZWFzdC0xLnJkcy5hbWF6b25hd3MuY29tOjMzMDYKQ0FUQUxPR19SRFNfVVNFUk5BTUU9Y2F0YWxvZ191c2VyCkNBVEFMT0dfUkRTX1BBU1NXT1JEPWFXNXRaRTg0YVc5R2F3PT0KQ0FUQUxPR19SRFNfREFUQUJBU0VfTkFNRT1jYXRhbG9nCkNBVEFMT0dfUkRTX1NHX0lEPXNnLTBlYzkzNWY4Zjc3ZWU4YTUzCkNBVEFMT0dfU0dfSUQ9c2ctMDJhZDEwYTQzZmQ0NGM0NzQKRUZTX0lEPWZzLTBiNDE2MDI2MDcwODU4NzhkCkVLU19UQUlOVEVEX01OR19OQU1FPW1hbmFnZWQtb25kZW1hbmQtdGFpbnRlZC0yMDIzMDIyNTAzNTE0MzQ1ODEwMDAwMDAyOApBTVBfRU5EUE9JTlQ9aHR0cHM6Ly9hcHMtd29ya3NwYWNlcy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS93b3Jrc3BhY2VzL3dzLTk3MTkwNzk2LThmOGQtNGIyZC1iNGU2LTI5ODY4YjYyYTRmYS8KQURPVF9JQU1fUk9MRT1hcm46YXdzOmlhbTo6ODQwNTQxNDYwMDY0OnJvbGUvZWtzLXdvcmtzaG9wLWFkb3QtY29sbGVjdG9yClZQQ19JRD12cGMtMDVjMzY2OTQzMTY4YTBiNzYKRUtTX0NMVVNURVJfU0VDVVJJVFlfR1JPVVBfSUQ9c2ctMGIzZGU5YWE2NDkyZGFmNTgKUFJJTUFSWV9TVUJORVRfMT1zdWJuZXQtMDZlNTY0NjA1Y2UxYTY3NjEKUFJJTUFSWV9TVUJORVRfMj1zdWJuZXQtMDFlNDdhZDE4Nzg3NmI4YWIKUFJJTUFSWV9TVUJORVRfMz1zdWJuZXQtMDk3YWEwMWY3YzlhOWYyYjUKU0VDT05EQVJZX1NVQk5FVF8xPXN1Ym5ldC0wZmRhYjlhOGFlMjEwYzE0ZApTRUNPTkRBUllfU1VCTkVUXzI9c3VibmV0LTAyYWE2YmUzZTFlY2Y4NWY3ClNFQ09OREFSWV9TVUJORVRfMz1zdWJuZXQtMGRhOTVhNzI5MTlhODVhZWQKTUFOQUdFRF9OT0RFX0dST1VQX0lBTV9ST0xFX0FSTj1hcm46YXdzOmlhbTo6ODQwNTQxNDYwMDY0OnJvbGUvZWtzLXdvcmtzaG9wLW1hbmFnZWQtb25kZW1hbmQKQVoxPXVzLWVhc3QtMWEKQVoyPXVzLWVhc3QtMWIKQVozPXVzLWVhc3QtMWMKQURPVF9JQU1fUk9MRV9DST1hcm46YXdzOmlhbTo6ODQwNTQxNDYwMDY0OnJvbGUvZWtzLXdvcmtzaG9wLWFkb3QtY29sbGVjdG9yLWNpCk9JRENfUFJPVklERVI9b2lkYy5la3MudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20vaWQvM0RGNDMyRjA5N0EyQUU2Nzc3NDgxQzQwMkVCQTZBODQKVlBDX0lEPXZwYy0wNWMzNjY5NDMxNjhhMGI3NgpWUENfQ0lEUj0xMC40Mi4wLjAvMTYKVlBDX1BSSVZBVEVfU1VCTkVUX0lEXzA9c3VibmV0LTA2ZTU2NDYwNWNlMWE2NzYxClZQQ19QUklWQVRFX1NVQk5FVF9JRF8xPXN1Ym5ldC0wMWU0N2FkMTg3ODc2YjhhYgpWUENfUFJJVkFURV9TVUJORVRfSURfMj1zdWJuZXQtMDk3YWEwMWY3YzlhOWYyYjUKR0lUT1BTX0lBTV9TU0hfS0VZX0lEPUFQS0E0SE5CTTJaUUxRQlJJQ1BXCkdJVE9QU19JQU1fU1NIX1VTRVI9QUlEQTRITkJNMlpRTkhFNU4yVkY1CkdJVE9QU19TU0hfU1NNX05BTUU9ZWtzLXdvcmtzaG9wLWdpdG9wcy1zc2gKCnNldCArYQpFT1QKCmNob3duIGVjMi11c2VyIC9ob21lL2VjMi11c2VyLy5iYXNocmMuZC9lbnYuYmFzaAoKc3VkbyBybSAtZiAvaG9tZS9lYzItdXNlci8uc3NoL2dpdG9wc19zc2gucGVtCgpzdWRvIC1IIC11IGVjMi11c2VyIGJhc2ggLWMgImF3cyBzc20gZ2V0LXBhcmFtZXRlciAtLW5hbWUgZWtzLXdvcmtzaG9wLWdpdG9wcy1zc2ggLS13aXRoLWRlY3J5cHRpb24gLS1xdWVyeSAnUGFyYW1ldGVyLlZhbHVlJyAtLXJlZ2lvbiB1cy1lYXN0LTEgLS1vdXRwdXQgdGV4dCA+IH4vLnNzaC9naXRvcHNfc3NoLnBlbSIKY2htb2QgNDAwIC9ob21lL2VjMi11c2VyLy5zc2gvZ2l0b3BzX3NzaC5wZW0KCmNhdCA8PCBFT1QgPiAvaG9tZS9lYzItdXNlci8uc3NoL2NvbmZpZwpIb3N0IGdpdC1jb2RlY29tbWl0LiouYW1hem9uYXdzLmNvbQogIFVzZXIgQUlEQTRITkJNMlpRTkhFNU4yVkY1CiAgSWRlbnRpdHlGaWxlIH4vLnNzaC9naXRvcHNfc3NoLnBlbQpFT1QKY2hvd24gZWMyLXVzZXIgL2hvbWUvZWMyLXVzZXIvLnNzaC9jb25maWcKY2htb2QgNjAwIC9ob21lL2VjMi11c2VyLy5zc2gvY29uZmlnCgpzdWRvIC1IIC11IGVjMi11c2VyIGJhc2ggLWMgInNzaC1rZXlzY2FuIC1IIGdpdC1jb2RlY29tbWl0LnVzLWVhc3QtMS5hbWF6b25hd3MuY29tID4+IH4vLnNzaC9rbm93bl9ob3N0cyIKCnN1ZG8gLUggLXUgZWMyLXVzZXIgYmFzaCAtYyAnZ2l0IGNvbmZpZyAtLWdsb2JhbCB1c2VyLmVtYWlsICJ5b3VAZWtzd29ya3Nob3AuY29tIicKc3VkbyAtSCAtdSBlYzItdXNlciBiYXNoIC1jICdnaXQgY29uZmlnIC0tZ2xvYmFsIHVzZXIubmFtZSAiRUtTIFdvcmtzaG9wIExlYXJuZXIiJwo=" | base64 -d | bash
`,
              ],
            },
          },
        ],
      },
      DocumentType: "Command",
      Name: "eks-workshop-cloud9-bootstrap",
      PlatformTypes: ["Linux", "MacOS"],
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    properties: ({}) => ({
      Name: "eks-workshop-gitops-ssh",
      Type: "SecureString",
      Value: `-----BEGIN RSA PRIVATE KEY-----
MIIJKQIBAAKCAgEAuwFwxwdtldvzUNY3E8K0Qr6V57XdnnSfrruEfe7HA988Cp/v
XPagabL3w1ahSZwlRZ9e4dYHecMXBRpRfYLKFDw1QfUPJulsI38KjzSsYEwQ/sc6
UzsvmnS6+bInPf5I7uEdVTuHIfPDU6gsNhrdGaiu6IHqCy8DvTvGgTI3AKAwcxfd
kJXYUkFNhNd2pqjqtK5F07GrVMv1tLUu9oJevNijK4hVWn2DULQMBMYjgEho3G04
h8GkQWxXQ/CMhMUCmCLgCleDAgN5jmQ/2h42Zopqcw8mkWky4donbcM9Qu0U/8zN
GWv4q6EYYRkZ6V5+C6XYzbzxmka/lxjc8TRkw7Ltfzxg0rqCBf3VNh3O31RaxxYU
UMmA9YlUSk9KlMZJufMl3R006HeMHvDxEGQloSXmyB3doIZqg4DqTUWTEL5rU9o5
uKdGja3BU5GVVsMugftnZ5Y4klDnezuiMST7DOPKhOE66LPHEV+hkFYOJvv+yncO
giAYSvV7Kcy7U/1g2J0kJJUEtvZptjeC/tUOe5Yo85Eo8mRvv7oBwhyNa8WUpy9z
cI+7rSH1Om5YUv198Qyz+IuY+zcUc7kBL8uW4OlKgR0JhL42v/hI2co8e8kGK+2v
JB/9llWBDu39t54d5mjFQAISFKr+dlMkQF/UJH2F20kECI8UvwXcRFoCChcCAwEA
AQKCAgEAmL0cd/NBNl1n5maQpbspsDoqBg8s6/clVXojRRh5xFfYmnT29F8btjlO
1GU1ZwH6D1uUC7Dcej811h0g4fqpQs3KUgzuS0Hr6TIiVcUX5a87Ul027jQxNV6S
OM+h7ah7uWB0rODqBnkq2HFLawWWARcdhRpXJrtHuo/QGkYBVql/6QFdHnLFNKnR
vuadKpJc4SZWMgmzfpb4IJi7uuvQpT3sR+oajMZnMstb5apP5L8/poou2fL3TdhH
jl4y515iOBCEHO5NOp/L8NlArc5vcGEtgLynK61Yuc+M1MHaj4dE14lXG6RsfwIc
/3GZEFr1aF4VLjVcwD14ztin3PqGMUqWnS20YVZtHNUfG/CGS6lpC+1Rsf97G93s
PMRnOULo4lAfhFRq6iyU45sYR6ki4WYrjF+rKpsZCNY0NLZWJ76c4SqUh8rD5ZEW
0wAaJqBfmIam7hFh6cCHivLTtIEA6AC1mOO2S037r6pvww8gf6t6+qpPsHAGl0NJ
maEVyKgxwdnwgPF8yDFubfziO1FEZLtFYH0iLk82tOXBZZIwrlCvzfueYkPSCWP/
KQc2uW8yJtQEP/8FC1T57PYScd5WUmXokJreXpYIQ48ANi4oVcxhQ8j/TuoGYFom
rcEt2fY+bm0EvM5z5Z7c6fUhJuja5EZaHFgOzdt5/kWtpYXVaQECggEBAO2sHJ9J
lTEo4eRmGuQZKv3Yh16D5+DmNqzarcw0/uRMpWUdAvFBlyMPvGKs1bXv2NvIklVJ
TOlyS1LxQThyptNn0mny5ZnXgyvcwnzqeGsD8NZIAwlOBrrm84I07LhVzThKYwSE
/nEgZpgYBc0sVzcl9QwoFNBueGD/s2ws3A8T9Us8fhahQw1TwG7VNl1ZbY4UA9K+
ocju569rYZavNjmiUwTeN6iGdpJdzgpaq52Y7ak83dEE/j32VfV2PUcl51YCVmA9
cGQV1YD+2kHO1p4gAJHDtVUfPA8blAQaFkW9KRQLAJXcILz1bksEDqQw1Zlwnb2C
tuexkqGD9mAxUKcCggEBAMltHi74VKHhaKa169KWYzBqzttZUXMLVGp/OQg2FGZI
WgfikhIDeGVwj8eP21Q1p80sn0B9Uj58xdKyolNlrJVACNgz6ZdYPH1lN3rpqOu+
tO1D3t4HObxBmCo5iuCgAJIlN9E8hQqQ8kwJHPZdvhykT6JT/dJnVFmiPCHP9jzp
79oGIUzGk8o3XTlawdTy+DmK1kAa6H6N8pKcccyoc3ID276hK2zK3NmLznWrFbo1
ylAXPjgCeQqxN9GzseRSIjAFN+u/Xr9VLAJshcIONHfiJrf/XenLvyo9zfo/U0ZH
Y45BhxGu82tTZ9NtJ59kpsTeyHU4+oYtmb3a/JRVuRECggEBALNDaMdAAdZ1ZoQV
+1xmG0YhxmCkjwXTvhN8UTBAHKznnqx4SFrdxPg+CzJF+F9ky6ViT/Uh92/wtB2Y
OEAyQeAcY9ljyofRxG8V8F+1niPhcgq9gATJpEvenHZuIsoadVJq0Op8wUlkTd2T
6PRK6HGBIKYNqT1YxVUsKBGEeGqq/A3GT7gT4/YuYGt4R6v7IqXSNNwEyxQ6Fef6
zz2PZA/ufj2iukpTOSXGuPyYTO7uhPtsHEZmRLlJjqY4i5mZXjZCRxIJ5TaoPUQx
dT/DmZ7ktmk7Ow88ItmmTGsXngr11QD4F3Xw9YRwfcL5CW4QI1u7VE63Q+vXxKgs
V21QZOsCggEAT2ZuIYHOisl6IU1RGoAhtXJE/H5m9vyeWCSybKQ0wmT+6GDNx8AK
c6I9ayMwCC/mZ6CRXjCIfQ1eRcIY7tsDfwnw8pj0Ga60mZGOnysAZX2VgHnino8m
mSkaPHrWXdl0oCd/q0E6CII+oO5utkcZq9yxb4HAanJE89hZ79I0dKqa28zSz5rv
oyTT4Mn/4lussbIi5r40q750wopc6Zn1eBpBQxHxNj95c2ADEKtSM0cE6zFeW2HO
KQLWyBkXpLMjut4zvwB+7tk6MfJpf6dt01wYeyt077ZbMuGOEnln8Cov+mGmRrg6
SDJmmRdMKS7Z9n0DdAHz73SGSCrMqgRooQKCAQBXabw6S95fgBJ9Uw2CAt/Vyo/Z
HZCAHQNUvB7tdotyfPex5po48k1vMikA8iVmfIt7dNMh13toayGXZ26PJH+q3eRP
1y7IIkRFFtbPoi2qxaduPgwDlwgMRBrjaHJv81PBPIjmueyV6G1idODMe+DzGCG+
wgJ5UKixfejmyHWqnOcug94AAz3pnoNxI/f934vFdKLvlbPDgSbp+ORf55zPnBQ8
czH7UehH4Edd9HkxRujW/RUVUJHAvgGmcSRm8sxHGmZiUL0EV2XtKEbOKOjS56iG
UcE3q7OmWZj/eEFmXrQnzLYpW0+7+o7Ju/+j+LWk9U1B4qL1rq07dqNBl1AC
-----END RSA PRIVATE KEY-----
`,
      DataType: "text",
    }),
  },
];
