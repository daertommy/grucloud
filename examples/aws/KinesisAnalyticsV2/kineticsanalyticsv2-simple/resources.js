// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/aws/kinesis-analytics/my-app",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: `kinesis-analytics-service-my-app-${config.region}`,
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "ReadCode",
            Effect: "Allow",
            Action: ["s3:GetObject", "s3:GetObjectVersion"],
            Resource: [
              "arn:aws:s3:::kinesis-analytics-placeholder-s3-bucket/kinesis-analytics-placeholder-s3-object",
            ],
          },
          {
            Sid: "ListCloudwatchLogGroups",
            Effect: "Allow",
            Action: ["logs:DescribeLogGroups"],
            Resource: [
              `arn:aws:logs:${config.region}:${config.accountId()}:log-group:*`,
            ],
          },
          {
            Sid: "ListCloudwatchLogStreams",
            Effect: "Allow",
            Action: ["logs:DescribeLogStreams"],
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/kinesis-analytics/my-app:log-stream:*`,
            ],
          },
          {
            Sid: "PutCloudwatchLogs",
            Effect: "Allow",
            Action: ["logs:PutLogEvents"],
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/kinesis-analytics/my-app:log-stream:kinesis-analytics-log-stream`,
            ],
          },
        ],
      },
      Path: "/service-role/",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: `kinesis-analytics-my-app-${config.region}`,
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "kinesisanalytics.amazonaws.com",
            },
            Action: "sts:AssumeRole",
            Condition: {
              StringEquals: {
                "aws:SourceAccount": `${config.accountId()}`,
              },
              ArnEquals: {
                "aws:SourceArn": `arn:aws:kinesisanalytics:${
                  config.region
                }:${config.accountId()}:application/my-app`,
              },
            },
          },
        ],
      },
    }),
    dependencies: ({ config }) => ({
      policies: [`kinesis-analytics-service-my-app-${config.region}`],
    }),
  },
  {
    type: "Application",
    group: "KinesisAnalyticsV2",
    properties: ({}) => ({
      ApplicationConfigurationDescription: {
        ApplicationSnapshotConfigurationDescription: {
          SnapshotsEnabled: false,
        },
        FlinkApplicationConfigurationDescription: {
          CheckpointConfigurationDescription: {
            CheckpointInterval: 60000,
            CheckpointingEnabled: true,
            ConfigurationType: "DEFAULT",
            MinPauseBetweenCheckpoints: 5000,
          },
          MonitoringConfigurationDescription: {
            ConfigurationType: "CUSTOM",
            LogLevel: "INFO",
            MetricsLevel: "APPLICATION",
          },
          ParallelismConfigurationDescription: {
            AutoScalingEnabled: true,
            ConfigurationType: "CUSTOM",
            CurrentParallelism: 1,
            Parallelism: 1,
            ParallelismPerKPU: 1,
          },
        },
      },
      ApplicationMaintenanceConfigurationDescription: {
        ApplicationMaintenanceWindowEndTime: "11:00",
        ApplicationMaintenanceWindowStartTime: "03:00",
      },
      ApplicationMode: "STREAMING",
      ApplicationName: "my-app",
      RuntimeEnvironment: "FLINK-1_15",
    }),
    dependencies: ({ config }) => ({
      iamRoleServiceExecution: `kinesis-analytics-my-app-${config.region}`,
    }),
  },
];
