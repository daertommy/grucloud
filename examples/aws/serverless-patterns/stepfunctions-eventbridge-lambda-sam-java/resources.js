// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  { type: "EventBus", group: "CloudWatchEvents", name: "OrdersEventBus" },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    name: "ProcessOrderEventRule",
    properties: ({}) => ({
      EventPattern: {
        source: ["com.example.orders"],
      },
      State: "ENABLED",
    }),
    dependencies: () => ({
      eventBus: "OrdersEventBus",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "ProcessOrder",
    }),
    dependencies: () => ({
      rule: "ProcessOrderEventRule",
      lambdaFunction: "ProcessOrder",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "orders-stack-OrderStateRole-EFIDJNLYJV1O",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
      Tags: [
        {
          Key: "lambda:createdBy",
          Value: "SAM",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "orders-stack-ProcessOrderRole-1BEJ04O3QWUVT",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
      Tags: [
        {
          Key: "lambda:createdBy",
          Value: "SAM",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "orders-stack-StateMachineRole-1RWAR7ZEDPVDJ",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `states.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "cloudwatch:*",
                  "logs:*",
                  "lambda:InvokeFunction",
                  "events:PutEvents",
                ],
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "StateMachineRolePolicy0",
        },
      ],
      Tags: [
        {
          Key: "stateMachine:createdBy",
          Value: "SAM",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "OrderState",
        Handler: "com.example.OrderState::handleRequest",
        MemorySize: 512,
        Runtime: "java11",
        Timeout: 25,
      },
      Tags: {
        "lambda:createdBy": "SAM",
      },
    }),
    dependencies: () => ({
      role: "orders-stack-OrderStateRole-EFIDJNLYJV1O",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "ProcessOrder",
        Handler: "com.example.ProcessOrder::handleRequest",
        MemorySize: 512,
        Runtime: "java11",
        Timeout: 25,
      },
      Tags: {
        "lambda:createdBy": "SAM",
      },
    }),
    dependencies: () => ({
      role: "orders-stack-ProcessOrderRole-1BEJ04O3QWUVT",
    }),
  },
  {
    type: "StateMachine",
    group: "StepFunctions",
    name: "ProcessOrders",
    properties: ({ config }) => ({
      definition: {
        Comment: "A description of my state machine",
        StartAt: "Lambda Invoke",
        States: {
          "Lambda Invoke": {
            Type: "Task",
            Resource: `arn:aws:states:::lambda:invoke`,
            OutputPath: "$.Payload",
            Parameters: {
              "Payload.$": "$",
              FunctionName: `arn:aws:lambda:${
                config.region
              }:${config.accountId()}:function:OrderState`,
            },
            Retry: [
              {
                ErrorEquals: [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                ],
                IntervalSeconds: 2,
                MaxAttempts: 6,
                BackoffRate: 2,
              },
            ],
            Next: "EventBridge PutEvents",
          },
          "EventBridge PutEvents": {
            Type: "Task",
            Resource: `arn:aws:states:::aws-sdk:eventbridge:putEvents`,
            Parameters: {
              Entries: [
                {
                  Detail: {
                    "data.$": "$.data",
                  },
                  DetailType: "OrderCreated",
                  EventBusName: "OrdersEventBus",
                  Source: "com.example.orders",
                },
              ],
            },
            End: true,
          },
        },
      },
      tags: [
        {
          key: "stateMachine:createdBy",
          value: "SAM",
        },
      ],
    }),
    dependencies: () => ({
      role: "orders-stack-StateMachineRole-1RWAR7ZEDPVDJ",
      lambdaFunctions: ["OrderState"],
    }),
  },
];
