// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "GraphqlApi",
    group: "AppSync",
    properties: ({}) => ({
      name: "AppSyncEventBridgeAPI",
      authenticationType: "API_KEY",
      xrayEnabled: true,
      logConfig: {
        excludeVerboseContent: false,
        fieldLogLevel: "ALL",
      },
      apiKeys: [{}],
      schemaFile: "AppSyncEventBridgeAPI.graphql",
    }),
    dependencies: ({}) => ({
      cloudWatchLogsRole:
        "AppsyncEventbridgeStack-ApiApiLogsRole90293F72-7E0RPUK5AGTI",
    }),
  },
  {
    type: "DataSource",
    group: "AppSync",
    properties: ({ config }) => ({
      name: "events",
      type: "HTTP",
      httpConfig: {
        authorizationConfig: {
          authorizationType: "AWS_IAM",
          awsIamConfig: {
            signingRegion: `${config.region}`,
            signingServiceName: "events",
          },
        },
        endpoint: `https://events.${config.region}.amazonaws.com/`,
      },
    }),
    dependencies: ({}) => ({
      graphqlApi: "AppSyncEventBridgeAPI",
      serviceRole:
        "AppsyncEventbridgeStack-ApieventsServiceRole531FB6-1OV5AQSZ4CWBK",
    }),
  },
  {
    type: "Resolver",
    group: "AppSync",
    properties: ({}) => ({
      typeName: "Mutation",
      fieldName: "putEvent",
      requestMappingTemplate:
        '{\n  "version": "2018-05-29",\n  "method": "POST",\n  "resourcePath": "/",\n  "params": {\n    "headers": {\n      "content-type": "application/x-amz-json-1.1",\n      "x-amz-target":"AWSEvents.PutEvents"\n    },\n    "body": {\n      "Entries":[\n        {\n          "Source":"appsync",\n          "EventBusName": "AppSyncEventBus",\n          "Detail":"{ \\"event\\": \\"$ctx.arguments.event\\"}",\n          "DetailType":"Event Bridge via GraphQL"\n         }\n      ]\n    }\n  }\n}\n',
      responseMappingTemplate:
        "## Raise a GraphQL field error in case of a datasource invocation error\n#if($ctx.error)\n  $util.error($ctx.error.message, $ctx.error.type)\n#end\n## if the response status code is not 200, then return an error. Else return the body **\n#if($ctx.result.statusCode == 200)\n    ## If response is 200, return the body.\n\t$ctx.result.body\n#else\n    ## If response is not 200, append the response to error block.\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n",
      kind: "UNIT",
    }),
    dependencies: ({}) => ({
      graphqlApi: "AppSyncEventBridgeAPI",
      dataSource: "events",
    }),
  },
  {
    type: "EventBus",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Name: "AppSyncEventBus",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "AppsyncEventbridgeStack-ApiApiLogsRole90293F72-7E0RPUK5AGTI",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `appsync.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSAppSyncPushToCloudWatchLogs",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName:
        "AppsyncEventbridgeStack-ApieventsServiceRole531FB6-1OV5AQSZ4CWBK",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `appsync.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "events:PutEvents",
                Resource: `${getId({
                  type: "EventBus",
                  group: "CloudWatchEvents",
                  name: "AppSyncEventBus",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "ApieventsServiceRoleDefaultPolicyE6AB81C4",
        },
      ],
    }),
    dependencies: ({}) => ({
      eventBus: "AppSyncEventBus",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "AppsyncEventbridgeStack-AppSyncEventBridgeRoleE2F3-1A2KOXUYDW21",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `appsync.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "events:PutEvents",
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "AppSyncEventBridgeRoleDefaultPolicyC796B118",
        },
      ],
    }),
  },
];
