// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Rule",
    group: "CloudWatchEvents",
    name: "refreshTAS3BucketPermissionsRule",
    properties: ({}) => ({
      ScheduleExpression: "rate(7 minutes)",
      State: "ENABLED",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    name: "S3BucketPrivatizerStack-s3PublicBucketRuleF36775A4-PIJ5KK05Q8JI",
    properties: ({}) => ({
      Description:
        "Blocks Public access on an S3 bucket once detected by Trusted Advisor",
      EventPattern: {
        "detail-type": ["Trusted Advisor Check Item Refresh Notification"],
        detail: {
          "check-name": ["Amazon S3 Bucket Permissions"],
          status: ["WARN", "ERROR"],
        },
        source: ["aws.trustedadvisor"],
      },
      State: "ENABLED",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "Target0",
    }),
    dependencies: () => ({
      rule: "refreshTAS3BucketPermissionsRule",
      lambdaFunction: "ta-refresh-ta-check-lambda-function",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "Target0",
    }),
    dependencies: () => ({
      rule: "S3BucketPrivatizerStack-s3PublicBucketRuleF36775A4-PIJ5KK05Q8JI",
      lambdaFunction: "ta-check-s3-open-lambda-function",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "S3BucketPrivatizerStack-LogRetentionaae0aa3c5b4d4f-R8CR4DPBIM1A",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "logs:PutRetentionPolicy",
                  "logs:DeleteRetentionPolicy",
                ],
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "S3BucketPrivatizerStack-refreshtacheckServiceRoleC-1XNQ14BNVWELC",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "support:DescribeTrustedAdvisorChecks",
                  "support:RefreshTrustedAdvisorCheck",
                  "support:DescribeTrustedAdvisorCheckResult",
                ],
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "refreshtacheckServiceRoleDefaultPolicy5054812C",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "S3BucketPrivatizerStack-tas3openbucketServiceRoleF-12CE7ALFI8O34",
    properties: ({ getId }) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "s3:GetBucketPolicy",
                  "s3:DeleteBucketPolicy",
                  "s3:PutBucketPolicy",
                  "s3:GetAccountPublicAccessBlock",
                  "s3:GetBucketPublicAccessBlock",
                  "s3:PutAccountPublicAccessBlock",
                  "s3:PutBucketPublicAccessBlock",
                  "s3:GetBucketAcl",
                  "s3:GetObjectAcl",
                  "s3:PutBucketAcl",
                  "s3:PutObjectAcl",
                ],
                Resource: `*`,
                Effect: "Allow",
              },
              {
                Action: "SNS:Publish",
                Resource: `${getId({
                  type: "Topic",
                  group: "SNS",
                  name: "taEmailNotificationTopic",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "tas3openbucketServiceRoleDefaultPolicyED3424C9",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
    dependencies: () => ({
      snsTopic: "taEmailNotificationTopic",
    }),
  },
  {
    type: "Layer",
    group: "Lambda",
    properties: ({}) => ({
      LayerName: "dependenciesLayerA5D47028",
      CompatibleRuntimes: ["python3.8"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName:
          "S3BucketPrivatizerStack-LogRetentionaae0aa3c5b4d4f-BCry9uKFvTNW",
        Handler: "index.handler",
        Runtime: "nodejs14.x",
      },
    }),
    dependencies: () => ({
      role: "S3BucketPrivatizerStack-LogRetentionaae0aa3c5b4d4f-R8CR4DPBIM1A",
    }),
  },
  {
    type: "Function",
    group: "Lambda",

    properties: ({ getId }) => ({
      Configuration: {
        FunctionName: "ta-check-s3-open-lambda-function",
        Description:
          "Function Triggered from Trusted Advisor to Block public access to an S3 Bucket",
        Environment: {
          Variables: {
            topic_arn: `${getId({
              type: "Topic",
              group: "SNS",
              name: "taEmailNotificationTopic",
            })}`,
          },
        },
        Handler: "s3openbucket.lambda_handler",
        Runtime: "python3.8",
        Timeout: 10,
      },
    }),
    dependencies: () => ({
      role: "S3BucketPrivatizerStack-tas3openbucketServiceRoleF-12CE7ALFI8O34",
      snsTopic: "taEmailNotificationTopic",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    name: "ta-refresh-ta-check-lambda-function",
    properties: ({}) => ({
      Configuration: {
        Description: "Refreshes Trusted Advisor checks",
        Handler: "refreshTrustedAdvisorCheck.lambda_handler",
        Runtime: "python3.8",
        Timeout: 5,
      },
    }),
    dependencies: () => ({
      layers: ["dependenciesLayerA5D47028"],
      role: "S3BucketPrivatizerStack-refreshtacheckServiceRoleC-1XNQ14BNVWELC",
    }),
  },
  {
    type: "Topic",
    group: "SNS",
    name: "taEmailNotificationTopic",
    properties: ({ config, getId }) => ({
      Attributes: {
        DisplayName: "taEmailNotificationTopic",
        DeliveryPolicy: {
          http: {
            defaultHealthyRetryPolicy: {
              minDelayTarget: 20,
              maxDelayTarget: 20,
              numRetries: 3,
              numMaxDelayRetries: 0,
              numNoDelayRetries: 0,
              numMinDelayRetries: 0,
              backoffFunction: "linear",
            },
            disableSubscriptionOverrides: false,
          },
        },
      },
    }),
  },
];
