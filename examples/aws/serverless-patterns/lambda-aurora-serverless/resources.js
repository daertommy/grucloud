// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/rds/cluster/aurora-test-cluster/error",
  },
  {
    type: "Role",
    group: "IAM",
    name: "sam-app-LambdaFunctionRole-11TTATG2VDRQ2",
    properties: ({ config }) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["secretsmanager:GetSecretValue"],
                Resource: `arn:aws:secretsmanager:${
                  config.region
                }:${config.accountId()}:secret:aurora-test-cluster-AuroraUserSecret-uVYAMe`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "LambdaFunctionRolePolicy0",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: "rds-data:ExecuteStatement",
                Resource: `arn:aws:rds:${
                  config.region
                }:${config.accountId()}:cluster:aurora-test-cluster`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "LambdaFunctionRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
      Tags: [
        {
          Key: "lambda:createdBy",
          Value: "SAM",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    name: "aurora-test-cluster-function",
    properties: ({ config, getId }) => ({
      Configuration: {
        Environment: {
          Variables: {
            SecretArn: `${getId({
              type: "Secret",
              group: "SecretsManager",
              name: "DBSecret",
            })}`,
            DBClusterArn: `arn:aws:rds:${
              config.region
            }:${config.accountId()}:cluster:aurora-test-cluster`,
            DBName: `aurora_test_db`,
          },
        },
        Handler: "app.handler",
        Runtime: "nodejs14.x",
        Timeout: 30,
      },
      Tags: {
        "lambda:createdBy": "SAM",
      },
    }),
    dependencies: () => ({
      role: "sam-app-LambdaFunctionRole-11TTATG2VDRQ2",
      secret: "DBSecret",
      dbCluster: "aurora-test-cluster",
    }),
  },
  {
    type: "DBCluster",
    group: "RDS",
    name: "aurora-test-cluster",
    properties: ({}) => ({
      BackupRetentionPeriod: 1,
      DatabaseName: "aurora_test_db",
      Engine: "aurora",
      EngineVersion: "5.6.10a",
      Port: 3306,
      MasterUsername: process.env.AURORA_TEST_CLUSTER_MASTER_USERNAME,
      PreferredBackupWindow: "08:17-08:47",
      PreferredMaintenanceWindow: "thu:06:25-thu:06:55",
      IAMDatabaseAuthenticationEnabled: false,
      EngineMode: "serverless",
      DeletionProtection: false,
      HttpEndpointEnabled: false,
      ScalingConfiguration: {
        MinCapacity: 1,
        MaxCapacity: 2,
        AutoPause: true,
        SecondsUntilAutoPause: 3600,
        TimeoutAction: "RollbackCapacityChange",
        SecondsBeforeTimeout: 300,
      },
      MasterUserPassword: process.env.AURORA_TEST_CLUSTER_MASTER_USER_PASSWORD,
    }),
    dependencies: () => ({
      secret: "DBSecret",
    }),
  },
  {
    type: "Secret",
    group: "SecretsManager",
    name: "DBSecret",
    properties: ({ generatePassword }) => ({
      SecretString: {
        password: generatePassword({ length: 30 }),
        username: "admin_user",
        port: 3306,
      },
      Description: "RDS database auto-generated user password",
    }),
  },
];
