// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    name: "MyHttpApi",
    properties: ({}) => ({
      Name: "MyHttpApi",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    name: "$default",
    properties: ({}) => ({
      AutoDeploy: true,
      StageName: "$default",
    }),
    dependencies: ({}) => ({
      api: "MyHttpApi",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ConnectionType: "INTERNET",
      IntegrationSubtype: "EventBridge-PutEvents",
      IntegrationType: "AWS_PROXY",
      PayloadFormatVersion: "1.0",
      RequestParameters: {
        DetailType: "MyDetailType",
        Source: "WebApp",
        Detail: "$request.body",
      },
      RequestTemplates: {},
      TimeoutInMillis: 10000,
    }),
    dependencies: ({}) => ({
      api: "MyHttpApi",
      eventBus: "MyEventBus",
      role: "ApiEventbridgeStack-EventBridgeIntegrationRoleB322-V1AK3L262GGK",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      RouteKey: "POST /",
    }),
    dependencies: ({}) => ({
      api: "MyHttpApi",
      integration: "integration::MyHttpApi::MyEventBus",
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
      AutoDeployed: true,
    }),
    dependencies: ({}) => ({
      api: "MyHttpApi",
      stage: "$default",
    }),
  },
  { type: "EventBus", group: "CloudWatchEvents", name: "MyEventBus" },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    name: "ApiEventbridgeStack-EventLoggerRuleC0DD3E40-J60T1BNGR6C6",
    properties: ({}) => ({
      Description: "Log all events",
      EventPattern: {
        region: ["ap-southeast-2"],
      },
      State: "ENABLED",
    }),
    dependencies: ({}) => ({
      eventBus: "MyEventBus",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/events/MyEventBus",
    properties: ({}) => ({
      retentionInDays: 731,
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-4YDZM1JYBBAN",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `lambda.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "logs:PutResourcePolicy",
                Resource: `*`,
                Effect: "Allow",
              },
              {
                Action: "logs:DeleteResourcePolicy",
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "EventsLogGroupPolicyApiEventbridgeStackEventLoggerRuleB02679CDCustomResourcePolicy2604DC42",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "ApiEventbridgeStack-EventBridgeIntegrationRoleB322-V1AK3L262GGK",
    properties: ({ getId }) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: `apigateway.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "events:PutEvents",
                Resource: `${getId({
                  type: "EventBus",
                  group: "CloudWatchEvents",
                  name: "MyEventBus",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "EventBridgeIntegrationRoleDefaultPolicy16371A00",
        },
      ],
    }),
    dependencies: ({}) => ({
      eventBus: "MyEventBus",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    name: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-WT09pJuMy2gE",
    properties: ({}) => ({
      Configuration: {
        Handler: "index.handler",
        Runtime: "nodejs12.x",
        Timeout: 120,
      },
    }),
    dependencies: ({}) => ({
      role: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-4YDZM1JYBBAN",
    }),
  },
];
