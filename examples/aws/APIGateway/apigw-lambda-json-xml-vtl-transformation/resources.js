// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config }) => ({
      apiKeySource: "HEADER",
      endpointConfiguration: {
        types: ["EDGE"],
      },
      name: "MyApi",
      schema: {
        openapi: "3.0.1",
        info: {
          title: "MyApi",
          version: "1",
        },
        paths: {
          "/": {},
          "/details": {
            get: {
              responses: {
                200: {
                  description: "200 response",
                },
                404: {
                  description: "404 response",
                },
                412: {
                  description: "412 response",
                },
                500: {
                  description: "500 response",
                },
              },
              "x-amazon-apigateway-integration": {
                httpMethod: "POST",
                passthroughBehavior: "WHEN_NO_MATCH",
                type: "AWS",
                uri: `arn:aws:apigateway:${
                  config.region
                }:lambda:path/2015-03-31/functions/arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:MyLambdaFunction/invocations`,
                responses: {
                  default: {
                    responseTemplates: {
                      "application/json": `##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
##  This template will pass through the response received and frame corresponding xml structure.
#set($inputRoot = $input.path('$'))
#set($inputBody= $util.parseJson($inputRoot.body))
  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>##
  <getPetDetails>##
  #set($details= $inputBody.petDetails)
  <response #foreach($key in $details.keySet()) $key="$util.escapeJavaScript($details.get($key))"#end/>##
  <category name="$inputBody.category.name"/>##
  #set($inputTags=$inputBody.tags)
  #if($inputTags.size()>0)
  <tags>##
  #foreach($elem in $inputTags)
  <tag name = "$elem.name">$util.escapeJavaScript($elem.value)</tag>##
  #end
  </tags>##
  #else
  <tags/>##
  #end
  </getPetDetails>
`,
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
        },
        components: {
          schemas: {},
        },
      },
      deployment: {
        stageName: "Prod",
      },
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "Prod",
      tracingEnabled: true,
    }),
    dependencies: ({}) => ({
      restApi: "MyApi",
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "Stage",
    }),
    dependencies: ({}) => ({
      restApi: "MyApi",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "MyApi-Access-Logs",
      retentionInDays: 1,
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-MyApiRole-1RYJ13NKW98YP",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:FilterLogEvents",
                ],
                Effect: "Allow",
                Resource: `arn:aws:logs:${
                  config.region
                }:${config.accountId()}:log-group:MyApi-Access-Logs:*`,
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "Logs",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-MyLambdaFunctionRole-D038JJQN1V0Z",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          PolicyName: "AWSXrayWriteOnlyAccess",
        },
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description: "Lambda to be invoked by the API Gateway",
        FunctionName: "MyLambdaFunction",
        Handler: "app.handler",
        Runtime: "nodejs18.x",
        TracingConfig: {
          Mode: "Active",
        },
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-MyLambdaFunctionRole-D038JJQN1V0Z",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "MyLambdaFunction",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "MyApi",
            path: "live.arnv2",
          })}/*/GET/details`,
          StatementId:
            "sam-app-MyLambdaFunctionPetStorePermissionProd-8F0GNYFDNAO1",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "MyLambdaFunction",
      apiGatewayRestApis: ["MyApi"],
    }),
  },
];
