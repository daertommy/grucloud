// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Account",
    group: "APIGateway",
    dependencies: ({}) => ({
      cloudwatchRole:
        "MyServerlessApplicationSt-RestApiCloudWatchRoleE3E-GC7YEQUWF6JE",
    }),
  },
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config }) => ({
      apiKeySource: "HEADER",
      endpointConfiguration: {
        types: ["REGIONAL"],
      },
      name: "RestApi",
      schema: {
        openapi: "3.0.1",
        info: {
          title: "RestApi",
          version: "1",
        },
        paths: {
          "/": {
            get: {
              "x-amazon-apigateway-integration": {
                httpMethod: "POST",
                passthroughBehavior: "WHEN_NO_MATCH",
                type: "AWS_PROXY",
                uri: `arn:aws:apigateway:${
                  config.region
                }:lambda:path/2015-03-31/functions/arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:MyServerlessApplicationStack-MyFunction3BAA72D1-EXv7XTdWy2mX:Prod/invocations`,
              },
            },
          },
        },
        components: {
          schemas: {
            Empty: {
              title: "Empty Schema",
              type: "object",
            },
            Error: {
              title: "Error Schema",
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      deployment: {
        stageName: "prod",
      },
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      canarySettings: {
        percentTraffic: 0,
        stageVariableOverrides: {
          lambdaAlias: "Test",
        },
        useStageCache: false,
      },
      stageName: "prod",
      variables: {
        lambdaAlias: "Prod",
      },
    }),
    dependencies: ({}) => ({
      restApi: "RestApi",
      account: "default",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "MyServerlessApplicationSt-MyFunctionServiceRole3C3-1HCKXNRK6G7IA",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "MyServerlessApplicationSt-RestApiCloudWatchRoleE3E-GC7YEQUWF6JE",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
          PolicyName: "AmazonAPIGatewayPushToCloudWatchLogs",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName:
          "MyServerlessApplicationStack-MyFunction3BAA72D1-EXv7XTdWy2mX",
        Handler: "index.handler",
        Runtime: "python3.9",
      },
    }),
    dependencies: ({}) => ({
      role: "MyServerlessApplicationSt-MyFunctionServiceRole3C3-1HCKXNRK6G7IA",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "MyServerlessApplicationStack-MyFunction3BAA72D1-EXv7XTdWy2mX",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "RestApi",
            path: "live.arnv2",
          })}/*/GET/`,
          StatementId:
            "MyServerlessApplicationStack-MyFunctionlambdaPermission88C73777-VIU4K2K8PDSV",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction:
        "MyServerlessApplicationStack-MyFunction3BAA72D1-EXv7XTdWy2mX",
      apiGatewayRestApis: ["RestApi"],
    }),
  },
];
