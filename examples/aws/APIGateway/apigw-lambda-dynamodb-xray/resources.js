// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Account",
    group: "APIGateway",
    dependencies: ({}) => ({
      cloudwatchRole:
        "ApigwLambdaDynamodbCdkTsS-RestAPICloudWatchRole025-HHXYKBKAOFS5",
    }),
  },
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config }) => ({
      apiKeySource: "HEADER",
      endpointConfiguration: {
        types: ["EDGE"],
      },
      name: "RestAPI",
      schema: {
        openapi: "3.0.1",
        info: {
          title: "RestAPI",
          version: "1",
        },
        paths: {
          "/": {},
          "/scan": {
            get: {
              "x-amazon-apigateway-integration": {
                httpMethod: "POST",
                passthroughBehavior: "WHEN_NO_MATCH",
                type: "AWS_PROXY",
                uri: `arn:aws:apigateway:${
                  config.region
                }:lambda:path/2015-03-31/functions/arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:ApigwLambdaDynamodbCdkTsSta-lambdaFunction940E68AD-7fPOd66txEZp/invocations`,
              },
            },
          },
        },
        components: {
          schemas: {
            Empty: {
              title: "Empty Schema",
              type: "object",
            },
            Error: {
              title: "Error Schema",
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      deployment: {
        stageName: "prod",
      },
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      methodSettings: {
        "*/*": {
          cacheDataEncrypted: false,
          cacheTtlInSeconds: 300,
          cachingEnabled: false,
          dataTraceEnabled: true,
          metricsEnabled: false,
          requireAuthorizationForCacheControl: true,
          throttlingBurstLimit: 5000,
          throttlingRateLimit: 10000,
          unauthorizedCacheControlHeaderStrategy:
            "SUCCEED_WITH_RESPONSE_HEADER",
        },
      },
      stageName: "prod",
      tracingEnabled: true,
    }),
    dependencies: ({}) => ({
      restApi: "RestAPI",
      account: "default",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "ApigwLambdaDynamodbCdkTsStack-TableCD117FA1-26TB2N6F0U9N",
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5,
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ApigwLambdaDynamodbCdkTsS-lambdaFunctionServiceRol-82IDRINPVWDS",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["xray:PutTraceSegments", "xray:PutTelemetryRecords"],
                Effect: "Allow",
                Resource: "*",
              },
              {
                Action: [
                  "dynamodb:BatchGetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:Query",
                  "dynamodb:GetItem",
                  "dynamodb:Scan",
                  "dynamodb:ConditionCheckItem",
                ],
                Effect: "Allow",
                Resource: [
                  `arn:aws:dynamodb:${
                    config.region
                  }:${config.accountId()}:table/ApigwLambdaDynamodbCdkTsStack-TableCD117FA1-26TB2N6F0U9N`,
                ],
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "lambdaFunctionServiceRoleDefaultPolicy0958DD5A",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "ApigwLambdaDynamodbCdkTsS-RestAPICloudWatchRole025-HHXYKBKAOFS5",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
          PolicyName: "AmazonAPIGatewayPushToCloudWatchLogs",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            DYNAMODB:
              "ApigwLambdaDynamodbCdkTsStack-TableCD117FA1-26TB2N6F0U9N",
          },
        },
        FunctionName:
          "ApigwLambdaDynamodbCdkTsSta-lambdaFunction940E68AD-7fPOd66txEZp",
        Handler: "index.handler",
        Runtime: "nodejs14.x",
        TracingConfig: {
          Mode: "Active",
        },
      },
    }),
    dependencies: ({}) => ({
      role: "ApigwLambdaDynamodbCdkTsS-lambdaFunctionServiceRol-82IDRINPVWDS",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "ApigwLambdaDynamodbCdkTsSta-lambdaFunction940E68AD-7fPOd66txEZp",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "RestAPI",
            path: "live.arnv2",
          })}/prod/GET/scan`,
          StatementId:
            "ApigwLambdaDynamodbCdkTsStack-RestAPIscanGETApiPermissionApigwLambdaDynamodbCdkTsStack-XGO5U6C6MIXI",
        },
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "ApigwLambdaDynamodbCdkTsSta-lambdaFunction940E68AD-7fPOd66txEZp",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "RestAPI",
            path: "live.arnv2",
          })}/test-invoke-stage/GET/scan`,
          StatementId:
            "ApigwLambdaDynamodbCdkTsStack-RestAPIscanGETApiPermissionTestApigwLambdaDynamodbCdkTsS-1FKVBLRU8GQTN",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction:
        "ApigwLambdaDynamodbCdkTsSta-lambdaFunction940E68AD-7fPOd66txEZp",
      apiGatewayRestApis: ["RestAPI"],
    }),
  },
];
