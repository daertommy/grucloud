// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Account",
    group: "APIGateway",
    dependencies: ({}) => ({
      cloudwatchRole:
        "ApigwS3CdkStack-S3ObjectsApiCloudWatchRole1AFD0F4C-ABPYNYNF4B8R",
    }),
  },
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config }) => ({
      apiKeySource: "HEADER",
      description: "S3 Actions Proxy API",
      endpointConfiguration: {
        types: ["EDGE"],
      },
      name: "S3 Proxy Service",
      schema: {
        openapi: "3.0.1",
        info: {
          description: "S3 Actions Proxy API",
          title: "S3 Proxy Service",
          version: "1",
        },
        paths: {
          "/": {
            get: {
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Content-Type": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-auth": {
                type: "AWS_IAM",
              },
              "x-amazon-apigateway-integration": {
                credentials: `arn:aws:iam::${config.accountId()}:role/ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS`,
                httpMethod: "GET",
                passthroughBehavior: "WHEN_NO_TEMPLATES",
                type: "AWS",
                uri: `arn:aws:apigateway:${config.region}:s3:path//`,
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Content-Type":
                        "integration.response.header.Content-Type",
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
          "/{folder}": {
            get: {
              parameters: [
                {
                  name: "bucket",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
              ],
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Content-Type": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-auth": {
                type: "AWS_IAM",
              },
              "x-amazon-apigateway-integration": {
                credentials: `arn:aws:iam::${config.accountId()}:role/ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS`,
                httpMethod: "GET",
                passthroughBehavior: "WHEN_NO_TEMPLATES",
                requestParameters: {
                  "integration.request.path.bucket":
                    "method.request.path.folder",
                },
                type: "AWS",
                uri: `arn:aws:apigateway:${config.region}:s3:path/{bucket}`,
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Content-Type":
                        "integration.response.header.Content-Type",
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
          "/{folder}/{item}": {
            get: {
              parameters: [
                {
                  name: "Accept",
                  in: "header",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
                {
                  name: "bucket",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
                {
                  name: "object",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
              ],
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Content-Type": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-auth": {
                type: "AWS_IAM",
              },
              "x-amazon-apigateway-integration": {
                credentials: `arn:aws:iam::${config.accountId()}:role/ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS`,
                httpMethod: "GET",
                passthroughBehavior: "WHEN_NO_TEMPLATES",
                requestParameters: {
                  "integration.request.header.Accept":
                    "method.request.header.Accept",
                  "integration.request.path.bucket":
                    "method.request.path.folder",
                  "integration.request.path.object": "method.request.path.item",
                },
                type: "AWS",
                uri: `arn:aws:apigateway:${config.region}:s3:path/{bucket}/{object}`,
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Content-Type":
                        "integration.response.header.Content-Type",
                    },
                    statusCode: "200",
                  },
                },
              },
            },
            put: {
              parameters: [
                {
                  name: "Accept",
                  in: "header",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
                {
                  name: "bucket",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
                {
                  name: "object",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
              ],
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Content-Type": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-auth": {
                type: "AWS_IAM",
              },
              "x-amazon-apigateway-integration": {
                credentials: `arn:aws:iam::${config.accountId()}:role/ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS`,
                httpMethod: "PUT",
                passthroughBehavior: "WHEN_NO_TEMPLATES",
                requestParameters: {
                  "integration.request.header.Accept":
                    "method.request.header.Accept",
                  "integration.request.path.bucket":
                    "method.request.path.folder",
                  "integration.request.path.object": "method.request.path.item",
                },
                type: "AWS",
                uri: `arn:aws:apigateway:${config.region}:s3:path/{bucket}/{object}`,
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Content-Type":
                        "integration.response.header.Content-Type",
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
        },
        components: {
          schemas: {
            Empty: {
              title: "Empty Schema",
              type: "object",
            },
            Error: {
              title: "Error Schema",
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      deployment: {
        stageName: "prod",
      },
    }),
    dependencies: ({}) => ({
      roles: ["ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS"],
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "prod",
    }),
    dependencies: ({}) => ({
      restApi: "S3 Proxy Service",
      account: "default",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "ApigwS3CdkStack-apigatewayroleE6D48DBD-GPQ1YV05N9TS",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: "s3:ListAllMyBuckets",
                Effect: "Allow",
                Resource: "*",
              },
              {
                Action: "s3:ListBucket",
                Effect: "Allow",
                Resource: "*",
              },
              {
                Action: "s3:GetObject",
                Effect: "Allow",
                Resource: "*",
              },
              {
                Action: "s3:PutObject",
                Effect: "Allow",
                Resource: "*",
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "apigatewayroleDefaultPolicyFB5F907E",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "ApigwS3CdkStack-S3ObjectsApiCloudWatchRole1AFD0F4C-ABPYNYNF4B8R",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
          PolicyName: "AmazonAPIGatewayPushToCloudWatchLogs",
        },
      ],
    }),
  },
];
