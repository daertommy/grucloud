// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "EventBus",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Name: "MyMainBus",
    }),
  },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Description: "Listen to all UserCreated events",
      EventPattern: {
        "detail-type": ["UserCreated"],
        source: ["myapp.users"],
      },
      Name: "EventbridgeOutboxPatternWi-UserCreatedRuleFC26FD62-5YW7O6FQGB1Q",
    }),
    dependencies: ({}) => ({
      eventBus: "MyMainBus",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "Target0",
    }),
    dependencies: ({}) => ({
      rule: "EventbridgeOutboxPatternWi-UserCreatedRuleFC26FD62-5YW7O6FQGB1Q",
      lambdaFunction:
        "EventbridgeOutboxPatternW-userCreatedConsumerF491D-XEDOXNubBDQT",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName:
        "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
      StreamSpecification: {
        StreamEnabled: true,
        StreamViewType: "NEW_IMAGE",
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config, getId }) => ({
      RoleName:
        "EventbridgeOutboxPatternW-streamToEventBridgeServi-1Q8XE9F7MA3Y3",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "events:PutEvents",
                Resource: `arn:aws:events:${
                  config.region
                }:${config.accountId()}:event-bus/MyMainBus`,
                Effect: "Allow",
              },
              {
                Action: "dynamodb:ListStreams",
                Resource: "*",
                Effect: "Allow",
              },
              {
                Action: [
                  "dynamodb:DescribeStream",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                ],
                Resource: `${getId({
                  type: "Table",
                  group: "DynamoDB",
                  name: "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
                  path: "live.LatestStreamArn",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "streamToEventBridgeServiceRoleDefaultPolicyEB03D4EF",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
    dependencies: ({}) => ({
      dynamoDbTables: [
        "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "EventbridgeOutboxPatternW-userCreatedConsumerServi-ID0RGEAD9FXP",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "EventbridgeOutboxPatternW-writetoddbServiceRole08D-1R7G1M1FLQP3T",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "dynamodb:BatchWriteItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                ],
                Resource: [
                  `arn:aws:dynamodb:${
                    config.region
                  }:${config.accountId()}:table/EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3`,
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "writetoddbServiceRoleDefaultPolicy2A8D0315",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "EventSourceMapping",
    group: "Lambda",
    properties: ({}) => ({
      BisectBatchOnFunctionError: false,
      MaximumRecordAgeInSeconds: -1,
      MaximumRetryAttempts: -1,
      ParallelizationFactor: 1,
      StartingPosition: "LATEST",
      TumblingWindowInSeconds: 0,
    }),
    dependencies: ({}) => ({
      lambdaFunction:
        "EventbridgeOutboxPatternW-streamToEventBridge9009D-bkO55bAwkWvq",
      dynamoDbTable:
        "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1",
            EVENT_BUS_NAME: "MyMainBus",
            TABLE_NAME:
              "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
          },
        },
        FunctionName:
          "EventbridgeOutboxPatternW-streamToEventBridge9009D-bkO55bAwkWvq",
        Handler: "index.handler",
        MemorySize: 1024,
        Runtime: "nodejs16.x",
        Timeout: 5,
      },
    }),
    dependencies: ({}) => ({
      role: "EventbridgeOutboxPatternW-streamToEventBridgeServi-1Q8XE9F7MA3Y3",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1",
          },
        },
        FunctionName:
          "EventbridgeOutboxPatternW-userCreatedConsumerF491D-XEDOXNubBDQT",
        Handler: "index.handler",
        MemorySize: 1024,
        Runtime: "nodejs16.x",
        Timeout: 5,
      },
    }),
    dependencies: ({}) => ({
      role: "EventbridgeOutboxPatternW-userCreatedConsumerServi-ID0RGEAD9FXP",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1",
            TABLE_NAME:
              "EventbridgeOutboxPatternWithDdbStack-UsersTable9725E9C8-1UH1H2LCW1XB3",
          },
        },
        FunctionName:
          "EventbridgeOutboxPatternWithDdb-writetoddb919FDC32-ioOLsOxtWWua",
        Handler: "index.handler",
        MemorySize: 1024,
        Runtime: "nodejs16.x",
        Timeout: 5,
      },
    }),
    dependencies: ({}) => ({
      role: "EventbridgeOutboxPatternW-writetoddbServiceRole08D-1R7G1M1FLQP3T",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ config }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "EventbridgeOutboxPatternW-userCreatedConsumerF491D-XEDOXNubBDQT",
          Principal: "events.amazonaws.com",
          StatementId:
            "EventbridgeOutboxPatternWithDdbStack-UserCreatedRuleAllowEventRuleEventbridgeOutboxPat-I3NSM4LNBVDF",
          SourceArn: `arn:aws:events:${
            config.region
          }:${config.accountId()}:rule/MyMainBus/EventbridgeOutboxPatternWi-UserCreatedRuleFC26FD62-5YW7O6FQGB1Q`,
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction:
        "EventbridgeOutboxPatternW-userCreatedConsumerF491D-XEDOXNubBDQT",
    }),
  },
];
