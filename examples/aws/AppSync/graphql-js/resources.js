// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "DataSource",
    group: "AppSync",
    properties: ({ config }) => ({
      description: "DynamoDB table backing the MyModelType object type.",
      dynamodbConfig: {
        awsRegion: `${config.region}`,
        tableName: "MyModelTypeTable",
        useCallerCredentials: false,
        versioned: false,
      },
      name: "MyModelTypeTable",
      type: "AMAZON_DYNAMODB",
    }),
    dependencies: ({}) => ({
      graphqlApi: "My AppSync App",
      serviceRole: "appsync-ds-ddb-xoaizl-MyModelTypeTable",
      dynamoDbTable: "MyModelTypeTable",
    }),
  },
  {
    type: "Function",
    group: "AppSync",
    properties: ({}) => ({
      code: `/**
 * Available AppSync utilities that you can use in your request and response handler.
 */
import { util } from '@aws-appsync/utils';

/**
 * Handles an incoming request and converts it into a request object for the
 * selected data source operation.
 * Find code samples at https://github.com/aws-samples/aws-appsync-resolver-samples
 * @param ctx contextual information for your resolver invocation
 * @returns a data source request object
 */
export function request(ctx) {
    return {};
}

/**
 * Handles the response from your data source.
 * Find code samples at https://github.com/aws-samples/aws-appsync-resolver-samples
 * @param ctx contextual information for your resolver invocation
 * @returns a result that is passed to the next function, or the response handler of the pipeline resolver
 */
export function response(ctx) {
    return {};
}`,
      dataSourceName: "MyModelTypeTable",
      maxBatchSize: 0,
      name: "myFunction",
      runtime: {
        name: "APPSYNC_JS",
        runtimeVersion: "1.0.0",
      },
    }),
    dependencies: ({}) => ({
      graphqlApi: "My AppSync App",
      dataSource: "MyModelTypeTable",
    }),
  },
  {
    type: "GraphqlApi",
    group: "AppSync",
    properties: ({}) => ({
      name: "My AppSync App",
      authenticationType: "API_KEY",
      xrayEnabled: false,
      apiKeys: [{}],
      schemaFile: "My AppSync App.graphql",
    }),
  },
  {
    type: "Resolver",
    group: "AppSync",
    properties: ({}) => ({
      code: `/**
 *   Available AppSync utilities that you can use in your request and response handler
 */
import {util} from '@aws-appsync/utils';

/**
 * Invoked **before** the request handler of the first AppSync function in the pipeline.
 * The resolver \`request\` handler allows to perform some preparation logic
 * before executing the defined functions in your pipeline.
 * @param ctx contextual information for your resolver invocation
 */
export function request(ctx) {
    return {};
}

/**
 * **Pipeline functions**
 * Between your request and response handler, the functions of your pipeline resolver will run in sequence.
 * The resolver's request handler result is made available to the first function as \`ctx.prev.result\`.
 * Each function's response handler result is available to the next function as \`ctx.prev.result\`.
 */

/**
 * Invoked **after** the response handler of the last AppSync function in the pipeline.
 * The resolver \`response\` handler allows to perform some final evaluation logic
 * from the output of the last function to the expected GraphQL field type.
 * @param ctx contextual information for your resolver invocation
 */
export function response(ctx) {
    return ctx.prev.result;
}`,
      fieldName: "id",
      kind: "PIPELINE",
      runtime: {
        name: "APPSYNC_JS",
        runtimeVersion: "1.0.0",
      },
      typeName: "MyModelType",
    }),
    dependencies: ({}) => ({
      graphqlApi: "My AppSync App",
      functions: ["My AppSync App::myFunction"],
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "MyModelTypeTable",
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: "appsync-ds-ddb-xoaizl-MyModelTypeTable",
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Action: [
              "dynamodb:DeleteItem",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:UpdateItem",
            ],
            Resource: [
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/MyModelTypeTable`,
              `arn:aws:dynamodb:${
                config.region
              }:${config.accountId()}:table/MyModelTypeTable/*`,
            ],
          },
        ],
      },
      Path: "/service-role/",
      Description: "Allows the AWS AppSync service to access your data source.",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appsync-ds-ddb-xoaizl-MyModelTypeTable",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "appsync.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["appsync-ds-ddb-xoaizl-MyModelTypeTable"],
    }),
  },
];
