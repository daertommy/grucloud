// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Connection",
    group: "AppRunner",
    properties: ({}) => ({
      ConnectionName: "github",
      ProviderType: "GITHUB",
    }),
  },
  {
    type: "Service",
    group: "AppRunner",
    properties: ({}) => ({
      ServiceName: "leaderboard-backend-service",
      NetworkConfiguration: {
        EgressConfiguration: {
          EgressType: "VPC",
        },
        IngressConfiguration: {
          IsPubliclyAccessible: false,
        },
      },
      SourceConfiguration: {
        AutoDeploymentsEnabled: false,
        CodeRepository: {
          CodeConfiguration: {
            CodeConfigurationValues: {
              BuildCommand: "pip install -r requirements.txt",
              Port: "8000",
              Runtime: "PYTHON_3",
              StartCommand: "gunicorn server:app –-log-level=debug",
            },
            ConfigurationSource: "API",
          },
          RepositoryUrl:
            "https://github.com/FredericHeem/apprunner-leaderboard-backend",
          SourceCodeVersion: {
            Type: "BRANCH",
            Value: "main",
          },
        },
      },
      InstanceConfiguration: {
        Cpu: "1024",
        Memory: "2048",
      },
      ObservabilityConfiguration: {
        ObservabilityEnabled: false,
      },
      HealthCheckConfiguration: {
        HealthyThreshold: 1,
        Interval: 10,
        Path: "/",
        Protocol: "TCP",
        Timeout: 5,
        UnhealthyThreshold: 5,
      },
    }),
    dependencies: ({}) => ({
      connection: "github",
      vpcConnector: "connector",
    }),
  },
  {
    type: "Service",
    group: "AppRunner",
    properties: ({}) => ({
      ServiceName: "leaderboard-frontend-service",
      NetworkConfiguration: {
        EgressConfiguration: {
          EgressType: "VPC",
        },
        IngressConfiguration: {
          IsPubliclyAccessible: true,
        },
      },
      SourceConfiguration: {
        AutoDeploymentsEnabled: false,
        CodeRepository: {
          CodeConfiguration: {
            CodeConfigurationValues: {
              BuildCommand: "pip install -r requirements.txt",
              Port: "8000",
              Runtime: "PYTHON_3",
              StartCommand: "gunicorn server:app –-log-level=debug",
            },
            ConfigurationSource: "API",
          },
          RepositoryUrl:
            "https://github.com/FredericHeem/apprunner-leaderboard-frontend",
          SourceCodeVersion: {
            Type: "BRANCH",
            Value: "main",
          },
        },
      },
      InstanceConfiguration: {
        Cpu: "1024",
        Memory: "2048",
      },
      ObservabilityConfiguration: {
        ObservabilityEnabled: false,
      },
      HealthCheckConfiguration: {
        HealthyThreshold: 1,
        Interval: 10,
        Path: "/",
        Protocol: "TCP",
        Timeout: 5,
        UnhealthyThreshold: 5,
      },
    }),
    dependencies: ({}) => ({
      connection: "github",
      vpcConnector: "connector",
    }),
  },
  {
    type: "VpcConnector",
    group: "AppRunner",
    properties: ({}) => ({
      VpcConnectorName: "connector",
      VpcConnectorRevision: 1,
    }),
    dependencies: ({}) => ({
      subnets: [
        "vpc-default::subnet-default-a",
        "vpc-default::subnet-default-b",
      ],
      securityGroups: ["sg::vpc-default::default"],
    }),
  },
  {
    type: "VpcIngressConnection",
    group: "AppRunner",
    properties: ({}) => ({
      VpcIngressConnectionName: "leaderboard-backend-service",
    }),
    dependencies: ({}) => ({
      service: "leaderboard-backend-service",
      vpcEndpoint: "vpc-default::vpce-apprunner",
    }),
  },
  { type: "Vpc", group: "EC2", name: "vpc-default", isDefault: true },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-a",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-b",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::vpc-default::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: "vpce-apprunner",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.apprunner.requests`,
    }),
    dependencies: ({}) => ({
      vpc: "vpc-default",
      subnets: [
        "vpc-default::subnet-default-a",
        "vpc-default::subnet-default-b",
      ],
      securityGroups: ["sg::vpc-default::default"],
    }),
  },
];
