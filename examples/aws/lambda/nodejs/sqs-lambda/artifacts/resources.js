// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.IAM.makeRole({
    name: "lambda-role",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [resources.IAM.Policy["lambda-policy"]],
    }),
  });

  provider.IAM.makePolicy({
    name: "lambda-policy",
    properties: ({ config }) => ({
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Action: ["logs:*"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["sqs:*"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
      },
      Path: "/",
      Description: "Allow logs",
    }),
  });

  provider.Lambda.makeFunction({
    name: "lambda-hello-world",
    properties: ({ config }) => ({
      Handler: "helloworld.handler",
      PackageType: "Zip",
      Runtime: "nodejs14.x",
      Description: "",
      Timeout: 3,
      MemorySize: 128,
    }),
    dependencies: ({ resources }) => ({
      role: resources.IAM.Role["lambda-role"],
    }),
  });

  provider.Lambda.makeEventSourceMapping({
    name: "mapping-lambda-hello-world-my-queue-lambda",
    properties: ({ config }) => ({
      BatchSize: 10,
      MaximumBatchingWindowInSeconds: 0,
    }),
    dependencies: ({ resources }) => ({
      lambdaFunction: resources.Lambda.Function["lambda-hello-world"],
      sqsQueue: resources.SQS.Queue["my-queue-lambda"],
    }),
  });

  provider.SQS.makeQueue({
    name: "my-queue-lambda",
    properties: ({ config }) => ({
      Attributes: {
        VisibilityTimeout: "30",
        MaximumMessageSize: "262144",
        MessageRetentionPeriod: "345600",
        DelaySeconds: "0",
        ReceiveMessageWaitTimeSeconds: "0",
      },
      tags: {
        "my-tag": "my-value",
      },
    }),
  });
};

exports.createResources = createResources;
