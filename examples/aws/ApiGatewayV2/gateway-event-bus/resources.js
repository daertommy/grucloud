// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    name: "MyHttpApi",
    properties: ({}) => ({
      ProtocolType: "HTTP",
      ApiKeySelectionExpression: "$request.header.x-api-key",
      DisableExecuteApiEndpoint: false,
      RouteSelectionExpression: "$request.method $request.path",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    name: "$default",
    dependencies: () => ({
      api: "MyHttpApi",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ConnectionType: "INTERNET",
      IntegrationType: "AWS_PROXY",
      IntegrationSubtype: "EventBridge-PutEvents",
      PayloadFormatVersion: "1.0",
      RequestParameters: {
        DetailType: "MyDetailType",
        Source: "WebApp",
        Detail: "$request.body",
      },
      RequestTemplates: {},
      TimeoutInMillis: 10000,
    }),
    dependencies: () => ({
      api: "MyHttpApi",
      eventBus: "MyEventBus",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ApiKeyRequired: false,
      AuthorizationScopes: [],
      AuthorizationType: "NONE",
      RequestModels: {},
      RouteKey: "POST /",
    }),
    dependencies: () => ({
      api: "MyHttpApi",
      integration: "integration::MyHttpApi::",
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
    }),
    dependencies: () => ({
      api: "MyHttpApi",
      stage: "$default",
    }),
  },
  { type: "EventBus", group: "CloudWatchEvents", name: "MyEventBus" },
  {
    type: "Rule",
    group: "CloudWatchEvents",
    name: "ApiEventbridgeStack-EventLoggerRuleC0DD3E40-9QUOOGMMJ7E1",
    properties: ({}) => ({
      Description: "Log all events",
      EventPattern: '{"region":["ap-southeast-2"]}',
      State: "ENABLED",
      Targets: [
        {
          Arn: "arn:aws:logs:us-east-1:840541460064:log-group:/aws/events/MyEventBus",
          Id: "Target0",
        },
      ],
    }),
    dependencies: () => ({
      eventBus: "MyEventBus",
    }),
  },
  {
    type: "Repository",
    group: "ECR",
    name: "cdk-hnb659fds-container-assets-840541460064-us-east-1",
    properties: ({}) => ({
      imageTagMutability: "MUTABLE",
      imageScanningConfiguration: {
        scanOnPush: true,
      },
      encryptionConfiguration: {
        encryptionType: "AES256",
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-VEFQ7FPG4DH",
    properties: ({}) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "logs:PutResourcePolicy",
                Resource: `*`,
                Effect: "Allow",
              },
              {
                Action: "logs:DeleteResourcePolicy",
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "EventsLogGroupPolicyApiEventbridgeStackEventLoggerRuleB02679CDCustomResourcePolicy2604DC42",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "ApiEventbridgeStack-EventBridgeIntegrationRoleB322-16CKN6OG527GA",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "events:PutEvents",
                Resource: `arn:aws:events:${
                  config.region
                }:${config.accountId()}:event-bus/MyEventBus`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "EventBridgeIntegrationRoleDefaultPolicy16371A00",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "cdk-hnb659fds-cfn-exec-role-840541460064-us-east-1",
    properties: ({}) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "cloudformation.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AdministratorAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AdministratorAccess",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "cdk-hnb659fds-deploy-role-840541460064-us-east-1",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: "arn:aws:iam::840541460064:root",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "cloudformation:CreateChangeSet",
                  "cloudformation:DeleteChangeSet",
                  "cloudformation:DescribeChangeSet",
                  "cloudformation:DescribeStacks",
                  "cloudformation:ExecuteChangeSet",
                  "cloudformation:CreateStack",
                  "cloudformation:UpdateStack",
                ],
                Resource: `*`,
                Effect: "Allow",
                Sid: "CloudFormationPermissions",
              },
              {
                Condition: {
                  StringNotEquals: {
                    "s3:ResourceAccount": "840541460064",
                  },
                },
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:Abort*",
                  "s3:DeleteObject*",
                  "s3:PutObject*",
                ],
                Resource: `*`,
                Effect: "Allow",
                Sid: "PipelineCrossAccountArtifactsBucket",
              },
              {
                Condition: {
                  StringEquals: {
                    "kms:ViaService": "s3.us-east-1.amazonaws.com",
                  },
                },
                Action: [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `*`,
                Effect: "Allow",
                Sid: "PipelineCrossAccountArtifactsKey",
              },
              {
                Action: "iam:PassRole",
                Resource: `arn:aws:iam::${config.accountId()}:role/cdk-hnb659fds-cfn-exec-role-840541460064-${
                  config.region
                }`,
                Effect: "Allow",
              },
              {
                Action: [
                  "cloudformation:DescribeStackEvents",
                  "cloudformation:GetTemplate",
                  "cloudformation:DeleteStack",
                  "cloudformation:UpdateTerminationProtection",
                  "sts:GetCallerIdentity",
                ],
                Resource: `*`,
                Effect: "Allow",
                Sid: "CliPermissions",
              },
              {
                Action: ["s3:GetObject*", "s3:GetBucket*", "s3:List*"],
                Resource: [
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }`,
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }/*`,
                ],
                Effect: "Allow",
                Sid: "CliStagingBucket",
              },
              {
                Action: ["ssm:GetParameter"],
                Resource: [
                  `arn:aws:ssm:${
                    config.region
                  }:${config.accountId()}:parameter/cdk-bootstrap/hnb659fds/version`,
                ],
                Effect: "Allow",
                Sid: "ReadVersion",
              },
            ],
          },
          PolicyName: "default",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "cdk-hnb659fds-file-publishing-role-840541460064-us-east-1",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: "arn:aws:iam::840541460064:root",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:GetEncryptionConfiguration",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject*",
                  "s3:Abort*",
                ],
                Resource: [
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }`,
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }/*`,
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `arn:aws:kms:${
                  config.region
                }:${config.accountId()}:key/AWS_MANAGED_KEY`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "cdk-hnb659fds-file-publishing-role-default-policy-840541460064-us-east-1",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "cdk-hnb659fds-image-publishing-role-840541460064-us-east-1",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: "arn:aws:iam::840541460064:root",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "ecr:PutImage",
                  "ecr:InitiateLayerUpload",
                  "ecr:UploadLayerPart",
                  "ecr:CompleteLayerUpload",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:DescribeRepositories",
                  "ecr:DescribeImages",
                  "ecr:BatchGetImage",
                  "ecr:GetDownloadUrlForLayer",
                ],
                Resource: `arn:aws:ecr:${
                  config.region
                }:${config.accountId()}:repository/cdk-hnb659fds-container-assets-840541460064-us-east-1`,
                Effect: "Allow",
              },
              {
                Action: ["ecr:GetAuthorizationToken"],
                Resource: `*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "cdk-hnb659fds-image-publishing-role-default-policy-840541460064-us-east-1",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "cdk-hnb659fds-lookup-role-840541460064-us-east-1",
    properties: ({}) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: "arn:aws:iam::840541460064:root",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: ["kms:Decrypt"],
                Resource: `*`,
                Effect: "Deny",
                Sid: "DontReadSecrets",
              },
            ],
          },
          PolicyName: "LookupRolePolicy",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "ReadOnlyAccess",
          PolicyArn: "arn:aws:iam::aws:policy/ReadOnlyAccess",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    name: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-QCABOEbNQvRH",
    properties: ({}) => ({
      Handler: "index.handler",
      PackageType: "Zip",
      Runtime: "nodejs12.x",
      Description: "",
      Timeout: 120,
      MemorySize: 128,
    }),
    dependencies: () => ({
      role: "ApiEventbridgeStack-AWS679f53fac002430cb0da5b7982b-VEFQ7FPG4DH",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    name: "cdk-hnb659fds-assets-840541460064-us-east-1",
    properties: ({}) => ({
      ServerSideEncryptionConfiguration: {
        Rules: [
          {
            ApplyServerSideEncryptionByDefault: {
              SSEAlgorithm: "aws:kms",
            },
            BucketKeyEnabled: false,
          },
        ],
      },
      Policy: {
        Version: "2012-10-17",
        Id: "AccessControl",
        Statement: [
          {
            Sid: "AllowSSLRequestsOnly",
            Effect: "Deny",
            Principal: "*",
            Action: "s3:*",
            Resource: [
              "arn:aws:s3:::cdk-hnb659fds-assets-840541460064-us-east-1",
              "arn:aws:s3:::cdk-hnb659fds-assets-840541460064-us-east-1/*",
            ],
            Condition: {
              Bool: {
                "aws:SecureTransport": "false",
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Object",
    group: "S3",
    name: "assets/f3d3a3cc7f26921b237eff24fc5dd7aef8f0465a1f376b8f7918eb3d4b3e8797.zip",
    properties: ({}) => ({
      ContentType: "application/zip",
      ServerSideEncryption: "aws:kms",
      source:
        "s3/cdk-hnb659fds-assets-840541460064-us-east-1/assets/f3d3a3cc7f26921b237eff24fc5dd7aef8f0465a1f376b8f7918eb3d4b3e8797.zip.zip",
    }),
    dependencies: () => ({
      bucket: "cdk-hnb659fds-assets-840541460064-us-east-1",
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    name: "/cdk-bootstrap/hnb659fds/version",
    properties: ({}) => ({
      Type: "String",
      Value: "10",
      DataType: "text",
    }),
  },
];
