// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      CorsConfiguration: {
        AllowCredentials: false,
        AllowMethods: ["*"],
        AllowOrigins: ["*"],
        MaxAge: 0,
      },
      Name: "Queue Based Leveling Example",
      Tags: {
        "httpapi:createdBy": "SAM",
      },
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
      AutoDeployed: true,
    }),
    dependencies: ({}) => ({
      api: "Queue Based Leveling Example",
      stage: "Queue Based Leveling Example::$default",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({ config }) => ({
      ConnectionType: "INTERNET",
      IntegrationSubtype: "SQS-SendMessage",
      IntegrationType: "AWS_PROXY",
      PayloadFormatVersion: "1.0",
      RequestParameters: {
        MessageBody: "$request.body",
        QueueUrl: `https://sqs.${
          config.region
        }.amazonaws.com/${config.accountId()}/MySqsQueue`,
      },
    }),
    dependencies: ({}) => ({
      api: "Queue Based Leveling Example",
      role: "sam-app-MyHttpApiRole-IAG13XOOCKHW",
      sqsQueue: "MySqsQueue",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      RouteKey: "POST /submit",
    }),
    dependencies: ({}) => ({
      api: "Queue Based Leveling Example",
      integration: "integration::Queue Based Leveling Example::MySqsQueue",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      AccessLogSettings: {
        Format:
          '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }',
      },
      AutoDeploy: true,
      StageName: "$default",
      Tags: {
        "httpapi:createdBy": "SAM",
      },
    }),
    dependencies: ({}) => ({
      api: "Queue Based Leveling Example",
      logGroup: "MyHttpApi-Access-Logs",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "MyHttpApi-Access-Logs",
      retentionInDays: 1,
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-MyHttpApiRole-IAG13XOOCKHW",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "apigateway.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "sqs:SendMessage",
                  "sqs:GetQueueUrl",
                  "sqs:SendMessageBatch",
                ],
                Resource: `arn:aws:sqs:${
                  config.region
                }:${config.accountId()}:MySqsQueue`,
                Effect: "Allow",
              },
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:FilterLogEvents",
                ],
                Resource: `arn:aws:logs:${
                  config.region
                }:${config.accountId()}:log-group:MyHttpApi-Access-Logs:*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "AllowSqsIntegration",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-MyLambdaFunctionRole-MQLVXO5LF3G",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
        {
          PolicyName: "AWSLambdaSQSQueueExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole",
        },
      ],
    }),
  },
  {
    type: "EventSourceMapping",
    group: "Lambda",
    dependencies: ({}) => ({
      lambdaFunction: "MyLambdaFunction",
      sqsQueue: "MySqsQueue",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description: "Lambda to be invoked by the SQS Queue",
        FunctionName: "MyLambdaFunction",
        Handler: "app.handler",
        Runtime: "nodejs14.x",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-MyLambdaFunctionRole-MQLVXO5LF3G",
    }),
  },
  {
    type: "Queue",
    group: "SQS",
    properties: ({}) => ({
      QueueName: "MySqsQueue",
    }),
  },
];
