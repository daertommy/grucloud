// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config }) => ({
      apiKeySource: "HEADER",
      description: "IAM authorizer REST API demo",
      endpointConfiguration: {
        types: ["EDGE"],
      },
      name: "sam-app",
      schema: {
        openapi: "3.0.1",
        info: {
          description: "IAM authorizer REST API demo",
          title: "sam-app",
          version: "1",
        },
        paths: {
          "/": {
            get: {
              "x-amazon-apigateway-auth": {
                type: "AWS_IAM",
              },
              "x-amazon-apigateway-integration": {
                credentials: "arn:aws:iam::*:user/*",
                httpMethod: "POST",
                passthroughBehavior: "WHEN_NO_MATCH",
                type: "AWS_PROXY",
                uri: `arn:aws:apigateway:${
                  config.region
                }:lambda:path/2015-03-31/functions/arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:sam-app-AppFunction-pbGEvm3zPzpv/invocations`,
              },
            },
          },
        },
        components: {
          schemas: {},
        },
      },
      deployment: {
        stageName: "Prod",
      },
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "Prod",
    }),
    dependencies: ({}) => ({
      restApi: "sam-app",
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "Stage",
    }),
    dependencies: ({}) => ({
      restApi: "sam-app",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-AppFunctionRole-IQFXCN0UT3UB",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "User",
    group: "IAM",
    properties: ({}) => ({
      UserName: "sam-app-AuthorizedUser-ZJS5JEEB6MXE",
    }),
  },
  {
    type: "User",
    group: "IAM",
    properties: ({}) => ({
      UserName: "sam-app-UnauthorizedUser-1N19UG1LXDUIB",
    }),
  },
  {
    type: "UserPolicy",
    group: "IAM",
    properties: ({ config, getId }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "execute-api:Invoke",
            Effect: "Allow",
            Resource: `${getId({
              type: "RestApi",
              group: "APIGateway",
              name: "sam-app",
              path: "live.arnv2",
            })}/Prod/*`,
          },
          {
            Action: "lambda:InvokeFunction",
            Effect: "Allow",
            Resource: `arn:aws:lambda:${
              config.region
            }:${config.accountId()}:function:sam-app-AppFunction-pbGEvm3zPzpv`,
          },
        ],
        Version: "2012-10-17",
      },
      PolicyName: "root",
    }),
    dependencies: ({}) => ({
      user: "sam-app-AuthorizedUser-ZJS5JEEB6MXE",
      apiGatewayRestApis: ["sam-app"],
    }),
  },
  {
    type: "UserPolicy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "execute-api:Invoke",
            Effect: "Allow",
            Resource: `arn:aws:execute-api:${
              config.region
            }:${config.accountId()}:*/*/*`,
          },
        ],
        Version: "2012-10-17",
      },
      PolicyName: "root",
    }),
    dependencies: ({}) => ({
      user: "sam-app-UnauthorizedUser-1N19UG1LXDUIB",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "sam-app-AppFunction-pbGEvm3zPzpv",
        Handler: "app.handler",
        Runtime: "nodejs14.x",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-AppFunctionRole-IQFXCN0UT3UB",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "sam-app-AppFunction-pbGEvm3zPzpv",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "sam-app",
            path: "live.arnv2",
          })}/*/GET/`,
          StatementId:
            "sam-app-AppFunctionApiEventPermissionProd-1H4JI1TXGYNFF",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-AppFunction-pbGEvm3zPzpv",
      apiGatewayRestApis: ["sam-app"],
    }),
  },
];
