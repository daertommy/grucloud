// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      CorsConfiguration: {
        AllowMethods: ["GET", "HEAD", "OPTIONS", "POST"],
        AllowOrigins: ["*"],
      },
      Description: "An Amazon API Gateway HTTP API and an AWS Lambda function.",
      Name: "apigw-http-api-lambda",
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
      AutoDeployed: true,
    }),
    dependencies: ({}) => ({
      api: "apigw-http-api-lambda",
      stage: "apigw-http-api-lambda::$default",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ConnectionType: "INTERNET",
      IntegrationMethod: "POST",
      IntegrationType: "AWS_PROXY",
      PayloadFormatVersion: "2.0",
    }),
    dependencies: ({}) => ({
      api: "apigw-http-api-lambda",
      lambdaFunction: "apigw-http-api-lambda-function",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      RouteKey: "$default",
    }),
    dependencies: ({}) => ({
      api: "apigw-http-api-lambda",
      integration:
        "integration::apigw-http-api-lambda::apigw-http-api-lambda-function",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      AutoDeploy: true,
      StageName: "$default",
    }),
    dependencies: ({}) => ({
      api: "apigw-http-api-lambda",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-LambdaFunctionRole-1SC6BQPCMKIBW",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            Variable1: "1234",
            Variable2: "ABCD",
          },
        },
        FunctionName: "apigw-http-api-lambda-function",
        Handler: "app.handler",
        Runtime: "nodejs14.x",
        Timeout: 15,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-LambdaFunctionRole-1SC6BQPCMKIBW",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "apigw-http-api-lambda-function",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "Api",
            group: "ApiGatewayV2",
            name: "apigw-http-api-lambda",
            path: "live.ArnV2",
          })}/*`,
          StatementId: "sam-app-FunctionResourcePermission-1PT8AZUS3H82W",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "apigw-http-api-lambda-function",
      apiGatewayV2Apis: ["apigw-http-api-lambda"],
    }),
  },
];
