// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Name: "sam-app",
      Tags: {
        "httpapi:createdBy": "SAM",
        Stack: "sam-app",
      },
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
      AutoDeployed: true,
    }),
    dependencies: ({}) => ({
      api: "sam-app",
      stage: "sam-app::$default",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ConnectionType: "INTERNET",
      IntegrationMethod: "POST",
      IntegrationType: "AWS_PROXY",
      PayloadFormatVersion: "2.0",
    }),
    dependencies: ({}) => ({
      api: "sam-app",
      lambdaFunction: "sam-app-SampleFunction-7LguHNIijNN9",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      RouteKey: "GET /",
    }),
    dependencies: ({}) => ({
      api: "sam-app",
      integration: "integration::sam-app::sam-app-SampleFunction-7LguHNIijNN9",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      AccessLogSettings: {
        Format:
          '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }',
      },
      AutoDeploy: true,
      StageName: "$default",
      Tags: {
        "httpapi:createdBy": "SAM",
        Stack: "sam-app",
      },
    }),
    dependencies: ({}) => ({
      api: "sam-app",
      logGroup: "/sam-app/APIAccessLogs",
    }),
  },
  {
    type: "Dashboard",
    group: "CloudWatch",
    properties: ({}) => ({
      DashboardBody: {
        widgets: [
          {
            height: 6,
            properties: {
              metrics: [
                [
                  "AWS/Lambda",
                  "Invocations",
                  "FunctionName",
                  "sam-app-SampleFunction-7LguHNIijNN9",
                ],
                [".", "Errors", ".", "."],
                [".", "Throttles", ".", "."],
                [
                  ".",
                  "Duration",
                  ".",
                  ".",
                  {
                    stat: "Average",
                  },
                ],
                [
                  ".",
                  "ConcurrentExecutions",
                  ".",
                  ".",
                  {
                    stat: "Maximum",
                  },
                ],
              ],
              period: 60,
              region: "us-east-1",
              stacked: false,
              stat: "Sum",
              title: "Lambda",
              view: "timeSeries",
            },
            type: "metric",
            width: 6,
            x: 6,
            y: 6,
          },
          {
            height: 6,
            properties: {
              metrics: [
                [
                  "AWS/ApiGateway",
                  "4xx",
                  "ApiId",
                  "75i8gi7flc",
                  {
                    yAxis: "right",
                  },
                ],
                [
                  ".",
                  "5xx",
                  ".",
                  ".",
                  {
                    yAxis: "right",
                  },
                ],
                [
                  ".",
                  "DataProcessed",
                  ".",
                  ".",
                  {
                    yAxis: "left",
                  },
                ],
                [
                  ".",
                  "Count",
                  ".",
                  ".",
                  {
                    label: "Count",
                    yAxis: "right",
                  },
                ],
                [
                  ".",
                  "IntegrationLatency",
                  ".",
                  ".",
                  {
                    stat: "Average",
                  },
                ],
                [
                  ".",
                  "Latency",
                  ".",
                  ".",
                  {
                    stat: "Average",
                  },
                ],
              ],
              period: 60,
              region: "us-east-1",
              stacked: false,
              stat: "Sum",
              title: "API Gateway",
              view: "timeSeries",
            },
            type: "metric",
            width: 6,
            x: 0,
            y: 6,
          },
          {
            height: 6,
            properties: {
              metrics: [
                [
                  "sam-app",
                  "ProcessedRequests",
                  "ServiceName",
                  "sam-app-SampleFunction-7LguHNIijNN9",
                  "LogGroup",
                  "sam-app-SampleFunction-7LguHNIijNN9",
                  "ServiceType",
                  "AWS::Lambda::Function",
                  "Service",
                  "Sample Service",
                  {
                    label: "Processed Requests",
                  },
                ],
              ],
              period: 60,
              region: "us-east-1",
              stacked: false,
              stat: "Sum",
              title: "Business Metrics",
              view: "timeSeries",
            },
            type: "metric",
            width: 12,
            x: 0,
            y: 0,
          },
          {
            height: 2,
            properties: {
              alarms: [
                "arn:aws:cloudwatch:us-east-1:840541460064:alarm:sam-app-SampleFunctionErrorsAlarm-152VK254LOXW2",
                "arn:aws:cloudwatch:us-east-1:840541460064:alarm:sam-app-HttpApiErrorsAlarm-1FCVNCGFY7X81",
              ],
              title: "Application Alarms",
            },
            type: "alarm",
            width: 12,
            x: 0,
            y: 12,
          },
          {
            height: 6,
            properties: {
              query: `SOURCE '/aws/lambda/sam-app-SampleFunction-7LguHNIijNN9' | fields @message, ispresent(errorMessage) as errorPresent
| filter errorPresent != 0
| sort @timestamp desc
| display @message
| limit 100
`,
              region: "us-east-1",
              stacked: false,
              title: "Lambda Errors",
              view: "table",
            },
            type: "log",
            width: 12,
            x: 0,
            y: 14,
          },
        ],
      },
      DashboardName: "sam-app-Dashboard",
    }),
  },
  {
    type: "MetricAlarm",
    group: "CloudWatch",
    properties: ({ config }) => ({
      AlarmActions: [
        `arn:aws:sns:${
          config.region
        }:${config.accountId()}:sam-app-AlarmsTopic-dHb6mAE6WUbZ`,
      ],
      AlarmName: "sam-app-HttpApiErrorsAlarm-1FCVNCGFY7X81",
      ComparisonOperator: "GreaterThanOrEqualToThreshold",
      Dimensions: [
        {
          Value: "75i8gi7flc",
          Name: "ApiName",
        },
      ],
      EvaluationPeriods: 1,
      MetricName: "5XXError",
      Namespace: "AWS/ApiGateway",
      Period: 60,
      Statistic: "Sum",
      Threshold: 1,
    }),
    dependencies: ({}) => ({
      snsTopic: "sam-app-AlarmsTopic-dHb6mAE6WUbZ",
    }),
  },
  {
    type: "MetricAlarm",
    group: "CloudWatch",
    properties: ({ config }) => ({
      AlarmActions: [
        `arn:aws:sns:${
          config.region
        }:${config.accountId()}:sam-app-AlarmsTopic-dHb6mAE6WUbZ`,
      ],
      AlarmName: "sam-app-SampleFunctionErrorsAlarm-152VK254LOXW2",
      ComparisonOperator: "GreaterThanOrEqualToThreshold",
      Dimensions: [
        {
          Value: "sam-app-SampleFunction-7LguHNIijNN9",
          Name: "FunctionName",
        },
      ],
      EvaluationPeriods: 1,
      MetricName: "Errors",
      Namespace: "AWS/Lambda",
      Period: 60,
      Statistic: "Sum",
      Threshold: 1,
    }),
    dependencies: ({}) => ({
      snsTopic: "sam-app-AlarmsTopic-dHb6mAE6WUbZ",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "/sam-app/APIAccessLogs",
      retentionInDays: 30,
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-SampleFunctionRole-113ACVPJUKMC7",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          PolicyName: "AWSXrayWriteOnlyAccess",
        },
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
      Tags: [
        {
          Key: "Stack",
          Value: "sam-app-Function",
        },
      ],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "e6df1f6d-9049-4597-92d2-45991e66d43b",
    properties: ({ config }) => ({
      Description: "CMK for SNS alarms topic",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: ["cloudwatch.amazonaws.com", "sns.amazonaws.com"],
            },
            Action: ["kms:GenerateDataKey*", "kms:Decrypt"],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
        ],
      },
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description: "Sample handler for all API operations",
        Environment: {
          Variables: {
            AWS_EMF_NAMESPACE: "sam-app",
          },
        },
        FunctionName: "sam-app-SampleFunction-7LguHNIijNN9",
        Handler: "src/app.handler",
        Runtime: "nodejs14.x",
        Timeout: 100,
        TracingConfig: {
          Mode: "Active",
        },
      },
      Tags: {
        Stack: "sam-app-Function",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-SampleFunctionRole-113ACVPJUKMC7",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "sam-app-SampleFunction-7LguHNIijNN9",
          Principal: "apigateway.amazonaws.com",
          SourceArn: `${getId({
            type: "Api",
            group: "ApiGatewayV2",
            name: "sam-app",
            path: "live.ArnV2",
          })}/*/GET/`,
          StatementId: "sam-app-SampleFunctionAllEventsPermission-9396IP9YG4A4",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-SampleFunction-7LguHNIijNN9",
      apiGatewayV2Apis: ["sam-app"],
    }),
  },
  {
    type: "Topic",
    group: "SNS",
    name: "sam-app-AlarmsTopic-dHb6mAE6WUbZ",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Stack",
          Value: "sam-app",
        },
      ],
    }),
    dependencies: ({}) => ({
      kmsKey: "e6df1f6d-9049-4597-92d2-45991e66d43b",
    }),
  },
];
