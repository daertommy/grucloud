// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "BackupPlan",
    group: "Backup",
    properties: ({}) => ({
      BackupPlanName: "my-backup-plan",
      Rules: [
        {
          CompletionWindowMinutes: 10080,
          Lifecycle: {
            DeleteAfterDays: 35,
          },
          RuleName: "DailyBackups",
          ScheduleExpression: "cron(0 5 ? * * *)",
          StartWindowMinutes: 480,
          TargetBackupVaultName: "Default",
        },
        {
          CompletionWindowMinutes: 10080,
          EnableContinuousBackup: false,
          RuleName: "rule-daily",
          ScheduleExpression: "cron(0 5 ? * * *)",
          StartWindowMinutes: 480,
          TargetBackupVaultName: "my-vault",
        },
      ],
      Tags: {
        mykey: "myvalue",
      },
    }),
    dependencies: ({}) => ({
      backupVaults: ["my-vault"],
    }),
  },
  {
    type: "BackupSelection",
    group: "Backup",
    properties: ({}) => ({
      Resources: ["arn:aws:ec2:*:*:instance/*"],
      SelectionName: "ec2",
    }),
    dependencies: ({}) => ({
      backupPlan: "my-backup-plan",
      iamRole: "AWSBackupDefaultServiceRole",
    }),
  },
  {
    type: "BackupVault",
    group: "Backup",
    properties: ({}) => ({
      BackupVaultName: "my-vault",
      Tags: {
        mykey: "myvalue",
      },
    }),
  },
  {
    type: "BackupVaultLockConfiguration",
    group: "Backup",
    properties: ({}) => ({
      MinRetentionDays: 1,
      MaxRetentionDays: 2,
    }),
    dependencies: ({}) => ({
      backupVault: "my-vault",
    }),
  },
  {
    type: "BackupVaultPolicy",
    group: "Backup",
    properties: ({ config }) => ({
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "backup:CopyIntoBackupVault",
            Resource: "*",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      backupVault: "my-vault",
    }),
  },
  {
    type: "Framework",
    group: "Backup",
    properties: ({}) => ({
      FrameworkControls: [
        {
          ControlInputParameters: [
            {
              ParameterName: "requiredRetentionDays",
              ParameterValue: "35",
            },
          ],
          ControlName: "BACKUP_RECOVERY_POINT_MINIMUM_RETENTION_CHECK",
          ControlScope: {},
        },
        {
          ControlInputParameters: [
            {
              ParameterName: "recoveryPointAgeValue",
              ParameterValue: "1",
            },
            {
              ParameterName: "recoveryPointAgeUnit",
              ParameterValue: "days",
            },
          ],
          ControlName: "BACKUP_LAST_RECOVERY_POINT_CREATED",
          ControlScope: {
            ComplianceResourceTypes: [
              "RDS",
              "S3",
              "Aurora",
              "EFS",
              "EC2",
              "Storage Gateway",
              "EBS",
              "DynamoDB",
              "FSx",
              "VirtualMachine",
            ],
          },
        },
        {
          ControlInputParameters: [
            {
              ParameterName: "maxRetentionDays",
              ParameterValue: "36500",
            },
            {
              ParameterName: "minRetentionDays",
              ParameterValue: "1",
            },
          ],
          ControlName: "BACKUP_RESOURCES_PROTECTED_BY_BACKUP_VAULT_LOCK",
          ControlScope: {
            ComplianceResourceTypes: [
              "RDS",
              "S3",
              "Aurora",
              "EFS",
              "EC2",
              "Storage Gateway",
              "EBS",
              "DynamoDB",
              "FSx",
              "VirtualMachine",
            ],
          },
        },
        {
          ControlInputParameters: [],
          ControlName: "BACKUP_RECOVERY_POINT_ENCRYPTED",
          ControlScope: {},
        },
        {
          ControlInputParameters: [],
          ControlName: "BACKUP_RESOURCES_PROTECTED_BY_BACKUP_PLAN",
          ControlScope: {
            ComplianceResourceTypes: [
              "RDS",
              "S3",
              "Aurora",
              "EFS",
              "EC2",
              "Storage Gateway",
              "EBS",
              "DynamoDB",
              "FSx",
              "VirtualMachine",
            ],
          },
        },
        {
          ControlInputParameters: [],
          ControlName: "BACKUP_RESOURCES_PROTECTED_BY_CROSS_ACCOUNT",
          ControlScope: {
            ComplianceResourceTypes: [
              "RDS",
              "S3",
              "Aurora",
              "EFS",
              "EC2",
              "Storage Gateway",
              "EBS",
              "DynamoDB",
              "FSx",
              "VirtualMachine",
            ],
          },
        },
        {
          ControlInputParameters: [],
          ControlName: "BACKUP_RECOVERY_POINT_MANUAL_DELETION_DISABLED",
          ControlScope: {},
        },
        {
          ControlInputParameters: [
            {
              ParameterName: "requiredFrequencyUnit",
              ParameterValue: "days",
            },
            {
              ParameterName: "requiredRetentionDays",
              ParameterValue: "35",
            },
            {
              ParameterName: "requiredFrequencyValue",
              ParameterValue: "1",
            },
          ],
          ControlName: "BACKUP_PLAN_MIN_FREQUENCY_AND_MIN_RETENTION_CHECK",
          ControlScope: {},
        },
        {
          ControlInputParameters: [],
          ControlName: "BACKUP_RESOURCES_PROTECTED_BY_CROSS_REGION",
          ControlScope: {
            ComplianceResourceTypes: [
              "RDS",
              "S3",
              "Aurora",
              "EFS",
              "EC2",
              "Storage Gateway",
              "EBS",
              "DynamoDB",
              "FSx",
              "VirtualMachine",
            ],
          },
        },
      ],
      FrameworkDescription: "",
      FrameworkName: "myframework",
    }),
  },
  {
    type: "GlobalSettings",
    group: "Backup",
    properties: ({}) => ({
      isCrossAccountBackupEnabled: "true",
    }),
  },
  {
    type: "ReportPlan",
    group: "Backup",
    properties: ({}) => ({
      ReportDeliveryChannel: {
        Formats: ["CSV", "JSON"],
        S3BucketName: "gc-backup-reportplan-jobs",
        S3KeyPrefix: "jobs-report",
      },
      ReportPlanDescription: "",
      ReportPlanName: "backup_jobs_report_27_10_2022",
      ReportSetting: {
        FrameworkArns: [],
        ReportTemplate: "BACKUP_JOB_REPORT",
      },
      Tags: {
        mykey: "myvalue",
      },
    }),
    dependencies: ({}) => ({
      s3Bucket: "gc-backup-reportplan-jobs",
    }),
  },
  {
    type: "ReportPlan",
    group: "Backup",
    properties: ({ getId }) => ({
      ReportDeliveryChannel: {
        Formats: ["CSV", "JSON"],
        S3BucketName: "gc-backup-reportplan-jobs",
        S3KeyPrefix: "compliance",
      },
      ReportPlanDescription: "",
      ReportPlanName: "control_compliance_report_27_10_2022",
      ReportSetting: {
        FrameworkArns: [
          `${getId({
            type: "Framework",
            group: "Backup",
            name: "myframework",
          })}`,
        ],
        ReportTemplate: "CONTROL_COMPLIANCE_REPORT",
      },
    }),
    dependencies: ({}) => ({
      s3Bucket: "gc-backup-reportplan-jobs",
      frameworks: ["myframework"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "AWSBackupDefaultServiceRole",
      Description:
        "Provides AWS Backup permission to create backups and perform restores on your behalf across AWS services",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "backup.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSBackupServiceRolePolicyForBackup",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
        },
        {
          PolicyName: "AWSBackupServiceRolePolicyForRestores",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores",
        },
      ],
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: `config-bucket-${config.accountId()}`,
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "AWSConfigBucketPermissionsCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:GetBucketAcl",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketExistenceCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:ListBucket",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketDelivery",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:PutObject",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}/AWSLogs/${config.accountId()}/Config/*`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
                "s3:x-amz-acl": "bucket-owner-full-control",
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: "gc-backup-reportplan-jobs",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:role/aws-service-role/reports.backup.amazonaws.com/AWSServiceRoleForBackupReports`,
            },
            Action: "s3:PutObject",
            Resource: "arn:aws:s3:::gc-backup-reportplan-jobs/*",
            Condition: {
              StringEquals: {
                "s3:x-amz-acl": "bucket-owner-full-control",
              },
            },
          },
        ],
      },
    }),
  },
];
