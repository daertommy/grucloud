// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "ConfigurationRecorder",
    group: "Config",
    properties: ({ config }) => ({
      name: "default",
      recordingGroup: {
        allSupported: true,
        includeGlobalResourceTypes: false,
        resourceTypes: [],
      },
      roleARN: `arn:aws:iam::${config.accountId()}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig`,
    }),
  },
  {
    type: "ConfigurationRecorderStatus",
    group: "Config",
    properties: ({}) => ({
      recording: true,
    }),
    dependencies: ({}) => ({
      deliveryChannel: "default",
    }),
  },
  {
    type: "ConformancePack",
    group: "Config",
    properties: ({}) => ({
      ConformancePackInputParameters: [],
      ConformancePackName: "lambda-pack",
      TemplateBody: {
        AWSTemplateFormatVersion: "2010-09-09",
        Conditions: {
          lambdaFunctionSettingsCheckParamRuntime: {
            "Fn::Not": [
              {
                "Fn::Equals": [
                  "",
                  {
                    Ref: "LambdaFunctionSettingsCheckParamRuntime",
                  },
                ],
              },
            ],
          },
        },
        Description:
          "DO NOT MODIFY THIS STACK! This stack is managed by Config Conformance Packs.",
        Hooks: {},
        Mappings: {},
        Outputs: {},
        Parameters: {
          LambdaFunctionSettingsCheckParamRuntime: {
            Default:
              "nodejs16.x, nodejs14.x, nodejs12.x, python3.9, python3.8, python3.7, python3.6, ruby2.7, java11, java8, java8.al2, go1.x, dotnetcore3.1, dotnet6",
            Type: "String",
          },
        },
        Resources: {
          LambdaDlqCheck: {
            Properties: {
              ConfigRuleName: "lambda-dlq-check",
              Scope: {
                ComplianceResourceTypes: ["AWS::Lambda::Function"],
              },
              Source: {
                Owner: "AWS",
                SourceIdentifier: "LAMBDA_DLQ_CHECK",
              },
            },
            Type: "AWS::Config::ConfigRule",
          },
          LambdaFunctionSettingsCheck: {
            Properties: {
              ConfigRuleName: "lambda-function-settings-check",
              InputParameters: {
                runtime: {
                  "Fn::If": [
                    "lambdaFunctionSettingsCheckParamRuntime",
                    {
                      Ref: "LambdaFunctionSettingsCheckParamRuntime",
                    },
                    {
                      Ref: "AWS::NoValue",
                    },
                  ],
                },
              },
              Scope: {
                ComplianceResourceTypes: ["AWS::Lambda::Function"],
              },
              Source: {
                Owner: "AWS",
                SourceIdentifier: "LAMBDA_FUNCTION_SETTINGS_CHECK",
              },
            },
            Type: "AWS::Config::ConfigRule",
          },
          LambdaInsideVpc: {
            Properties: {
              ConfigRuleName: "lambda-inside-vpc",
              Scope: {
                ComplianceResourceTypes: ["AWS::Lambda::Function"],
              },
              Source: {
                Owner: "AWS",
                SourceIdentifier: "LAMBDA_INSIDE_VPC",
              },
            },
            Type: "AWS::Config::ConfigRule",
          },
          LambdaVpcMultiAzCheck: {
            Properties: {
              ConfigRuleName: "lambda-vpc-multi-az-check",
              Scope: {
                ComplianceResourceTypes: ["AWS::Lambda::Function"],
              },
              Source: {
                Owner: "AWS",
                SourceIdentifier: "LAMBDA_VPC_MULTI_AZ_CHECK",
              },
            },
            Type: "AWS::Config::ConfigRule",
          },
        },
        Rules: {},
      },
    }),
  },
  {
    type: "DeliveryChannel",
    group: "Config",
    properties: ({}) => ({
      name: "default",
    }),
    dependencies: ({ config }) => ({
      configurationRecorder: "default",
      s3Bucket: `config-bucket-${config.accountId()}`,
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: `config-bucket-${config.accountId()}`,
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "AWSConfigBucketPermissionsCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:GetBucketAcl",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketExistenceCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:ListBucket",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketDelivery",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:PutObject",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}/AWSLogs/${config.accountId()}/Config/*`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
                "s3:x-amz-acl": "bucket-owner-full-control",
              },
            },
          },
        ],
      },
    }),
  },
];
