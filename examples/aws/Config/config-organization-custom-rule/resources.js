// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "AggregationAuthorization",
    group: "Config",
    properties: ({}) => ({
      AuthorizedAwsRegion: "us-east-1",
    }),
    dependencies: ({}) => ({
      account: "test account",
    }),
  },
  {
    type: "AggregationAuthorization",
    group: "Config",
    properties: ({}) => ({
      AuthorizedAwsRegion: "us-east-2",
    }),
    dependencies: ({}) => ({
      account: "test account",
    }),
  },
  {
    type: "ConfigurationAggregator",
    group: "Config",
    properties: ({ config }) => ({
      ConfigurationAggregatorName: "my-aggregator",
      OrganizationAggregationSource: {
        AllAwsRegions: false,
        AwsRegions: ["us-east-1", "us-east-2"],
        RoleArn: `arn:aws:iam::${config.accountId()}:role/service-role/config-org`,
      },
    }),
    dependencies: ({}) => ({
      iamRole: "config-org",
    }),
  },
  {
    type: "ConfigurationRecorder",
    group: "Config",
    properties: ({ config }) => ({
      name: "default",
      recordingGroup: {
        allSupported: false,
        includeGlobalResourceTypes: false,
        resourceTypes: ["AWS::ApiGatewayV2::Api"],
      },
      roleARN: `arn:aws:iam::${config.accountId()}:role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig`,
    }),
  },
  {
    type: "ConfigurationRecorderStatus",
    group: "Config",
    properties: ({}) => ({
      recording: true,
    }),
    dependencies: ({}) => ({
      deliveryChannel: "default",
    }),
  },
  {
    type: "DeliveryChannel",
    group: "Config",
    properties: ({}) => ({
      name: "default",
    }),
    dependencies: ({ config }) => ({
      configurationRecorder: "default",
      s3Bucket: `config-bucket-${config.accountId()}`,
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "config-org",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations",
          PolicyName: "AWSConfigRoleForOrganizations",
        },
      ],
    }),
  },
  {
    type: "Account",
    group: "Organisations",
    name: "test account",
    readOnly: true,
    properties: ({}) => ({
      Email: "test@grucloud.com",
      Name: "test account",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: `config-bucket-${config.accountId()}`,
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "AWSConfigBucketPermissionsCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:GetBucketAcl",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketExistenceCheck",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:ListBucket",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
              },
            },
          },
          {
            Sid: "AWSConfigBucketDelivery",
            Effect: "Allow",
            Principal: {
              Service: "config.amazonaws.com",
            },
            Action: "s3:PutObject",
            Resource: `arn:aws:s3:::config-bucket-${config.accountId()}/AWSLogs/${config.accountId()}/Config/*`,
            Condition: {
              StringEquals: {
                "AWS:SourceAccount": `${config.accountId()}`,
                "s3:x-amz-acl": "bucket-owner-full-control",
              },
            },
          },
        ],
      },
    }),
  },
];
