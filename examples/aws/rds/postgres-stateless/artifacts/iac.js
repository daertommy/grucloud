// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  const { config } = provider;

  provider.ec2.makeVpc({
    name: config.ec2.Vpc.vpc.name,
    namespace: "VPC",
    properties: () => config.ec2.Vpc.vpc.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPrivateA.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPrivateB.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPublicA.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPublicB.properties,
  });

  provider.ec2.makeKeyPair({
    name: config.ec2.KeyPair.kpPostgresStateless.name,
  });

  provider.ec2.makeElasticIpAddress({
    name: config.ec2.ElasticIpAddress.eipBastion.name,
  });

  provider.ec2.makeElasticIpAddress({
    name: config.ec2.ElasticIpAddress.iep.name,
    namespace: "VPC",
  });

  provider.ec2.makeInternetGateway({
    name: config.ec2.InternetGateway.internetGateway.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeNatGateway({
    name: config.ec2.NatGateway.natGateway.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnetPublicA,
      eip: resources.ec2.ElasticIpAddress.iep,
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateA],
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateB],
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [
        resources.ec2.Subnet.subnetPublicB,
        resources.ec2.Subnet.subnetPublicA,
      ],
    }),
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateA,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
    properties: () => config.ec2.Route.routePrivateA.properties,
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateB,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
    properties: () => config.ec2.Route.routePrivateB.properties,
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePublic,
      ig: resources.ec2.InternetGateway.internetGateway,
    }),
    properties: () => config.ec2.Route.routePublic.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupPostgres.name,
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.SecurityGroup.securityGroupPostgres.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupPublic.name,
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.SecurityGroup.securityGroupPublic.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressPostgres.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupPostgres,
      securityGroupFrom: resources.ec2.SecurityGroup.securityGroupPublic,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressPostgres.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressSshBastion.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupPublic,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressSshBastion.properties,
  });

  provider.ec2.makeInstance({
    name: config.ec2.Instance.bastion.name,
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnetPublicA,
      keyPair: resources.ec2.KeyPair.kpPostgresStateless,
      eip: resources.ec2.ElasticIpAddress.eipBastion,
      securityGroups: [resources.ec2.SecurityGroup.securityGroupPublic],
    }),
    properties: () => config.ec2.Instance.bastion.properties,
  });

  provider.kms.useDefaultKey({
    name: config.kms.Key.aliasAwsRds.name,
  });

  provider.kms.makeKey({
    name: config.kms.Key.eksKey.name,
    properties: () => config.kms.Key.eksKey.properties,
  });

  provider.kms.makeKey({
    name: config.kms.Key.secretKeyTest.name,
    properties: () => config.kms.Key.secretKeyTest.properties,
  });

  provider.rds.makeDBCluster({
    name: config.rds.DBCluster.clusterPostgresStateless.name,
    dependencies: ({ resources }) => ({
      dbSubnetGroup: resources.rds.DBSubnetGroup.subnetGroupPostgresStateless,
      securityGroups: [resources.ec2.SecurityGroup.securityGroupPostgres],
    }),
    properties: () => config.rds.DBCluster.clusterPostgresStateless.properties,
  });

  provider.rds.makeDBSubnetGroup({
    name: config.rds.DBSubnetGroup.subnetGroupPostgresStateless.name,
    dependencies: ({ resources }) => ({
      subnets: [
        resources.ec2.Subnet.subnetPrivateB,
        resources.ec2.Subnet.subnetPrivateA,
      ],
    }),
    properties: () =>
      config.rds.DBSubnetGroup.subnetGroupPostgresStateless.properties,
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
