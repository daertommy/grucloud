// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-LambdaFunctionRole-YMWBBKBCXQ69",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "mediaconvert:CreateJob",
                  "mediaconvert:DescribeEndpoints",
                ],
                Resource: ["*"],
                Effect: "Allow",
              },
              {
                Action: ["iam:PassRole"],
                Resource: [
                  `arn:aws:iam::${config.accountId()}:role/sam-app-MediaConvertRole-1GZUZLY1QYHQ9`,
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "LambdaFunctionRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-MediaConvertRole-1GZUZLY1QYHQ9",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "mediaconvert.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess",
          PolicyName: "AmazonAPIGatewayInvokeFullAccess",
        },
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          PolicyName: "AmazonS3FullAccess",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({ config }) => ({
      Configuration: {
        Environment: {
          Variables: {
            DestinationBucket: "sam-app-videooutput-1de7ubqosy7ld",
            MediaConvertRole: `arn:aws:iam::${config.accountId()}:role/sam-app-MediaConvertRole-1GZUZLY1QYHQ9`,
          },
        },
        FunctionName: "sam-app-LambdaFunction-5x7IftvddoxF",
        Handler: "index.handler",
        Runtime: "python3.9",
        Timeout: 120,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-LambdaFunctionRole-YMWBBKBCXQ69",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({}) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "sam-app-LambdaFunction-5x7IftvddoxF",
          Principal: "s3.amazonaws.com",
          StatementId: "sam-app-LambdaFunctionS3EventPermission-120JS3MADY539",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-LambdaFunction-5x7IftvddoxF",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: "sam-app-videoinput-1m6aten2xp1ko",
      NotificationConfiguration: {
        LambdaFunctionConfigurations: [
          {
            LambdaFunctionArn: `arn:aws:lambda:${
              config.region
            }:${config.accountId()}:function:sam-app-LambdaFunction-5x7IftvddoxF`,
            Events: ["s3:ObjectCreated:*"],
          },
        ],
      },
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({}) => ({
      Name: "sam-app-videooutput-1de7ubqosy7ld",
    }),
  },
];
