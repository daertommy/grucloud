// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "object",
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "S3LambdaDynamodbCdkStack-BucketNotificationsHandle-MRVXW5TOLKZH",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "s3:PutBucketNotification",
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "S3LambdaDynamodbCdkStack-dataloadFnRole589DCD9F-1GJ119GQOAREN",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
          {
            Effect: "Allow",
            Principal: {
              Service: "s3.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: ["dynamodb:PutItem", "dynamodb:BatchWriteItem"],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "dataloadFnRoleDefaultPolicy18C21B8C",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
          PolicyName: "AmazonS3ReadOnlyAccess",
        },
        {
          PolicyArn: "arn:aws:iam::aws:policy/AWSLambdaInvocation-DynamoDB",
          PolicyName: "AWSLambdaInvocation-DynamoDB",
        },
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description:
          'AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)',
        FunctionName:
          "S3LambdaDynamodbCdkStack-BucketNotificationsHandle-aXy3EfjTqVMi",
        Handler: "index.handler",
        Runtime: "python3.7",
        Timeout: 300,
      },
    }),
    dependencies: ({}) => ({
      role: "S3LambdaDynamodbCdkStack-BucketNotificationsHandle-MRVXW5TOLKZH",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            bucket:
              "s3lambdadynamodbcdkstack-s3lambdaddbcdkc208e71f-1halzsydjpaor",
            key: "object.csv",
            table: "object",
          },
        },
        FunctionName: "S3LambdaDynamodbCdkStack-dataloadD006E5C2-gtXcpb19cPHr",
        Handler: "data-load.handler",
        Runtime: "python3.7",
        Timeout: 300,
      },
    }),
    dependencies: ({}) => ({
      role: "S3LambdaDynamodbCdkStack-dataloadFnRole589DCD9F-1GJ119GQOAREN",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({}) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "S3LambdaDynamodbCdkStack-dataloadD006E5C2-gtXcpb19cPHr",
          Principal: "s3.amazonaws.com",
          SourceArn:
            "arn:aws:s3:::s3lambdadynamodbcdkstack-s3lambdaddbcdkc208e71f-1halzsydjpaor",
          StatementId:
            "S3LambdaDynamodbCdkStack-dataloadInvokeServicePrincipals3amazonawscom645984A8-1BGJA5IHT4DDC",
        },
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "S3LambdaDynamodbCdkStack-dataloadD006E5C2-gtXcpb19cPHr",
          Principal: "s3.amazonaws.com",
          SourceArn:
            "arn:aws:s3:::s3lambdadynamodbcdkstack-s3lambdaddbcdkc208e71f-1halzsydjpaor",
          StatementId:
            "S3LambdaDynamodbCdkStack-s3lambdaddbcdkAllowBucketNotificationsToS3LambdaDynamodbCdkSt-17WSJ80917ZAK",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "S3LambdaDynamodbCdkStack-dataloadD006E5C2-gtXcpb19cPHr",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: "s3lambdadynamodbcdkstack-s3lambdaddbcdkc208e71f-1halzsydjpaor",
      NotificationConfiguration: {
        LambdaFunctionConfigurations: [
          {
            LambdaFunctionArn: `arn:aws:lambda:${
              config.region
            }:${config.accountId()}:function:S3LambdaDynamodbCdkStack-dataloadD006E5C2-gtXcpb19cPHr`,
            Events: ["s3:ObjectCreated:*"],
            Filter: {
              Key: {
                FilterRules: [
                  {
                    Name: "Prefix",
                    Value: "object.csv",
                  },
                ],
              },
            },
          },
        ],
      },
    }),
  },
];
