// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.IAM.usePolicy({
    name: get(
      "config.IAM.Policy.serviceRoleAmazonEc2ContainerServiceforEc2Role.name"
    ),
    properties: get(
      "config.IAM.Policy.serviceRoleAmazonEc2ContainerServiceforEc2Role.properties"
    ),
  });

  provider.IAM.makeRole({
    name: get("config.IAM.Role.ecsInstanceRole.name"),
    properties: get("config.IAM.Role.ecsInstanceRole.properties"),
    dependencies: ({ resources }) => ({
      policies: [
        resources.IAM.Policy.serviceRoleAmazonEc2ContainerServiceforEc2Role,
      ],
    }),
  });

  provider.IAM.makeInstanceProfile({
    name: get("config.IAM.InstanceProfile.ecsInstanceRole.name"),
    dependencies: ({ resources }) => ({
      roles: [resources.IAM.Role.ecsInstanceRole],
    }),
  });

  provider.EC2.makeVpc({
    name: get("config.EC2.Vpc.vpc.name"),
    properties: get("config.EC2.Vpc.vpc.properties"),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.pubSubnetAz1.name"),
    properties: get("config.EC2.Subnet.pubSubnetAz1.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.pubSubnetAz2.name"),
    properties: get("config.EC2.Subnet.pubSubnetAz2.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeInternetGateway({
    name: get("config.EC2.InternetGateway.internetGateway.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeRouteTable({
    name: get("config.EC2.RouteTable.routeViaIgw.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [
        resources.EC2.Subnet.pubSubnetAz1,
        resources.EC2.Subnet.pubSubnetAz2,
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: get("config.EC2.Route.routeViaIgwIgw.name"),
    properties: get("config.EC2.Route.routeViaIgwIgw.properties"),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeViaIgw,
      ig: resources.EC2.InternetGateway.internetGateway,
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: get("config.EC2.SecurityGroup.ecsSecurityGroup.name"),
    properties: get("config.EC2.SecurityGroup.ecsSecurityGroup.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: get(
      "config.EC2.SecurityGroupRuleIngress.ecsSecurityGroupRuleIngressTcp_80V4.name"
    ),
    properties: get(
      "config.EC2.SecurityGroupRuleIngress.ecsSecurityGroupRuleIngressTcp_80V4.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.ecsSecurityGroup,
    }),
  });

  provider.AutoScaling.makeAutoScalingGroup({
    name: get("config.AutoScaling.AutoScalingGroup.ecsInstanceAsg.name"),
    properties: get(
      "config.AutoScaling.AutoScalingGroup.ecsInstanceAsg.properties"
    ),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet.pubSubnetAz1,
        resources.EC2.Subnet.pubSubnetAz2,
      ],
      launchConfiguration:
        resources.AutoScaling.LaunchConfiguration
          .ec2ContainerServiceClusterEcsInstanceLcCoyk3Cqz0Qrj,
    }),
  });

  provider.AutoScaling.makeLaunchConfiguration({
    name: get(
      "config.AutoScaling.LaunchConfiguration.ec2ContainerServiceClusterEcsInstanceLcCoyk3Cqz0Qrj.name"
    ),
    properties: get(
      "config.AutoScaling.LaunchConfiguration.ec2ContainerServiceClusterEcsInstanceLcCoyk3Cqz0Qrj.properties"
    ),
    dependencies: ({ resources }) => ({
      instanceProfile: resources.IAM.InstanceProfile.ecsInstanceRole,
      securityGroups: [resources.EC2.SecurityGroup.ecsSecurityGroup],
    }),
  });

  provider.ECS.makeCluster({
    name: get("config.ECS.Cluster.cluster.name"),
    properties: get("config.ECS.Cluster.cluster.properties"),
    dependencies: ({ resources }) => ({
      capacityProviders: [resources.ECS.CapacityProvider.cp],
    }),
  });

  provider.ECS.makeCapacityProvider({
    name: get("config.ECS.CapacityProvider.cp.name"),
    properties: get("config.ECS.CapacityProvider.cp.properties"),
    dependencies: ({ resources }) => ({
      autoScalingGroup: resources.AutoScaling.AutoScalingGroup.ecsInstanceAsg,
    }),
  });

  provider.ECS.makeTaskDefinition({
    name: get("config.ECS.TaskDefinition.nginx.name"),
    properties: get("config.ECS.TaskDefinition.nginx.properties"),
  });

  provider.ECS.makeService({
    name: get("config.ECS.Service.serviceNginx.name"),
    properties: get("config.ECS.Service.serviceNginx.properties"),
    dependencies: ({ resources }) => ({
      cluster: resources.ECS.Cluster.cluster,
      taskDefinition: resources.ECS.TaskDefinition.nginx,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
