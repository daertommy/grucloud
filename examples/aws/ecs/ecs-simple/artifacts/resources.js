// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.AutoScaling.makeAutoScalingGroup({
    name: "EcsInstanceAsg",
    properties: ({}) => ({
      MinSize: 0,
      MaxSize: 1,
      DesiredCapacity: 1,
      HealthCheckGracePeriod: 0,
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet["PubSubnetAz1"],
        resources.EC2.Subnet["PubSubnetAz2"],
      ],
      launchConfiguration:
        resources.AutoScaling.LaunchConfiguration[
          "EC2ContainerService-cluster-EcsInstanceLc-COYK3CQZ0QRJ"
        ],
    }),
  });

  provider.AutoScaling.makeLaunchConfiguration({
    name: "EC2ContainerService-cluster-EcsInstanceLc-COYK3CQZ0QRJ",
    properties: ({}) => ({
      InstanceType: "t2.micro",
      ImageId: "ami-02e136e904f3da870",
      UserData:
        'Content-Type: multipart/mixed; boundary="1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3"\nMIME-Version: 1.0\n\n--1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3\nContent-Type: text/text/x-shellscript; charset="utf-8"\nMime-Version: 1.0\n\n\n#!/bin/bash\necho ECS_CLUSTER=cluster >> /etc/ecs/ecs.config\necho \'ECS_CONTAINER_INSTANCE_TAGS={"my-tag":"my-value"}\' >> /etc/ecs/ecs.config\n--1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3--',
      InstanceMonitoring: {
        Enabled: true,
      },
      BlockDeviceMappings: [
        {
          DeviceName: "/dev/xvda",
          Ebs: {
            VolumeSize: 30,
            VolumeType: "gp2",
          },
        },
      ],
      EbsOptimized: false,
    }),
    dependencies: ({ resources }) => ({
      instanceProfile: resources.IAM.InstanceProfile["ecsInstanceRole"],
      securityGroups: [resources.EC2.SecurityGroup["EcsSecurityGroup"]],
    }),
  });

  provider.EC2.makeVpc({
    name: "Vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "InternetGateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "PubSubnetAz1",
    properties: ({ config }) => ({
      CidrBlock: "10.0.0.0/24",
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "PubSubnetAz2",
    properties: ({ config }) => ({
      CidrBlock: "10.0.1.0/24",
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "RouteViaIgw",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      subnet: resources.EC2.Subnet["PubSubnetAz1"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      subnet: resources.EC2.Subnet["PubSubnetAz2"],
    }),
  });

  provider.EC2.makeRoute({
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      ig: resources.EC2.InternetGateway["InternetGateway"],
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "EcsSecurityGroup",
    properties: ({}) => ({
      Description: "Managed By GruCloud",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "EcsSecurityGroup-rule-ingress-tcp-80-v4",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 80,
        ToPort: 80,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup["EcsSecurityGroup"],
    }),
  });

  provider.ECS.makeCapacityProvider({
    name: "cp",
    properties: ({}) => ({
      autoScalingGroupProvider: {
        managedScaling: {
          status: "ENABLED",
          targetCapacity: 100,
          minimumScalingStepSize: 1,
          maximumScalingStepSize: 10000,
          instanceWarmupPeriod: 300,
        },
        managedTerminationProtection: "DISABLED",
      },
    }),
    dependencies: ({ resources }) => ({
      autoScalingGroup:
        resources.AutoScaling.AutoScalingGroup["EcsInstanceAsg"],
    }),
  });

  provider.ECS.makeCluster({
    name: "cluster",
    properties: ({}) => ({
      settings: [
        {
          name: "containerInsights",
          value: "enabled",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      capacityProviders: [resources.ECS.CapacityProvider["cp"]],
    }),
  });

  provider.ECS.makeTaskDefinition({
    name: "nginx",
    properties: ({}) => ({
      containerDefinitions: [
        {
          name: "nginx",
          image: "nginx",
          cpu: 0,
          memory: 512,
          portMappings: [
            {
              containerPort: 80,
              hostPort: 80,
              protocol: "tcp",
            },
          ],
          essential: true,
          environment: [],
          mountPoints: [],
          volumesFrom: [],
        },
      ],
      placementConstraints: [],
      requiresCompatibilities: ["EC2"],
    }),
  });

  provider.ECS.makeService({
    name: "service-nginx",
    properties: ({}) => ({
      launchType: "EC2",
      desiredCount: 1,
      deploymentConfiguration: {
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 200,
        minimumHealthyPercent: 100,
      },
      placementConstraints: [],
      placementStrategy: [
        {
          type: "spread",
          field: "attribute:ecs.availability-zone",
        },
        {
          type: "spread",
          field: "instanceId",
        },
      ],
      schedulingStrategy: "REPLICA",
      enableECSManagedTags: true,
      enableExecuteCommand: false,
    }),
    dependencies: ({ resources }) => ({
      cluster: resources.ECS.Cluster["cluster"],
      taskDefinition: resources.ECS.TaskDefinition["nginx"],
    }),
  });

  provider.IAM.makeRole({
    name: "ecsInstanceRole",
    properties: ({}) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [
        resources.IAM.Policy[
          "service-role/AmazonEC2ContainerServiceforEC2Role"
        ],
      ],
    }),
  });

  provider.IAM.usePolicy({
    name: "service-role/AmazonEC2ContainerServiceforEC2Role",
    properties: ({}) => ({
      Arn: "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
    }),
  });

  provider.IAM.makeInstanceProfile({
    name: "ecsInstanceRole",
    dependencies: ({ resources }) => ({
      roles: [resources.IAM.Role["ecsInstanceRole"]],
    }),
  });
};

exports.createResources = createResources;
