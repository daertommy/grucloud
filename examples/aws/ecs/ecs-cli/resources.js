// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.AutoScaling.makeAutoScalingGroup({
    name: "amazon-ecs-cli-setup-my-cluster-EcsInstanceAsg-FJVD23F7MHXY",
    properties: ({ config }) => ({
      MinSize: 0,
      MaxSize: 1,
      DesiredCapacity: 1,
      HealthCheckGracePeriod: 0,
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet["PubSubnetAz1"],
        resources.EC2.Subnet["PubSubnetAz2"],
      ],
      launchConfiguration:
        resources.AutoScaling.LaunchConfiguration[
          "amazon-ecs-cli-setup-my-cluster-EcsInstanceLc-S7O7EVIS98IV"
        ],
    }),
  });

  provider.AutoScaling.makeLaunchConfiguration({
    name: "amazon-ecs-cli-setup-my-cluster-EcsInstanceLc-S7O7EVIS98IV",
    properties: ({ config }) => ({
      InstanceType: "t2.small",
      ImageId: "ami-0e43fd2a4ef14f476",
      UserData:
        'Content-Type: multipart/mixed; boundary="1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3"\nMIME-Version: 1.0\n\n--1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3\nContent-Type: text/text/x-shellscript; charset="utf-8"\nMime-Version: 1.0\n\n\n#!/bin/bash\necho ECS_CLUSTER=my-cluster >> /etc/ecs/ecs.config\necho \'ECS_CONTAINER_INSTANCE_TAGS={"my-tag":"my-value"}\' >> /etc/ecs/ecs.config\n--1f15191e3fe7ebb2094282e32ea108217183e16f27f6e8aa0b886ee04ec3--',
      InstanceMonitoring: {
        Enabled: true,
      },
      BlockDeviceMappings: [],
      EbsOptimized: false,
      AssociatePublicIpAddress: true,
    }),
    dependencies: ({ resources }) => ({
      instanceProfile:
        resources.IAM.InstanceProfile[
          "amazon-ecs-cli-setup-my-cluster-EcsInstanceProfile-ESJBS99JRKVK"
        ],
      securityGroups: [resources.EC2.SecurityGroup["EcsSecurityGroup"]],
    }),
  });

  provider.EC2.makeVpc({
    name: "Vpc",
    properties: ({ config }) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "InternetGateway",
    properties: ({ config }) => ({
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "PubSubnetAz1",
    properties: ({ config }) => ({
      CidrBlock: "10.0.0.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "PubSubnetAz2",
    properties: ({ config }) => ({
      CidrBlock: "10.0.1.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "RouteViaIgw",
    properties: ({ config }) => ({
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      subnet: resources.EC2.Subnet["PubSubnetAz1"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      subnet: resources.EC2.Subnet["PubSubnetAz2"],
    }),
  });

  provider.EC2.makeRoute({
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["RouteViaIgw"],
      ig: resources.EC2.InternetGateway["InternetGateway"],
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "EcsSecurityGroup",
    properties: ({ config }) => ({
      Description: "ECS Allowed Ports",
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["Vpc"],
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "EcsSecurityGroup-rule-ingress-tcp-80-v4",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 80,
        ToPort: 80,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup["EcsSecurityGroup"],
    }),
  });

  provider.ECS.makeCluster({
    name: "my-cluster",
    properties: ({ config }) => ({
      settings: [
        {
          name: "containerInsights",
          value: "disabled",
        },
      ],
    }),
  });

  provider.IAM.makeRole({
    name: "amazon-ecs-cli-setup-my-cluster-EcsInstanceRole-14B4COKG08FT6",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Tags: [
        {
          Key: "my-tag",
          Value: "my-value",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      policies: [resources.IAM.Policy["AmazonEC2ContainerServiceforEC2Role"]],
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEC2ContainerServiceforEC2Role",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
    }),
  });

  provider.IAM.makeInstanceProfile({
    name: "amazon-ecs-cli-setup-my-cluster-EcsInstanceProfile-ESJBS99JRKVK",
    dependencies: ({ resources }) => ({
      roles: [
        resources.IAM.Role[
          "amazon-ecs-cli-setup-my-cluster-EcsInstanceRole-14B4COKG08FT6"
        ],
      ],
    }),
  });
};

exports.createResources = createResources;
