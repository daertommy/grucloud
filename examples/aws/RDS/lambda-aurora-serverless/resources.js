// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "sam-app-LambdaFunctionRole-1H8HS58WE9MGP",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["secretsmanager:GetSecretValue"],
                Effect: "Allow",
                Resource: `${getId({
                  type: "Secret",
                  group: "SecretsManager",
                  name: "aurora-test-cluster-AuroraUserSecret",
                  path: "live.ARN",
                })}`,
              },
            ],
          },
          PolicyName: "LambdaFunctionRolePolicy0",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: "rds-data:ExecuteStatement",
                Effect: "Allow",
                Resource: `${getId({
                  type: "DBCluster",
                  group: "RDS",
                  name: "aurora-test-cluster",
                  path: "live.DBClusterArn",
                })}`,
              },
            ],
          },
          PolicyName: "LambdaFunctionRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
    dependencies: ({}) => ({
      rdsDbClusters: ["aurora-test-cluster"],
      secretsManagerSecrets: ["aurora-test-cluster-AuroraUserSecret"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({ getId }) => ({
      Configuration: {
        Environment: {
          Variables: {
            DBClusterArn: `${getId({
              type: "DBCluster",
              group: "RDS",
              name: "aurora-test-cluster",
              path: "live.DBClusterArn",
            })}`,
            DBName: "aurora_test_db",
            SecretArn: `${getId({
              type: "Secret",
              group: "SecretsManager",
              name: "aurora-test-cluster-AuroraUserSecret",
              path: "live.ARN",
            })}`,
          },
        },
        FunctionName: "aurora-test-cluster-function",
        Handler: "app.handler",
        Runtime: "nodejs14.x",
        Timeout: 30,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-LambdaFunctionRole-1H8HS58WE9MGP",
      rdsDbClusters: ["aurora-test-cluster"],
      secretsManagerSecrets: ["aurora-test-cluster-AuroraUserSecret"],
    }),
  },
  {
    type: "DBCluster",
    group: "RDS",
    properties: ({}) => ({
      BackupRetentionPeriod: 1,
      DatabaseName: "aurora_test_db",
      DBClusterIdentifier: "aurora-test-cluster",
      DeletionProtection: false,
      Engine: "aurora",
      EngineMode: "serverless",
      EngineVersion: "5.6.mysql_aurora.1.22.3",
      HttpEndpointEnabled: false,
      IAMDatabaseAuthenticationEnabled: false,
      MasterUsername: process.env.AURORA_TEST_CLUSTER_MASTER_USERNAME,
      Port: 3306,
      PreferredBackupWindow: "08:55-09:25",
      PreferredMaintenanceWindow: "thu:08:21-thu:08:51",
      ScalingConfiguration: {
        AutoPause: true,
        MaxCapacity: 2,
        MinCapacity: 1,
        SecondsBeforeTimeout: 300,
        SecondsUntilAutoPause: 3600,
        TimeoutAction: "RollbackCapacityChange",
      },
      MasterUserPassword: process.env.AURORA_TEST_CLUSTER_MASTER_USER_PASSWORD,
    }),
    dependencies: ({}) => ({
      secret: "aurora-test-cluster-AuroraUserSecret",
    }),
  },
  {
    type: "Secret",
    group: "SecretsManager",
    properties: ({ generatePassword }) => ({
      Description: "RDS database auto-generated user password",
      Name: "aurora-test-cluster-AuroraUserSecret",
      SecretString: {
        password: generatePassword({ length: 30 }),
        port: 3306,
        username: "admin_user",
      },
    }),
  },
];
