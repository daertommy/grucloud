// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.EC2.makeInstance({
    name: "web-iam",
    properties: ({}) => ({
      InstanceType: "t2.micro",
      ImageId: "ami-02e136e904f3da870",
    }),
    dependencies: ({ resources }) => ({
      iamInstanceProfile: resources.IAM.InstanceProfile["my-profile"],
    }),
  });

  provider.IAM.makeUser({
    name: "Alice",
    properties: ({}) => ({
      Path: "/",
    }),
    dependencies: ({ resources }) => ({
      iamGroups: [resources.IAM.Group["Admin"]],
      policies: [resources.IAM.Policy["myPolicy-to-user"]],
    }),
  });

  provider.IAM.makeGroup({
    name: "Admin",
    properties: ({}) => ({
      Path: "/",
    }),
    dependencies: ({ resources }) => ({
      policies: [resources.IAM.Policy["myPolicy-to-group"]],
    }),
  });

  provider.IAM.makeRole({
    name: "role-allow-assume-role",
    properties: ({}) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [
        resources.IAM.Policy["AmazonEKSWorkerNodePolicy"],
        resources.IAM.Policy["myPolicy-to-role"],
      ],
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEKSWorkerNodePolicy",
    properties: ({}) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
    }),
  });

  provider.IAM.makePolicy({
    name: "myPolicy-to-group",
    properties: ({}) => ({
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Action: ["s3:*"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
      },
      Path: "/",
      Description: "Allow ec2:Describe",
    }),
  });

  provider.IAM.makePolicy({
    name: "myPolicy-to-role",
    properties: ({}) => ({
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Action: ["s3:*"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
      },
      Path: "/",
      Description: "Allow ec2:Describe",
    }),
  });

  provider.IAM.makePolicy({
    name: "myPolicy-to-user",
    properties: ({}) => ({
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Action: ["s3:*"],
            Effect: "Allow",
            Resource: "*",
          },
        ],
      },
      Path: "/",
      Description: "Allow ec2:Describe",
    }),
  });

  provider.IAM.makeInstanceProfile({
    name: "my-profile",
    dependencies: ({ resources }) => ({
      roles: [resources.IAM.Role["role-allow-assume-role"]],
    }),
  });
};

exports.createResources = createResources;
