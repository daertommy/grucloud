// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  const { config } = provider;

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksWorkerNodePolicy.name,
    properties: () => config.iam.Policy.amazonEksWorkerNodePolicy.properties,
  });

  provider.iam.makePolicy({
    name: config.iam.Policy.lambdaPolicy.name,
    properties: () => config.iam.Policy.lambdaPolicy.properties,
  });

  provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToGroup.name,
    properties: () => config.iam.Policy.myPolicyToGroup.properties,
  });

  provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToRole.name,
    properties: () => config.iam.Policy.myPolicyToRole.properties,
  });

  provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToUser.name,
    properties: () => config.iam.Policy.myPolicyToUser.properties,
  });

  provider.iam.makeUser({
    name: config.iam.User.alice.name,
    dependencies: ({ resources }) => ({
      iamGroups: [resources.iam.Group.admin],
      policies: [resources.iam.Policy.myPolicyToUser],
    }),
    properties: () => config.iam.User.alice.properties,
  });

  provider.iam.makeGroup({
    name: config.iam.Group.admin.name,
    dependencies: ({ resources }) => ({
      policies: [resources.iam.Policy.myPolicyToGroup],
    }),
    properties: () => config.iam.Group.admin.properties,
  });

  provider.iam.makeRole({
    name: config.iam.Role.lambdaRole.name,
    dependencies: ({ resources }) => ({
      policies: [resources.iam.Policy.lambdaPolicy],
    }),
    properties: () => config.iam.Role.lambdaRole.properties,
  });

  provider.iam.makeRole({
    name: config.iam.Role.roleAllowAssumeRole.name,
    dependencies: ({ resources }) => ({
      policies: [
        resources.iam.Policy.myPolicyToRole,
        resources.iam.Policy.amazonEksWorkerNodePolicy,
      ],
    }),
    properties: () => config.iam.Role.roleAllowAssumeRole.properties,
  });

  provider.iam.makeInstanceProfile({
    name: config.iam.InstanceProfile.myProfile.name,
    dependencies: ({ resources }) => ({
      roles: [resources.iam.Role.roleAllowAssumeRole],
    }),
  });

  provider.ec2.makeInstance({
    name: config.ec2.Instance.webIam.name,
    dependencies: ({ resources }) => ({
      iamInstanceProfile: resources.iam.InstanceProfile.myProfile,
    }),
    properties: () => config.ec2.Instance.webIam.properties,
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
