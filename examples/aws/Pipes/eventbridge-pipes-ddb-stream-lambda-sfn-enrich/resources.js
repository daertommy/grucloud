// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "stepfunctions/StateMachine",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "SampleTable",
      AttributeDefinitions: [
        {
          AttributeName: "PK",
          AttributeType: "S",
        },
        {
          AttributeName: "SK",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "PK",
          KeyType: "HASH",
        },
        {
          AttributeName: "SK",
          KeyType: "RANGE",
        },
      ],
      ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5,
      },
      StreamSpecification: {
        StreamEnabled: true,
        StreamViewType: "NEW_IMAGE",
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-EnrichmentStateMachineRole-1CSLFSVO8ZHVT",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "states.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "logs:CreateLogDelivery",
                  "logs:GetLogDelivery",
                  "logs:UpdateLogDelivery",
                  "logs:DeleteLogDelivery",
                  "logs:ListLogDeliveries",
                  "logs:PutResourcePolicy",
                  "logs:DescribeResourcePolicies",
                  "logs:DescribeLogGroups",
                ],
                Effect: "Allow",
                Resource: "*",
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "CloudWatchLogs",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config, getId }) => ({
      RoleName: "sam-app-PipeRole-3TWYQY17M651",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "pipes.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["states:StartExecution", "states:StartSyncExecution"],
                Effect: "Allow",
                Resource: `arn:aws:states:${
                  config.region
                }:${config.accountId()}:stateMachine:EnrichmentStateMachine-uACOjGX6Zbhn`,
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "EnrichmentPolicy",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "dynamodb:DescribeStream",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:ListStreams",
                ],
                Effect: "Allow",
                Resource: `${getId({
                  type: "Table",
                  group: "DynamoDB",
                  name: "SampleTable",
                  path: "live.LatestStreamArn",
                })}`,
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "SourcePolicy",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["lambda:InvokeFunction"],
                Effect: "Allow",
                Resource: `arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:sam-app-target-lambda`,
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "TargetPolicy",
        },
      ],
    }),
    dependencies: ({}) => ({
      dynamoDbTables: ["SampleTable"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-TargetRole-PV9BQWKMZUCP",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Architectures: ["arm64"],
        FunctionName: "sam-app-target-lambda",
        Handler: "lambda_function.lambda_handler",
        Runtime: "python3.9",
        Timeout: 15,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-TargetRole-PV9BQWKMZUCP",
    }),
  },
  {
    type: "Pipe",
    group: "Pipes",
    properties: ({}) => ({
      Description:
        "Pipe to connect DynamoDB Stream to AWS Lambda with filtering and enrichment",
      EnrichmentParameters: {
        InputTemplate:
          '{ "PK": <$.dynamodb.NewImage.PK.S>, "SK": <$.dynamodb.NewImage.SK.S> }',
      },
      Name: "ddb-to-lambda-enrichment",
      SourceParameters: {
        DynamoDBStreamParameters: {
          BatchSize: 1,
          StartingPosition: "LATEST",
        },
        FilterCriteria: {
          Filters: [
            {
              Pattern: {
                dynamodb: {
                  NewImage: {
                    messageId: {
                      S: [
                        {
                          exists: true,
                        },
                      ],
                    },
                    PK: {
                      S: [
                        {
                          prefix: "Message#",
                        },
                      ],
                    },
                    SK: {
                      S: [
                        {
                          prefix: "Channel#",
                        },
                      ],
                    },
                  },
                },
                eventName: ["INSERT"],
              },
            },
          ],
        },
      },
    }),
    dependencies: ({}) => ({
      iamRole: "sam-app-PipeRole-3TWYQY17M651",
      sourceDynamoDB: "SampleTable",
      enrichmentStepFunctionsStateMachine:
        "EnrichmentStateMachine-uACOjGX6Zbhn",
      targetLambdaFunction: "sam-app-target-lambda",
    }),
  },
  {
    type: "StateMachine",
    group: "StepFunctions",
    properties: ({ getId }) => ({
      definition: {
        Comment: "A description of my state machine",
        StartAt: "Wait",
        States: {
          Wait: {
            Type: "Wait",
            Seconds: 30,
            Next: "Success",
          },
          Success: {
            Type: "Succeed",
            Comment: "This is working as expected",
          },
        },
      },
      loggingConfiguration: {
        destinations: [
          {
            cloudWatchLogsLogGroup: {
              logGroupArn: `${getId({
                type: "LogGroup",
                group: "CloudWatchLogs",
                name: "stepfunctions/StateMachine",
              })}:*`,
            },
          },
        ],
        includeExecutionData: true,
        level: "ALL",
      },
      name: "EnrichmentStateMachine-uACOjGX6Zbhn",
      type: "EXPRESS",
    }),
    dependencies: ({}) => ({
      role: "sam-app-EnrichmentStateMachineRole-1CSLFSVO8ZHVT",
      logGroups: ["stepfunctions/StateMachine"],
    }),
  },
];
