// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "App",
    group: "Amplify",
    properties: ({ config, getId }) => ({
      customHeaders: "",
      customRules: [
        {
          source:
            "</^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf)$)([^.]+$)/>",
          status: "200",
          target: "/index.html",
        },
      ],
      description: "Matching Tool",
      enableAutoBranchCreation: false,
      enableBasicAuth: false,
      enableBranchAutoBuild: false,
      enableBranchAutoDeletion: false,
      environmentVariables: {
        APIURL: `${getId({
          type: "RestApi",
          group: "APIGateway",
          name: "sam-app",
          path: "live.url",
        })}/dev`,
        cognito_region: `${config.region}`,
        user_pools_id: `${getId({
          type: "UserPool",
          group: "CognitoIdentityServiceProvider",
          name: "rUserPool-8B26tyJUtyPT",
        })}`,
        user_pools_web_client_id: `${getId({
          type: "UserPoolClient",
          group: "CognitoIdentityServiceProvider",
          name: "rAmplifyCognitoClient-ibY06BoiCQIZ",
        })}`,
      },
      name: "sam-app",
      platform: "WEB",
      repository: "https://github.com/FredericHeem/amplify-js-samples",
      repositoryCloneMethod: "SSH",
      accessToken: process.env.SAM_APP_APP_ACCESSTOKEN,
    }),
    dependencies: ({}) => ({
      iamRole: "sam-app-rAmplifyRole-EYPC57CYZ7VI",
      apiGatewayRestApis: ["sam-app"],
      cognitoUserPools: ["rUserPool-8B26tyJUtyPT"],
      cognitoUserPoolClient: ["rAmplifyCognitoClient-ibY06BoiCQIZ"],
    }),
  },
  {
    type: "Branch",
    group: "Amplify",
    properties: ({}) => ({
      branchName: "main",
      description: "Branch",
      displayName: "main",
      stage: "DEVELOPMENT",
    }),
    dependencies: ({}) => ({
      app: "sam-app",
    }),
  },
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ config, getId }) => ({
      apiKeySource: "HEADER",
      endpointConfiguration: {
        types: ["EDGE"],
      },
      name: "sam-app",
      schema: {
        openapi: "3.0.1",
        info: {
          title: "sam-app",
          version: "1",
        },
        paths: {
          "/": {},
          "/lambdaExample": {
            get: {
              "x-amazon-apigateway-auth": {
                type: "COGNITO_USER_POOLS",
              },
              security: [
                {
                  MyCognitoAuthorizer: [],
                },
              ],
              "x-amazon-apigateway-integration": {
                httpMethod: "POST",
                passthroughBehavior: "WHEN_NO_MATCH",
                type: "AWS_PROXY",
                uri: `arn:aws:apigateway:${
                  config.region
                }:lambda:path/2015-03-31/functions/arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:sam-app-myFunction-aLIRAYWnDVmK/invocations`,
              },
            },
            options: {
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Access-Control-Allow-Headers": {
                      schema: {
                        type: "string",
                      },
                    },
                    "Access-Control-Allow-Methods": {
                      schema: {
                        type: "string",
                      },
                    },
                    "Access-Control-Allow-Origin": {
                      schema: {
                        type: "string",
                      },
                    },
                    "Access-Control-Max-Age": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-integration": {
                passthroughBehavior: "WHEN_NO_MATCH",
                requestTemplates: {
                  "application/json": `{
  "statusCode" : 200
}
`,
                },
                type: "MOCK",
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Access-Control-Allow-Headers":
                        "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods":
                        "'GET, OPTIONS'",
                      "method.response.header.Access-Control-Allow-Origin":
                        "'*'",
                      "method.response.header.Access-Control-Max-Age": "'500'",
                    },
                    responseTemplates: {
                      "application/json": `{}
`,
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
        },
        components: {
          securitySchemes: {
            MyCognitoAuthorizer: {
              type: "apiKey",
              name: "Authorization",
              in: "header",
              "x-amazon-apigateway-authtype": "cognito_user_pools",
              "x-amazon-apigateway-authorizer": {
                type: "COGNITO_USER_POOLS",
                identitySource: "method.request.header.Authorization",
                providerARNs: [
                  `${getId({
                    type: "UserPool",
                    group: "CognitoIdentityServiceProvider",
                    name: "rUserPool-8B26tyJUtyPT",
                    path: "live.Arn",
                  })}`,
                ],
              },
            },
          },
          schemas: {},
        },
      },
      deployment: {
        stageName: "dev",
      },
    }),
    dependencies: ({}) => ({
      userPools: ["rUserPool-8B26tyJUtyPT"],
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "dev",
    }),
    dependencies: ({}) => ({
      restApi: "sam-app",
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "Stage",
    }),
    dependencies: ({}) => ({
      restApi: "sam-app",
    }),
  },
  {
    type: "UserPool",
    group: "CognitoIdentityServiceProvider",
    properties: ({}) => ({
      PoolName: "rUserPool-8B26tyJUtyPT",
      AdminCreateUserConfig: {
        AllowAdminCreateUserOnly: true,
      },
      UsernameAttributes: ["email"],
    }),
  },
  {
    type: "UserPoolClient",
    group: "CognitoIdentityServiceProvider",
    properties: ({}) => ({
      AccessTokenValidity: 1,
      AllowedOAuthFlows: ["implicit"],
      AllowedOAuthFlowsUserPoolClient: true,
      AllowedOAuthScopes: [
        "aws.cognito.signin.user.admin",
        "email",
        "openid",
        "profile",
      ],
      CallbackURLs: ["http://localhost"],
      ClientName: "rAmplifyCognitoClient-ibY06BoiCQIZ",
      ExplicitAuthFlows: [
        "ALLOW_ADMIN_USER_PASSWORD_AUTH",
        "ALLOW_CUSTOM_AUTH",
        "ALLOW_REFRESH_TOKEN_AUTH",
        "ALLOW_USER_PASSWORD_AUTH",
        "ALLOW_USER_SRP_AUTH",
      ],
      IdTokenValidity: 1,
      LogoutURLs: ["http://localhost"],
      ReadAttributes: ["email", "email_verified", "family_name", "given_name"],
      RefreshTokenValidity: 1,
      SupportedIdentityProviders: ["COGNITO"],
      TokenValidityUnits: {
        AccessToken: "hours",
        IdToken: "hours",
      },
    }),
    dependencies: ({}) => ({
      userPool: "rUserPool-8B26tyJUtyPT",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-myFunctionRole-1LVLX3JJRI856",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-rAmplifyRole-EYPC57CYZ7VI",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "amplify.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: ["amplify:*"],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "Amplify",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({ config, getId }) => ({
      Configuration: {
        Environment: {
          Variables: {
            user_pools_id: `${getId({
              type: "UserPool",
              group: "CognitoIdentityServiceProvider",
              name: "rUserPool-8B26tyJUtyPT",
            })}`,
            cognito_region: `${config.region}`,
            user_pools_web_client_id: `${getId({
              type: "UserPoolClient",
              group: "CognitoIdentityServiceProvider",
              name: "rAmplifyCognitoClient-ibY06BoiCQIZ",
            })}`,
          },
        },
        FunctionName: "sam-app-myFunction-aLIRAYWnDVmK",
        Handler: "app.lambda_handler",
        Runtime: "python3.7",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-myFunctionRole-1LVLX3JJRI856",
      cognitoUserPools: ["rUserPool-8B26tyJUtyPT"],
      cognitoUserPoolClient: ["rAmplifyCognitoClient-ibY06BoiCQIZ"],
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "sam-app-myFunction-aLIRAYWnDVmK",
          Principal: "apigateway.amazonaws.com",
          StatementId:
            "sam-app-myFunctionEmyFunctionPermissiondev-1PWMY7E93K69R",
          SourceArn: `${getId({
            type: "RestApi",
            group: "APIGateway",
            name: "sam-app",
            path: "live.arnv2",
          })}/*/GET/lambdaExample`,
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-myFunction-aLIRAYWnDVmK",
      apiGatewayRestApis: ["sam-app"],
    }),
  },
];
