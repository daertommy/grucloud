// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Instance",
    group: "EC2",
    name: "my-source",
    properties: ({ config, getId }) => ({
      BootMode: "uefi-preferred",
      EbsOptimized: true,
      Image: {
        Description:
          "Amazon Linux 2023 AMI 2023.0.20230503.0 x86_64 HVM kernel-6.1",
      },
      InstanceType: "c4.large",
      MetadataOptions: {
        HttpPutResponseHopLimit: 2,
        HttpTokens: "required",
      },
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::source-vpc::launch-wizard-source",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `source-vpc::source-subnet-public1-${config.region}a`,
          })}`,
        },
      ],
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
    }),
    dependencies: ({ config }) => ({
      subnets: [`source-vpc::source-subnet-public1-${config.region}a`],
      securityGroups: ["sg::source-vpc::launch-wizard-source"],
    }),
  },
  { type: "InternetGateway", group: "EC2", name: "source-igw" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "source-vpc",
      internetGateway: "source-igw",
    }),
  },
  {
    type: "NetworkInterface",
    group: "EC2",
    name: "eni::my-source",
    readOnly: true,
    properties: ({}) => ({
      Description: "",
    }),
    dependencies: ({}) => ({
      instance: "my-source",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "source-igw",
      routeTable: "source-vpc::source-rtb-public",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "source-rtb-public",
    dependencies: ({}) => ({
      vpc: "source-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `target-rtb-private1-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "target-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `target-rtb-private2-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "target-vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "source-vpc::source-rtb-public",
      subnet: `source-vpc::source-subnet-public1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `target-vpc::target-rtb-private1-${config.region}a`,
      subnet: `target-vpc::target-subnet-private1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `target-vpc::target-rtb-private2-${config.region}b`,
      subnet: `target-vpc::target-subnet-private2-${config.region}b`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "launch-wizard-source",
      Description: "launch-wizard-1 created 2023-05-18T09:42:58.267Z",
    }),
    dependencies: ({}) => ({
      vpc: "source-vpc",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 22,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 22,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::source-vpc::launch-wizard-source",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `source-subnet-public1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "source-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `target-subnet-private1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 8,
    }),
    dependencies: ({}) => ({
      vpc: "target-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `target-subnet-private2-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 9,
    }),
    dependencies: ({}) => ({
      vpc: "target-vpc",
    }),
  },
  {
    type: "TrafficMirrorFilter",
    group: "EC2",
    name: "my-filter",
    properties: ({}) => ({
      EgressFilterRules: [
        {
          DestinationCidrBlock: "0.0.0.0/0",
          Protocol: 6,
          RuleAction: "accept",
          RuleNumber: 100,
          SourceCidrBlock: "0.0.0.0/0",
        },
      ],
      IngressFilterRules: [
        {
          DestinationCidrBlock: "0.0.0.0/0",
          Protocol: 6,
          RuleAction: "accept",
          RuleNumber: 100,
          SourceCidrBlock: "0.0.0.0/0",
        },
      ],
      NetworkServices: [],
    }),
  },
  {
    type: "TrafficMirrorSession",
    group: "EC2",
    name: "my-session",
    properties: ({}) => ({
      OwnerId: "840541460064",
      SessionNumber: 8,
      VirtualNetworkId: 14524656,
    }),
    dependencies: ({}) => ({
      networkInterface: "eni::my-source",
      trafficMirrorFilter: "my-filter",
      trafficMirrorTarget: "target-nlb",
    }),
  },
  {
    type: "TrafficMirrorTarget",
    group: "EC2",
    name: "target-nlb",
    properties: ({}) => ({
      Type: "network-load-balancer",
    }),
    dependencies: ({}) => ({
      networkLoadBalancer: "nlb",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "source-vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "target-vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({ getId }) => ({
      DefaultActions: [
        {
          ForwardConfig: {
            TargetGroups: [
              {
                TargetGroupArn: `${getId({
                  type: "TargetGroup",
                  group: "ElasticLoadBalancingV2",
                  name: "tg",
                })}`,
              },
            ],
          },
          TargetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "tg",
          })}`,
          Type: "forward",
        },
      ],
      Port: 80,
      Protocol: "TCP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "nlb",
      targetGroups: ["tg"],
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "nlb",
      Scheme: "internal",
      Type: "network",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `target-vpc::target-subnet-private1-${config.region}a`,
        `target-vpc::target-subnet-private2-${config.region}b`,
      ],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      HealthCheckPort: "traffic-port",
      HealthCheckProtocol: "TCP",
      HealthCheckTimeoutSeconds: 10,
      Name: "tg",
      Port: 80,
      Protocol: "TCP",
    }),
    dependencies: ({}) => ({
      vpc: "target-vpc",
    }),
  },
];
