// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Certificate",
    group: "ACM",
    properties: ({}) => ({
      DomainName: "grucloud.org",
      SubjectAlternativeNames: ["grucloud.org", "*.grucloud.org"],
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "my-vpc-rtb-private",
    dependencies: ({}) => ({
      vpc: "my-vpc-vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "my-vpc-vpc::my-vpc-rtb-private",
      subnet: `my-vpc-vpc::my-vpc-subnet-private1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "my-vpc-vpc::my-vpc-rtb-private",
      subnet: `my-vpc-vpc::my-vpc-subnet-private2-${config.region}b`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::my-vpc-vpc::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "my-vpc-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `my-vpc-subnet-private1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "my-vpc-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `my-vpc-subnet-private2-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 1,
    }),
    dependencies: ({}) => ({
      vpc: "my-vpc-vpc",
    }),
  },
  {
    type: "VerifiedAccessEndpoint",
    group: "EC2",
    name: "ava-workshop-hr-endpoint",
    properties: ({}) => ({
      ApplicationDomain: "grucloud.org",
      AttachmentType: "vpc",
      Description: "",
      EndpointDomainPrefix: "my-prefix",
      EndpointType: "load-balancer",
      LoadBalancerOptions: {
        Port: 443,
        Protocol: "https",
      },
    }),
    dependencies: ({ config }) => ({
      certificate: "grucloud.org",
      loadBalancer: "my-lb",
      securityGroups: ["sg::my-vpc-vpc::default"],
      subnets: [
        `my-vpc-vpc::my-vpc-subnet-private1-${config.region}a`,
        `my-vpc-vpc::my-vpc-subnet-private2-${config.region}b`,
      ],
      verifiedAccessGroup: "ava-workshop-hr-group",
    }),
  },
  {
    type: "VerifiedAccessGroup",
    group: "EC2",
    name: "ava-workshop-hr-group",
    properties: ({}) => ({
      Description: "",
    }),
    dependencies: ({}) => ({
      verifiedAccessInstance: "ava-workshop-instance",
    }),
  },
  {
    type: "VerifiedAccessInstance",
    group: "EC2",
    name: "ava-workshop-instance",
    properties: ({}) => ({
      Description: "",
    }),
    dependencies: ({}) => ({
      verifiedAccessTrustProviders: ["identitycenter-trust-provider"],
    }),
  },
  {
    type: "VerifiedAccessTrustProvider",
    group: "EC2",
    name: "identitycenter-trust-provider",
    properties: ({}) => ({
      Description: "",
      PolicyReferenceName: "idcpolicy",
      TrustProviderType: "user",
      UserTrustProviderType: "iam-identity-center",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "my-vpc-vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "my-lb",
      targetGroup: "my-tg",
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Port: 443,
      Protocol: "HTTPS",
    }),
    dependencies: ({}) => ({
      loadBalancer: "my-lb",
      targetGroup: "my-tg",
      certificate: "grucloud.org",
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "my-lb",
      Scheme: "internal",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `my-vpc-vpc::my-vpc-subnet-private1-${config.region}a`,
        `my-vpc-vpc::my-vpc-subnet-private2-${config.region}b`,
      ],
      securityGroups: ["sg::my-vpc-vpc::default"],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "my-tg",
      Protocol: "HTTP",
      Port: 80,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
    }),
    dependencies: ({}) => ({
      vpc: "my-vpc-vpc",
    }),
  },
  {
    type: "GroupMembership",
    group: "IdentityStore",
    dependencies: ({}) => ({
      identityStore: "default",
      group: "hr",
      user: "hruser",
    }),
  },
  {
    type: "User",
    group: "IdentityStore",
    properties: ({}) => ({
      DisplayName: "hruser hr",
      Emails: [
        {
          Primary: true,
          Type: "work",
          Value: "fred+hruser@grucloud.org",
        },
      ],
      Name: {
        FamilyName: "hr",
        GivenName: "hruser",
      },
      UserName: "hruser",
    }),
    dependencies: ({}) => ({
      identityStore: "default",
    }),
  },
  {
    type: "Group",
    group: "IdentityStore",
    properties: ({}) => ({
      DisplayName: "hr",
    }),
    dependencies: ({}) => ({
      identityStore: "default",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({}) => ({
      Name: "grucloud.org.",
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ getId }) => ({
      Name: "my-app.grucloud.org.",
      ResourceRecords: [
        {
          Value: `${getId({
            type: "VerifiedAccessEndpoint",
            group: "EC2",
            name: "ava-workshop-hr-endpoint",
            path: "live.EndpointDomain",
          })}`,
        },
      ],
      TTL: 300,
      Type: "CNAME",
    }),
    dependencies: ({}) => ({
      hostedZone: "grucloud.org.",
      verifiedAccessEndpoint: "ava-workshop-hr-endpoint",
    }),
  },
  {
    type: "Instance",
    group: "SSOAdmin",
    name: "default",
    readOnly: true,
    properties: ({}) => ({
      Name: "default",
    }),
  },
];
