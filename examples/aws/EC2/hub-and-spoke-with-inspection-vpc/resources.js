// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/network-firewall/alerts",
    properties: ({}) => ({
      retentionInDays: 7,
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/network-firewall/flows",
    properties: ({}) => ({
      retentionInDays: 7,
    }),
  },
  {
    type: "KeyPair",
    group: "EC2",
    name: "humorous-duckling",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Provisioner",
          Value: "Terraform",
        },
      ],
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "inspection-vpc",
    properties: ({}) => ({
      CidrBlock: "10.129.0.0/16",
      DnsHostnames: true,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "spoke-vpc-1",
    properties: ({}) => ({
      CidrBlock: "10.11.0.0/16",
      DnsHostnames: true,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "spoke-vpc-2",
    properties: ({}) => ({
      CidrBlock: "10.12.0.0/16",
      DnsHostnames: true,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
  },
  {
    type: "InternetGateway",
    group: "EC2",
    name: "inspection-vpc",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
  },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
      internetGateway: "inspection-vpc",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnet: `inspection-vpc-public-subnet-${config.region}a`,
      eip: `inspection-vpc-${config.region}a`,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-intra-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.200.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-intra-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.201.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-intra-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.202.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-private-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.1.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-private-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.2.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-private-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.3.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-public-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.129.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-public-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.130.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-public-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.129.131.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-intra-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.200.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-intra-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.201.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-intra-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.202.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-private-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.1.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-private-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.2.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-private-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.3.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-public-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.129.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-public-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.130.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-1-public-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.11.131.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-intra-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.200.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-intra-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.201.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-intra-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.202.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-private-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.1.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-private-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.2.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-private-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.3.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-public-subnet-${config.region}a`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.129.0/24",
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-public-subnet-${config.region}b`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.130.0/24",
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `spoke-vpc-2-public-subnet-${config.region}c`,
    properties: ({ config }) => ({
      CidrBlock: "10.12.131.0/24",
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "inspection-vpc-intra-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "inspection-vpc-private-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "inspection-vpc-public-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-1-intra-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-1-private-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-1-public-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-2-intra-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-2-private-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "spoke-vpc-2-public-subnet",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-intra-subnet",
      subnet: `inspection-vpc-intra-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-intra-subnet",
      subnet: `inspection-vpc-intra-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-intra-subnet",
      subnet: `inspection-vpc-intra-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-private-subnet",
      subnet: `inspection-vpc-private-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-private-subnet",
      subnet: `inspection-vpc-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-private-subnet",
      subnet: `inspection-vpc-private-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-public-subnet",
      subnet: `inspection-vpc-public-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-public-subnet",
      subnet: `inspection-vpc-public-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-public-subnet",
      subnet: `inspection-vpc-public-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-intra-subnet",
      subnet: `spoke-vpc-1-intra-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-intra-subnet",
      subnet: `spoke-vpc-1-intra-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-intra-subnet",
      subnet: `spoke-vpc-1-intra-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-private-subnet",
      subnet: `spoke-vpc-1-private-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-private-subnet",
      subnet: `spoke-vpc-1-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-private-subnet",
      subnet: `spoke-vpc-1-private-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-public-subnet",
      subnet: `spoke-vpc-1-public-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-public-subnet",
      subnet: `spoke-vpc-1-public-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-1-public-subnet",
      subnet: `spoke-vpc-1-public-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-intra-subnet",
      subnet: `spoke-vpc-2-intra-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-intra-subnet",
      subnet: `spoke-vpc-2-intra-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-intra-subnet",
      subnet: `spoke-vpc-2-intra-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-private-subnet",
      subnet: `spoke-vpc-2-private-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-private-subnet",
      subnet: `spoke-vpc-2-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-private-subnet",
      subnet: `spoke-vpc-2-private-subnet-${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-public-subnet",
      subnet: `spoke-vpc-2-public-subnet-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-public-subnet",
      subnet: `spoke-vpc-2-public-subnet-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "spoke-vpc-2-public-subnet",
      subnet: `spoke-vpc-2-public-subnet-${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-intra-subnet",
      vpcEndpoint: `vpce::NetworkFirewall::inspection-vpc-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-private-subnet",
      natGateway: `inspection-vpc-${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.11.0.0/16",
    }),
    dependencies: ({}) => ({
      routeTable: "inspection-vpc-private-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.12.0.0/16",
    }),
    dependencies: ({}) => ({
      routeTable: "inspection-vpc-private-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "inspection-vpc-public-subnet",
      ig: "inspection-vpc",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.11.0.0/16",
    }),
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-public-subnet",
      vpcEndpoint: `vpce::NetworkFirewall::inspection-vpc-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.12.0.0/16",
    }),
    dependencies: ({ config }) => ({
      routeTable: "inspection-vpc-public-subnet",
      vpcEndpoint: `vpce::NetworkFirewall::inspection-vpc-private-subnet-${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-1-intra-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-1-private-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-1-public-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-2-intra-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-2-private-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "spoke-vpc-2-public-subnet",
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "public_vpc_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "inspection-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "endoint_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "public_instance_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "public_vpc_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "endoint_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "public_instance_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "public_vpc_security_group",
      Description: "ingress access",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "192.168.1.0/24",
            Description: "Open to the provider client IP address",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::inspection-vpc::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 22,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "SSH access",
          },
        ],
        ToPort: 22,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::inspection-vpc::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 80,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "HTTP access",
          },
        ],
        ToPort: 80,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::inspection-vpc::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::endoint_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "192.168.1.0/24",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 22,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        ToPort: 22,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 80,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        ToPort: 80,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "192.168.1.0/24",
            Description: "Open to the provider client IP address",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 22,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "SSH access",
          },
        ],
        ToPort: 22,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 80,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "HTTP access",
          },
        ],
        ToPort: 80,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::endoint_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "192.168.1.0/24",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 22,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        ToPort: 22,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 80,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        ToPort: 80,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_instance_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        IpProtocol: "-1",
        IpRanges: [
          {
            CidrIp: "192.168.1.0/24",
            Description: "Open to the provider client IP address",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 22,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "SSH access",
          },
        ],
        ToPort: 22,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_vpc_security_group",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 80,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
            Description: "HTTP access",
          },
        ],
        ToPort: 80,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::public_vpc_security_group",
    }),
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: ({ config }) => `inspection-vpc-${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Environment",
          Value: "development",
        },
        {
          Key: "Owner",
          Value: "user",
        },
        {
          Key: "Provisioner",
          Value: "terraform",
        },
      ],
    }),
  },
  {
    type: "Instance",
    group: "EC2",
    name: "spoke-vpc-1-instance-1",
    properties: ({ config }) => ({
      InstanceType: "t2.micro",
      ImageId: "ami-0ff419be951a83432",
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
    }),
    dependencies: ({ config }) => ({
      subnet: `spoke-vpc-1-private-subnet-${config.region}a`,
      keyPair: "humorous-duckling",
      iamInstanceProfile: "terraform-ssm-ec2",
      securityGroups: ["sg::spoke-vpc-1::public_instance_security_group"],
    }),
  },
  {
    type: "Instance",
    group: "EC2",
    name: "spoke-vpc-2-instance-1",
    properties: ({ config }) => ({
      InstanceType: "t2.micro",
      ImageId: "ami-0ff419be951a83432",
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
    }),
    dependencies: ({ config }) => ({
      subnet: `spoke-vpc-2-private-subnet-${config.region}a`,
      keyPair: "humorous-duckling",
      iamInstanceProfile: "terraform-ssm-ec2",
      securityGroups: ["sg::spoke-vpc-2::public_instance_security_group"],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-2",
      subnets: [
        `spoke-vpc-2-private-subnet-${config.region}a`,
        `spoke-vpc-2-private-subnet-${config.region}b`,
        `spoke-vpc-2-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-1",
      subnets: [
        `spoke-vpc-1-private-subnet-${config.region}a`,
        `spoke-vpc-1-private-subnet-${config.region}b`,
        `spoke-vpc-1-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2messages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2messages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-2",
      subnets: [
        `spoke-vpc-2-private-subnet-${config.region}a`,
        `spoke-vpc-2-private-subnet-${config.region}b`,
        `spoke-vpc-2-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2messages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2messages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-1",
      subnets: [
        `spoke-vpc-1-private-subnet-${config.region}a`,
        `spoke-vpc-1-private-subnet-${config.region}b`,
        `spoke-vpc-1-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssm`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssm`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-2",
      subnets: [
        `spoke-vpc-2-private-subnet-${config.region}a`,
        `spoke-vpc-2-private-subnet-${config.region}b`,
        `spoke-vpc-2-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssm`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssm`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-1",
      subnets: [
        `spoke-vpc-1-private-subnet-${config.region}a`,
        `spoke-vpc-1-private-subnet-${config.region}b`,
        `spoke-vpc-1-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssmmessages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssmmessages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-1",
      subnets: [
        `spoke-vpc-1-private-subnet-${config.region}a`,
        `spoke-vpc-1-private-subnet-${config.region}b`,
        `spoke-vpc-1-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssmmessages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: true,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssmmessages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "spoke-vpc-2",
      subnets: [
        `spoke-vpc-2-private-subnet-${config.region}a`,
        `spoke-vpc-2-private-subnet-${config.region}b`,
        `spoke-vpc-2-private-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) =>
      `vpce::NetworkFirewall::inspection-vpc-private-subnet-${config.region}b`,
    readOnly: true,
    dependencies: ({ config }) => ({
      vpc: "inspection-vpc",
      subnets: [`inspection-vpc-private-subnet-${config.region}b`],
      firewall: "NetworkFirewall",
    }),
  },
  {
    type: "TransitGateway",
    group: "EC2",
    name: "terraform-transit-gateway",
    properties: ({}) => ({
      Description: "Transit Gateway",
      Options: {
        AmazonSideAsn: 64512,
        AutoAcceptSharedAttachments: "disable",
        DefaultRouteTableAssociation: "disable",
        DefaultRouteTablePropagation: "disable",
        VpnEcmpSupport: "enable",
        DnsSupport: "enable",
        MulticastSupport: "disable",
      },
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "Inspection_VPC_Route_Table",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
    }),
    dependencies: ({}) => ({
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "Spoke_VPC_Route_Table",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
    }),
    dependencies: ({}) => ({
      transitGateway: "terraform-transit-gateway",
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "inspection-vpc-attachment",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "terraform-transit-gateway",
      vpc: "inspection-vpc",
      subnets: [
        `inspection-vpc-intra-subnet-${config.region}a`,
        `inspection-vpc-intra-subnet-${config.region}b`,
        `inspection-vpc-intra-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "spoke-vpc-1-attachment",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "terraform-transit-gateway",
      vpc: "spoke-vpc-1",
      subnets: [
        `spoke-vpc-1-intra-subnet-${config.region}a`,
        `spoke-vpc-1-intra-subnet-${config.region}b`,
        `spoke-vpc-1-intra-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "spoke-vpc-2-attachment",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "terraform-transit-gateway",
      vpc: "spoke-vpc-2",
      subnets: [
        `spoke-vpc-2-intra-subnet-${config.region}a`,
        `spoke-vpc-2-intra-subnet-${config.region}b`,
        `spoke-vpc-2-intra-subnet-${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "inspection-vpc-attachment",
      transitGatewayRouteTable: "Inspection_VPC_Route_Table",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "spoke-vpc-1-attachment",
      transitGatewayRouteTable: "Spoke_VPC_Route_Table",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "spoke-vpc-2-attachment",
      transitGatewayRouteTable: "Spoke_VPC_Route_Table",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "test-ssm-ec2",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: `ec2.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonEC2RoleforSSM",
          PolicyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
      ],
      Tags: [
        {
          Key: "createdBy",
          Value: "taylaand",
        },
        {
          Key: "environment",
          Value: "test",
        },
        {
          Key: "Owner",
          Value: "Terraform",
        },
        {
          Key: "Project",
          Value: "terraform-hub-and-spoke",
        },
      ],
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "terraform-ssm-ec2",
    dependencies: ({}) => ({
      roles: ["test-ssm-ec2"],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "kms-key-aws-hub-and-spoke-demo",
    properties: ({}) => ({
      Description: "KMS Logs Key",
    }),
  },
  {
    type: "Firewall",
    group: "NetworkFirewall",
    properties: ({}) => ({
      DeleteProtection: false,
      FirewallName: "NetworkFirewall",
      FirewallPolicyChangeProtection: false,
      SubnetChangeProtection: false,
    }),
    dependencies: ({ config }) => ({
      vpc: "inspection-vpc",
      subnets: [
        `inspection-vpc-private-subnet-${config.region}a`,
        `inspection-vpc-private-subnet-${config.region}b`,
        `inspection-vpc-private-subnet-${config.region}c`,
      ],
      firewallPolicy: "firewall-policy",
    }),
  },
  {
    type: "Policy",
    group: "NetworkFirewall",
    properties: ({ getId }) => ({
      FirewallPolicy: {
        StatefulRuleGroupReferences: [
          {
            ResourceArn: `${getId({
              type: "RuleGroup",
              group: "NetworkFirewall",
              name: "drop-ssh-between-spokes",
            })}`,
          },
          {
            ResourceArn: `${getId({
              type: "RuleGroup",
              group: "NetworkFirewall",
              name: "block-domains",
            })}`,
          },
        ],
        StatelessDefaultActions: ["aws:forward_to_sfe"],
        StatelessFragmentDefaultActions: ["aws:forward_to_sfe"],
        StatelessRuleGroupReferences: [
          {
            Priority: 20,
            ResourceArn: `${getId({
              type: "RuleGroup",
              group: "NetworkFirewall",
              name: "drop-icmp",
            })}`,
          },
        ],
      },
      FirewallPolicyName: "firewall-policy",
    }),
    dependencies: ({}) => ({
      ruleGroups: ["block-domains", "drop-icmp", "drop-ssh-between-spokes"],
    }),
  },
  {
    type: "RuleGroup",
    group: "NetworkFirewall",
    properties: ({}) => ({
      RuleGroup: {
        RuleVariables: {
          IPSets: {
            HOME_NET: {
              Definition: ["10.11.0.0/16", "10.12.0.0/16"],
            },
          },
        },
        RulesSource: {
          RulesSourceList: {
            GeneratedRulesType: "DENYLIST",
            TargetTypes: ["HTTP_HOST", "TLS_SNI"],
            Targets: [".twitter.com", ".facebook.com"],
          },
        },
      },
      Capacity: 100,
      RuleGroupName: "block-domains",
      Type: "STATEFUL",
    }),
  },
  {
    type: "RuleGroup",
    group: "NetworkFirewall",
    properties: ({}) => ({
      RuleGroup: {
        RulesSource: {
          StatelessRulesAndCustomActions: {
            StatelessRules: [
              {
                Priority: 1,
                RuleDefinition: {
                  Actions: ["aws:drop"],
                  MatchAttributes: {
                    Destinations: [
                      {
                        AddressDefinition: "0.0.0.0/0",
                      },
                    ],
                    Protocols: [1],
                    Sources: [
                      {
                        AddressDefinition: "0.0.0.0/0",
                      },
                    ],
                  },
                },
              },
            ],
          },
        },
      },
      Capacity: 1,
      RuleGroupName: "drop-icmp",
      Type: "STATELESS",
    }),
  },
  {
    type: "RuleGroup",
    group: "NetworkFirewall",
    properties: ({}) => ({
      RuleGroup: {
        RuleVariables: {
          IPSets: {
            SPOKE_VPCS: {
              Definition: ["10.11.0.0/16", "10.12.0.0/16"],
            },
          },
        },
        RulesSource: {
          RulesString:
            '      drop tcp $SPOKE_VPCS any <> $SPOKE_VPCS 22 (msg:"Blocked SSH attempt"; sid:100; rev:1;)\n',
        },
      },
      Capacity: 100,
      RuleGroupName: "drop-ssh-between-spokes",
      Type: "STATEFUL",
    }),
  },
  {
    type: "LoggingConfiguration",
    group: "NetworkFirewall",
    properties: ({}) => ({
      LoggingConfiguration: {
        LogDestinationConfigs: [
          {
            LogDestination: {
              logGroup: "/aws/network-firewall/flows",
            },
            LogDestinationType: "CloudWatchLogs",
            LogType: "FLOW",
          },
          {
            LogDestination: {
              logGroup: "/aws/network-firewall/alerts",
            },
            LogDestinationType: "CloudWatchLogs",
            LogType: "ALERT",
          },
        ],
      },
      FirewallName: "NetworkFirewall",
    }),
    dependencies: ({}) => ({
      firewall: "NetworkFirewall",
      logGroups: [
        "/aws/network-firewall/alerts",
        "/aws/network-firewall/flows",
      ],
    }),
  },
];
