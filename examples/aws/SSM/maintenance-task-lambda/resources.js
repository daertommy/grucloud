// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName:
        "AWSLambdaBasicExecutionRole-96bff243-efc9-4017-8fd6-f3df40a6d971",
      PolicyDocument: {
        Statement: [
          {
            Action: "logs:CreateLogGroup",
            Effect: "Allow",
            Resource: `arn:aws:logs:${config.region}:${config.accountId()}:*`,
          },
          {
            Action: ["logs:CreateLogStream", "logs:PutLogEvents"],
            Effect: "Allow",
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/lambda/maintenance-window:*`,
            ],
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/service-role/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "my-maintenance-window-role-policy",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ssm:SendCommand",
              "ssm:CancelCommand",
              "ssm:ListCommands",
              "ssm:ListCommandInvocations",
              "ssm:GetCommandInvocation",
              "ssm:GetAutomationExecution",
              "ssm:StartAutomationExecution",
              "ssm:ListTagsForResource",
              "ssm:GetParameters",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["states:DescribeExecution", "states:StartExecution"],
            Effect: "Allow",
            Resource: [
              "arn:aws:states:*:*:execution:*:*",
              "arn:aws:states:*:*:stateMachine:*",
            ],
          },
          {
            Action: ["lambda:InvokeFunction"],
            Effect: "Allow",
            Resource: ["arn:aws:lambda:*:*:function:*"],
          },
          {
            Action: [
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
            ],
            Effect: "Allow",
            Resource: ["*"],
          },
          {
            Action: ["tag:GetResources"],
            Effect: "Allow",
            Resource: ["*"],
          },
          {
            Action: "iam:PassRole",
            Condition: {
              StringEquals: {
                "iam:PassedToService": ["ssm.amazonaws.com"],
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "maintenance-window-role-yawbeegh",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: [
        "AWSLambdaBasicExecutionRole-96bff243-efc9-4017-8fd6-f3df40a6d971",
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "my-maintenance-window-role",
      Description: "Allows SSM to call AWS services on your behalf",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ssm.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["my-maintenance-window-role-policy"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "maintenance-window",
        Handler: "index.handler",
        Runtime: "nodejs18.x",
      },
    }),
    dependencies: ({}) => ({
      role: "maintenance-window-role-yawbeegh",
    }),
  },
  {
    type: "MaintenanceWindow",
    group: "SSM",
    properties: ({}) => ({
      AllowUnassociatedTargets: false,
      Cutoff: 0,
      Duration: 3,
      Name: "my-maintenance-window",
      Schedule: "cron(0 */30 * * * ? *)",
    }),
  },
  {
    type: "MaintenanceWindowTarget",
    group: "SSM",
    properties: ({}) => ({
      Name: "my-target",
      ResourceType: "INSTANCE",
      Targets: [
        {
          Key: "tag:mykey",
          Values: ["myvalue"],
        },
      ],
    }),
    dependencies: ({}) => ({
      maintenanceWindow: "my-maintenance-window",
    }),
  },
  {
    type: "MaintenanceWindowTask",
    group: "SSM",
    properties: ({}) => ({
      Name: "my-lambda",
      Priority: 1,
      TaskInvocationParameters: {
        Lambda: {
          Payload: {
            a: 1,
          },
        },
      },
      TaskParameters: {},
      TaskType: "LAMBDA",
    }),
    dependencies: ({}) => ({
      iamRoleService: "my-maintenance-window-role",
      lambdaFunction: "maintenance-window",
      maintenanceWindow: "my-maintenance-window",
    }),
  },
];
