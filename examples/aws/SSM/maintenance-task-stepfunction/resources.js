// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "my-maintenance-window-role-policy",
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Action: [
              "ssm:SendCommand",
              "ssm:CancelCommand",
              "ssm:ListCommands",
              "ssm:ListCommandInvocations",
              "ssm:GetCommandInvocation",
              "ssm:GetAutomationExecution",
              "ssm:StartAutomationExecution",
              "ssm:ListTagsForResource",
              "ssm:GetParameters",
            ],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: ["states:DescribeExecution", "states:StartExecution"],
            Resource: [
              "arn:aws:states:*:*:execution:*:*",
              "arn:aws:states:*:*:stateMachine:*",
            ],
          },
          {
            Effect: "Allow",
            Action: ["lambda:InvokeFunction"],
            Resource: ["arn:aws:lambda:*:*:function:*"],
          },
          {
            Effect: "Allow",
            Action: [
              "resource-groups:ListGroups",
              "resource-groups:ListGroupResources",
            ],
            Resource: ["*"],
          },
          {
            Effect: "Allow",
            Action: ["tag:GetResources"],
            Resource: ["*"],
          },
          {
            Effect: "Allow",
            Action: "iam:PassRole",
            Resource: "*",
            Condition: {
              StringEquals: {
                "iam:PassedToService": ["ssm.amazonaws.com"],
              },
            },
          },
        ],
      },
      Path: "/",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "XRayAccessPolicy-0c77fa64-1fe0-4888-b058-990040cb421a",
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Action: [
              "xray:PutTraceSegments",
              "xray:PutTelemetryRecords",
              "xray:GetSamplingRules",
              "xray:GetSamplingTargets",
            ],
            Resource: ["*"],
          },
        ],
      },
      Path: "/service-role/",
      Description:
        "Allow AWS Step Functions to call X-Ray daemon on your behalf",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "my-maintenance-window-role",
      Description: "Allows SSM to call AWS services on your behalf",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ssm.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["my-maintenance-window-role-policy"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "StepFunctions-maintenance-window-state-machine-role-9a8fad86",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "states.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["XRayAccessPolicy-0c77fa64-1fe0-4888-b058-990040cb421a"],
    }),
  },
  {
    type: "MaintenanceWindow",
    group: "SSM",
    properties: ({}) => ({
      AllowUnassociatedTargets: false,
      Cutoff: 0,
      Duration: 3,
      Name: "my-maintenance-window",
      Schedule: "cron(0 */30 * * * ? *)",
    }),
  },
  {
    type: "MaintenanceWindowTarget",
    group: "SSM",
    properties: ({}) => ({
      Name: "my-target",
      ResourceType: "INSTANCE",
      Targets: [
        {
          Key: "tag:mykey",
          Values: ["myvalue"],
        },
      ],
    }),
    dependencies: ({}) => ({
      maintenanceWindow: "my-maintenance-window",
    }),
  },
  {
    type: "MaintenanceWindowTask",
    group: "SSM",
    properties: ({}) => ({
      TaskType: "STEP_FUNCTIONS",
      Name: "my-step-function-task",
      Priority: 1,
      TaskInvocationParameters: {
        StepFunctions: {
          Input: {
            a: 2,
          },
        },
      },
      TaskParameters: {},
    }),
    dependencies: ({}) => ({
      iamRoleService: "my-maintenance-window-role",
      maintenanceWindow: "my-maintenance-window",
      sfnStateMachine: "maintenance-window-state-machine",
    }),
  },
  {
    type: "StateMachine",
    group: "StepFunctions",
    properties: ({}) => ({
      definition: {
        Comment:
          "A Hello World example demonstrating various state types of the Amazon States Language",
        StartAt: "Pass",
        States: {
          Pass: {
            Comment:
              "A Pass state passes its input to its output, without performing work. Pass states are useful when constructing and debugging state machines.",
            Type: "Pass",
            Next: "Hello World example?",
          },
          "Hello World example?": {
            Comment:
              "A Choice state adds branching logic to a state machine. Choice rules can implement 16 different comparison operators, and can be combined using And, Or, and Not",
            Type: "Choice",
            Choices: [
              {
                Variable: "$.IsHelloWorldExample",
                BooleanEquals: true,
                Next: "Yes",
              },
              {
                Variable: "$.IsHelloWorldExample",
                BooleanEquals: false,
                Next: "No",
              },
            ],
            Default: "Yes",
          },
          Yes: {
            Type: "Pass",
            Next: "Wait 3 sec",
          },
          No: {
            Type: "Fail",
            Cause: "Not Hello World",
          },
          "Wait 3 sec": {
            Comment:
              "A Wait state delays the state machine from continuing for a specified time.",
            Type: "Wait",
            Seconds: 3,
            Next: "Parallel State",
          },
          "Parallel State": {
            Comment:
              "A Parallel state can be used to create parallel branches of execution in your state machine.",
            Type: "Parallel",
            Next: "Hello World",
            Branches: [
              {
                StartAt: "Hello",
                States: {
                  Hello: {
                    Type: "Pass",
                    End: true,
                  },
                },
              },
              {
                StartAt: "World",
                States: {
                  World: {
                    Type: "Pass",
                    End: true,
                  },
                },
              },
            ],
          },
          "Hello World": {
            Type: "Pass",
            End: true,
          },
        },
      },
      name: "maintenance-window-state-machine",
    }),
    dependencies: ({}) => ({
      role: "StepFunctions-maintenance-window-state-machine-role-9a8fad86",
    }),
  },
];
