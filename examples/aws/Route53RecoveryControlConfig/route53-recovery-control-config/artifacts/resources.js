// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "HealthCheck",
    group: "Route53",
    properties: ({}) => ({
      HealthCheckConfig: {
        Type: "RECOVERY_CONTROL",
      },
    }),
    dependencies: ({}) => ({
      routingControl: "RoutingControlCell1",
    }),
  },
  {
    type: "HealthCheck",
    group: "Route53",
    properties: ({}) => ({
      HealthCheckConfig: {
        Type: "RECOVERY_CONTROL",
      },
    }),
    dependencies: ({}) => ({
      routingControl: "RoutingControlCell2",
    }),
  },
  {
    type: "Cluster",
    group: "Route53RecoveryControlConfig",
    properties: ({}) => ({
      ClusterName: "cluster",
    }),
  },
  {
    type: "ControlPanel",
    group: "Route53RecoveryControlConfig",
    properties: ({}) => ({
      ControlPanelName: "control-panel",
    }),
    dependencies: ({}) => ({
      cluster: "cluster",
    }),
  },
  {
    type: "RoutingControl",
    group: "Route53RecoveryControlConfig",
    properties: ({}) => ({
      RoutingControlName: "RoutingControlCell1",
    }),
    dependencies: ({}) => ({
      controlPanel: "control-panel",
    }),
  },
  {
    type: "RoutingControl",
    group: "Route53RecoveryControlConfig",
    properties: ({}) => ({
      RoutingControlName: "RoutingControlCell2",
    }),
    dependencies: ({}) => ({
      controlPanel: "control-panel",
    }),
  },
  {
    type: "SafetyRule",
    group: "Route53RecoveryControlConfig",
    properties: ({ getId }) => ({
      AssertionRule: {
        AssertedControls: [
          `${getId({
            type: "RoutingControl",
            group: "Route53RecoveryControlConfig",
            name: "RoutingControlCell1",
          })}`,
          `${getId({
            type: "RoutingControl",
            group: "Route53RecoveryControlConfig",
            name: "RoutingControlCell2",
          })}`,
        ],
        ControlPanelArn: `${getId({
          type: "ControlPanel",
          group: "Route53RecoveryControlConfig",
          name: "control-panel",
        })}`,
        Name: "SafetyRuleMinCellsActive",
        RuleConfig: {
          Inverted: true,
          Threshold: 1,
          Type: "ATLEAST",
        },
        WaitPeriodMs: 5000,
      },
    }),
    dependencies: ({}) => ({
      controlPanel: "control-panel",
      routingControls: ["RoutingControlCell1", "RoutingControlCell2"],
    }),
  },
];
