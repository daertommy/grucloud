// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "DataSource",
    group: "AppSync",
    properties: ({ config }) => ({
      name: "DemoDataSource",
      type: "AMAZON_DYNAMODB",
      dynamodbConfig: {
        awsRegion: `${config.region}`,
        tableName: "Waf2AppSyncStack-DemoTableEE720AED-QD4D1MGH6MYO",
        useCallerCredentials: false,
        versioned: false,
      },
    }),
    dependencies: ({}) => ({
      graphqlApi: "demo",
      serviceRole:
        "Waf2AppSyncStack-DemoApiDemoDataSourceServiceRole5-1AJ5AUA58NK5Q",
      dynamoDbTable: "Waf2AppSyncStack-DemoTableEE720AED-QD4D1MGH6MYO",
    }),
  },
  {
    type: "GraphqlApi",
    group: "AppSync",
    properties: ({}) => ({
      name: "demo",
      authenticationType: "API_KEY",
      xrayEnabled: false,
      apiKeys: [{}],
      schemaFile: "demo.graphql",
    }),
  },
  {
    type: "Resolver",
    group: "AppSync",
    properties: ({}) => ({
      fieldName: "addDemo",
      kind: "UNIT",
      requestMappingTemplate: `
      #set($input = $ctx.args.input)
      
      {
        "version": "2017-02-28",
        "operation": "PutItem",
        "key" : {
      "id" : $util.dynamodb.toDynamoDBJson($util.autoId())
    },
        "attributeValues": $util.dynamodb.toMapValuesJson($input)
      }`,
      responseMappingTemplate: "$util.toJson($ctx.result)",
      typeName: "Mutation",
    }),
    dependencies: ({}) => ({
      dataSource: "DemoDataSource",
      graphqlApi: "demo",
    }),
  },
  {
    type: "Resolver",
    group: "AppSync",
    properties: ({}) => ({
      fieldName: "getDemos",
      kind: "UNIT",
      requestMappingTemplate:
        '{"version" : "2017-02-28", "operation" : "Scan", "consistentRead": false}',
      responseMappingTemplate: "$util.toJson($ctx.result.items)",
      typeName: "Query",
    }),
    dependencies: ({}) => ({
      dataSource: "DemoDataSource",
      graphqlApi: "demo",
    }),
  },
  {
    type: "Table",
    group: "DynamoDB",
    properties: ({}) => ({
      TableName: "Waf2AppSyncStack-DemoTableEE720AED-QD4D1MGH6MYO",
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      ProvisionedThroughput: {
        ReadCapacityUnits: 5,
        WriteCapacityUnits: 5,
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "Waf2AppSyncStack-DemoApiDemoDataSourceServiceRole5-1AJ5AUA58NK5Q",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "appsync.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "dynamodb:BatchGetItem",
                  "dynamodb:BatchWriteItem",
                  "dynamodb:ConditionCheckItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:DescribeTable",
                  "dynamodb:GetItem",
                  "dynamodb:GetRecords",
                  "dynamodb:GetShardIterator",
                  "dynamodb:PutItem",
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:UpdateItem",
                ],
                Resource: [
                  `arn:aws:dynamodb:${
                    config.region
                  }:${config.accountId()}:table/Waf2AppSyncStack-DemoTableEE720AED-QD4D1MGH6MYO`,
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "DemoApiDemoDataSourceServiceRoleDefaultPolicy78028736",
        },
      ],
    }),
  },
  {
    type: "WebACL",
    group: "WAFv2",
    properties: ({}) => ({
      Capacity: 45,
      DefaultAction: {
        Allow: {},
      },
      ManagedByFirewallManager: false,
      Name: "DemoWebACL-90v1Xig5FnhK",
      Rules: [
        {
          Action: {
            Block: {},
          },
          Name: "GraphQLIntrospection",
          Priority: 2,
          Statement: {
            ByteMatchStatement: {
              FieldToMatch: {
                Body: {
                  OversizeHandling: "CONTINUE",
                },
              },
              PositionalConstraint: "CONTAINS",
              SearchString: Buffer.from("ByteMatchStatement"),
              TextTransformations: [
                {
                  Priority: 0,
                  Type: "LOWERCASE",
                },
              ],
            },
          },
          VisibilityConfig: {
            CloudWatchMetricsEnabled: true,
            MetricName: "BodyGraphQLIntrospectionRule",
            SampledRequestsEnabled: true,
          },
        },
        {
          Name: "AWS-AWSManagedRulesAmazonIpReputationList",
          OverrideAction: {
            None: {},
          },
          Priority: 10,
          Statement: {
            ManagedRuleGroupStatement: {
              Name: "AWSManagedRulesAmazonIpReputationList",
              VendorName: "AWS",
            },
          },
          VisibilityConfig: {
            CloudWatchMetricsEnabled: true,
            MetricName: "AWSManagedRulesAmazonIpReputationList",
            SampledRequestsEnabled: true,
          },
        },
      ],
      VisibilityConfig: {
        CloudWatchMetricsEnabled: true,
        MetricName: "demo-waf",
        SampledRequestsEnabled: false,
      },
      Scope: "REGIONAL",
    }),
  },
  {
    type: "WebACLAssociation",
    group: "WAFv2",
    dependencies: ({}) => ({
      webAcl: "DemoWebACL-90v1Xig5FnhK",
      graphql: "demo",
    }),
  },
];
