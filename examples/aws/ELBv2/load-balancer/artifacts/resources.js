// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.ACM.makeCertificate({
    name: "grucloud.org",
  });

  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/16",
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: `${config.region}a`,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: `${config.region}b`,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "rtb-031ea0be78dc1d844",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
      subnets: [
        resources.EC2.Subnet["subnet-a"],
        resources.EC2.Subnet["subnet-b"],
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: "rtb-031ea0be78dc1d844-igw",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["rtb-031ea0be78dc1d844"],
      ig: resources.EC2.InternetGateway["internet-gateway"],
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "load-balancer",
    properties: ({ config }) => ({
      Description: "Load Balancer",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "load-balancer-rule-ingress-tcp-0-v4",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 0,
        ToPort: 0,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup["load-balancer"],
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "load-balancer-rule-ingress-tcp-443-v4",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 443,
        ToPort: 443,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup["load-balancer"],
    }),
  });

  provider.ELBv2.makeLoadBalancer({
    name: "load-balancer",
    properties: ({ config }) => ({
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet["subnet-a"],
        resources.EC2.Subnet["subnet-b"],
      ],
      securityGroups: [resources.EC2.SecurityGroup["load-balancer"]],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-http",
    properties: ({ config }) => ({
      Protocol: "HTTP",
      Port: 80,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-https",
    properties: ({ config }) => ({
      Protocol: "HTTPS",
      Port: 443,
      HealthCheckProtocol: "HTTPS",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.ELBv2.makeListener({
    name: "arn:aws:elasticloadbalancing:us-east-1:840541460064:listener/app/load-balancer/2a78b39a8ae3a5a4/829a2a99e6cd463b",
    properties: ({ config }) => ({
      Port: 443,
      Protocol: "HTTPS",
    }),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer["load-balancer"],
      targetGroup: resources.ELBv2.TargetGroup["target-group-https"],
      certificate: resources.ACM.Certificate["grucloud.org"],
    }),
  });

  provider.ELBv2.makeListener({
    name: "arn:aws:elasticloadbalancing:us-east-1:840541460064:listener/app/load-balancer/2a78b39a8ae3a5a4/d590fbeec09fa03d",
    properties: ({ config }) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer["load-balancer"],
      targetGroup: resources.ELBv2.TargetGroup["target-group-http"],
    }),
  });
};

exports.createResources = createResources;
