// Generated by 'gc gencode'
const { pipe, tap, get, eq, and } = require("rubico");
const { find } = require("rubico/x");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/16",
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: `${config.region}a`,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: `${config.region}b`,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.useDefaultRouteTable({
    name: "rt-default-vpc",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["rt-default-vpc"],
      subnet: resources.EC2.Subnet["subnet-a"],
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["rt-default-vpc"],
      subnet: resources.EC2.Subnet["subnet-b"],
    }),
  });

  provider.EC2.makeRoute({
    name: "rt-default-vpc-igw",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable["rt-default-vpc"],
      ig: resources.EC2.InternetGateway["internet-gateway"],
    }),
  });

  provider.EC2.useDefaultSecurityGroup({
    name: "sg-default-vpc",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.ELBv2.makeLoadBalancer({
    name: "load-balancer",
    properties: ({ config }) => ({
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet["subnet-a"],
        resources.EC2.Subnet["subnet-b"],
      ],
      securityGroups: [resources.EC2.SecurityGroup["sg-default-vpc"]],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-http",
    properties: ({ config }) => ({
      Protocol: "HTTP",
      Port: 80,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc["vpc"],
    }),
  });

  provider.ELBv2.makeListener({
    properties: ({ config }) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer["load-balancer"],
      targetGroup: resources.ELBv2.TargetGroup["target-group-http"],
    }),
  });

  provider.ELBv2.makeRule({
    name: "arn:aws:elasticloadbalancing:us-east-1:840541460064:listener-rule/app/load-balancer/24ec0f6e956d9686/b45d9c1b3d6fc1f0/499d7d82cae12bb5",
    properties: ({ config }) => ({
      Priority: "1",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/*"],
        },
      ],
      Actions: [
        {
          Type: "redirect",
          Order: 1,
          RedirectConfig: {
            Protocol: "HTTPS",
            Port: "443",
            Host: "#{host}",
            Path: "/#{path}",
            Query: "#{query}",
            StatusCode: "HTTP_301",
          },
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener["listener::load-balancer::HTTP::80"],
    }),
  });
};

exports.createResources = createResources;
