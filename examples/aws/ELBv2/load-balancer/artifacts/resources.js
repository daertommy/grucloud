// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.AutoScaling.makeAutoScalingGroup({
    name: "ag",
    properties: ({}) => ({
      MinSize: 1,
      MaxSize: 1,
      DesiredCapacity: 1,
    }),
    dependencies: () => ({
      subnets: ["subnet-a", "subnet-b"],
      launchTemplate: "my-template",
    }),
  });

  provider.AutoScaling.makeAutoScalingAttachment({
    dependencies: () => ({
      autoScalingGroup: "ag",
      targetGroup: "target-group-rest",
    }),
  });

  provider.AutoScaling.makeAutoScalingAttachment({
    dependencies: () => ({
      autoScalingGroup: "ag",
      targetGroup: "target-group-web",
    }),
  });

  provider.ACM.makeCertificate({
    name: "grucloud.org",
  });

  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({}) => ({
      CidrBlock: "192.168.0.0/16",
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: `${config.region}a`,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: `${config.region}b`,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.useDefaultRouteTable({
    name: "rt-default-vpc",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      subnet: "subnet-a",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      subnet: "subnet-b",
    }),
  });

  provider.EC2.makeRoute({
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      ig: "internet-gateway",
    }),
  });

  provider.EC2.useDefaultSecurityGroup({
    name: "sg-default-vpc",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeLaunchTemplate({
    name: "my-template",
    properties: ({}) => ({
      LaunchTemplateData: {
        ImageId: "ami-02e136e904f3da870",
        InstanceType: "t2.micro",
      },
    }),
  });

  provider.ELBv2.makeLoadBalancer({
    name: "load-balancer",
    properties: ({}) => ({
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: () => ({
      subnets: ["subnet-a", "subnet-b"],
      securityGroups: ["sg-default-vpc"],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-rest",
    properties: ({}) => ({
      Protocol: "HTTP",
      Port: 30020,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-web",
    properties: ({}) => ({
      Protocol: "HTTP",
      Port: 30010,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.ELBv2.makeListener({
    properties: ({}) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: () => ({
      loadBalancer: "load-balancer",
      targetGroup: "target-group-web",
    }),
  });

  provider.ELBv2.makeListener({
    properties: ({}) => ({
      Port: 443,
      Protocol: "HTTPS",
    }),
    dependencies: () => ({
      loadBalancer: "load-balancer",
      targetGroup: "target-group-rest",
      certificate: "grucloud.org",
    }),
  });

  provider.ELBv2.makeRule({
    properties: ({}) => ({
      Priority: "1",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/*"],
        },
      ],
      Actions: [
        {
          Type: "redirect",
          Order: 1,
          RedirectConfig: {
            Protocol: "HTTPS",
            Port: "443",
            Host: "#{host}",
            Path: "/#{path}",
            Query: "#{query}",
            StatusCode: "HTTP_301",
          },
        },
      ],
    }),
    dependencies: () => ({
      listener: "listener::load-balancer::HTTP::80",
    }),
  });

  provider.ELBv2.makeRule({
    properties: ({}) => ({
      Priority: "1",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/api/*"],
        },
      ],
    }),
    dependencies: () => ({
      listener: "listener::load-balancer::HTTPS::443",
      targetGroup: "target-group-rest",
    }),
  });

  provider.ELBv2.makeRule({
    properties: ({}) => ({
      Priority: "2",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/*"],
        },
      ],
    }),
    dependencies: () => ({
      listener: "listener::load-balancer::HTTPS::443",
      targetGroup: "target-group-web",
    }),
  });

  provider.Route53.makeHostedZone({
    name: "grucloud.org.",
    dependencies: () => ({
      domain: "grucloud.org",
    }),
  });

  provider.Route53.makeRecord({
    dependencies: () => ({
      hostedZone: "grucloud.org.",
      loadBalancer: "load-balancer",
    }),
  });

  provider.Route53Domains.useDomain({
    name: "grucloud.org",
  });
};

exports.createResources = createResources;
