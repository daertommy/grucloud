// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Description:
        "This rule will trigger lambda when an image is uploaded into S3",
      EventPattern: {
        "detail-type": ["AWS API Call via CloudTrail"],
        source: ["aws.s3", "simulated.aws.s3"],
        detail: {
          eventSource: ["s3.amazonaws.com"],
          requestParameters: {
            bucketName: ["gc-lambda-rekognition"],
          },
          eventName: ["PutObject", "CopyObject", "CompleteMultipartUpload"],
        },
      },
      Name: "sam-app-S3NewImageEvent-HKQCIE79GAXF",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "TextRecognitionLambdaFunction",
    }),
    dependencies: ({}) => ({
      rule: "sam-app-S3NewImageEvent-HKQCIE79GAXF",
      lambdaFunction: "TextRecognitionLambdaFunction",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "TextRecognitionLambdaRole",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:DescribeLogGroups",
                  "logs:CreateLogStream",
                  "logs:DescribeLogStreams",
                  "logs:PutLogEvents",
                ],
                Resource: [
                  `arn:aws:logs:${
                    config.region
                  }:${config.accountId()}:log-group:*`,
                ],
                Effect: "Allow",
              },
              {
                Action: ["s3:GetObject"],
                Resource: "arn:aws:s3:::*",
                Effect: "Allow",
              },
              {
                Action: ["rekognition:DetectText"],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "TextRecognitionLambdaPolicy",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description:
          "Lambda function that will recieve CloudWatch events and will trigger CodeBuild build job.",
        FunctionName: "TextRecognitionLambdaFunction",
        Handler: "app.handler",
        Runtime: "nodejs12.x",
        Timeout: 250,
      },
    }),
    dependencies: ({}) => ({
      role: "TextRecognitionLambdaRole",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ config }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "TextRecognitionLambdaFunction",
          Principal: "events.amazonaws.com",
          StatementId:
            "sam-app-PermissionForEventsToInvokeLambda-12A3WLZFR63JB",
          SourceArn: `arn:aws:events:${
            config.region
          }:${config.accountId()}:rule/sam-app-S3NewImageEvent-HKQCIE79GAXF`,
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "TextRecognitionLambdaFunction",
    }),
  },
];
