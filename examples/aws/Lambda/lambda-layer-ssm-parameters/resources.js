// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-Function-1HSHFH3X2M7AK-FunctionRole-FASUSIX3EN4",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["ssm:GetParameter*"],
                Effect: "Allow",
                Resource: `arn:aws:ssm:${
                  config.region
                }:${config.accountId()}:parameter/*`,
              },
            ],
          },
          PolicyName: "FunctionRolePolicy0",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({ getId }) => ({
      Configuration: {
        Architectures: ["arm64"],
        Environment: {
          Variables: {
            ParameterPath: "/Config",
          },
        },
        FunctionName: "config-example-function",
        Handler: "app.handler",
        Layers: [
          `${getId({
            type: "Layer",
            group: "Lambda",
            name: "config-example-layer",
            path: "live.LayerVersionArn",
          })}`,
        ],
        Runtime: "nodejs14.x",
      },
      FunctionUrlConfig: {
        AuthType: "NONE",
        InvokeMode: "BUFFERED",
      },
    }),
    dependencies: ({}) => ({
      layers: ["config-example-layer"],
      role: "sam-app-Function-1HSHFH3X2M7AK-FunctionRole-FASUSIX3EN4",
    }),
  },
  {
    type: "Layer",
    group: "Lambda",
    properties: ({}) => ({
      LayerName: "config-example-layer",
      CompatibleRuntimes: ["nodejs14.x"],
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({}) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "config-example-function",
          Principal: "*",
          StatementId:
            "sam-app-Function-1HSHFH3X2M7AK-FunctionUrlPublicPermissions-M05RV5VGDD75",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "config-example-function",
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    properties: ({}) => ({
      Name: "/Config/Parameter1Name",
      Type: "String",
      Value: "Value1",
      DataType: "text",
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    properties: ({}) => ({
      Name: "/Config/Parameter2Name",
      Type: "String",
      Value: `{
  "key1": "value1",
  "key2": "value2"
}`,
      DataType: "text",
    }),
  },
];
