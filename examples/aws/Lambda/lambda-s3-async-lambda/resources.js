// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-AsynchronousFunctionRole-4JYGEMGOVCR2",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "s3:GetObject",
                  "s3:ListBucket",
                  "s3:GetBucketLocation",
                  "s3:GetObjectVersion",
                  "s3:GetLifecycleConfiguration",
                ],
                Resource: [
                  "arn:aws:s3:::gc-lambda-s3-async-lambda",
                  "arn:aws:s3:::gc-lambda-s3-async-lambda/*",
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "AsynchronousFunctionRolePolicy0",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-SendPayloadFunctionRole-1NVFRO3D7YZAT",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["lambda:InvokeFunction"],
                Resource: `arn:aws:lambda:${
                  config.region
                }:${config.accountId()}:function:MyAsynchronousFunction*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "SendPayloadFunctionRolePolicy0",
        },
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                  "s3:PutLifecycleConfiguration",
                ],
                Resource: [
                  "arn:aws:s3:::gc-lambda-s3-async-lambda",
                  "arn:aws:s3:::gc-lambda-s3-async-lambda/*",
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "SendPayloadFunctionRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "MyAsynchronousFunction",
        Handler: "app.lambda_handler",
        Runtime: "python3.9",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-AsynchronousFunctionRole-4JYGEMGOVCR2",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            AsyncLambdaFunctionName: "MyAsynchronousFunction",
            PayloadPrefix: "MyPayload_",
            PayloadBucketName: "gc-lambda-s3-async-lambda",
          },
        },
        FunctionName: "SendPayloadFunction",
        Handler: "app.lambda_handler",
        Runtime: "python3.9",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-SendPayloadFunctionRole-1NVFRO3D7YZAT",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({}) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "MyAsynchronousFunction",
          Principal: "s3.amazonaws.com",
          StatementId:
            "sam-app-AsynchronousFunctionPayloadCreationEventPermission-1U4VIKEFLMHW5",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "MyAsynchronousFunction",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: "gc-lambda-s3-async-lambda",
      NotificationConfiguration: {
        LambdaFunctionConfigurations: [
          {
            LambdaFunctionArn: `arn:aws:lambda:${
              config.region
            }:${config.accountId()}:function:MyAsynchronousFunction`,
            Events: ["s3:ObjectCreated:*"],
            Filter: {
              Key: {
                FilterRules: [
                  {
                    Name: "Prefix",
                    Value: "MyPayload_",
                  },
                ],
              },
            },
          },
        ],
      },
    }),
  },
];
