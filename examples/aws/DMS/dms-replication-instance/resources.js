// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Endpoint",
    group: "DMS",
    properties: ({}) => ({
      EndpointIdentifier: "endpoint-s3",
      EndpointType: "source",
      EngineDisplayName: "Amazon S3",
      EngineName: "s3",
      ExternalTableDefinition: '{"key":"a"}',
      S3Settings: {
        AddColumnName: true,
        BucketFolder: "csv",
        BucketName: "gc-dms-s3",
        CsvDelimiter: ",",
        CsvRowDelimiter: "\\n",
        EnableStatistics: true,
        ExternalTableDefinition: '{"key":"a"}',
      },
      SslMode: "none",
    }),
    dependencies: ({}) => ({
      iamRoleServiceAccess: "role-s3-rw",
    }),
  },
  {
    type: "Endpoint",
    group: "DMS",
    properties: ({}) => ({
      EndpointIdentifier: "endpount-s3-target",
      EndpointType: "target",
      EngineDisplayName: "Amazon S3",
      EngineName: "s3",
      S3Settings: {
        BucketFolder: "csv",
        BucketName: "gc-dms-s3-target",
        CompressionType: "NONE",
        CsvDelimiter: ",",
        CsvRowDelimiter: "\\n",
        DatePartitionEnabled: false,
        EnableStatistics: true,
      },
      SslMode: "none",
    }),
    dependencies: ({}) => ({
      iamRoleServiceAccess: "role-s3-rw",
    }),
  },
  {
    type: "ReplicationInstance",
    group: "DMS",
    properties: ({}) => ({
      AllocatedStorage: 5,
      AutoMinorVersionUpgrade: true,
      AvailabilityZone: "us-east-1a",
      EngineVersion: "3.4.7",
      MultiAZ: false,
      NetworkType: "IPV4",
      PreferredMaintenanceWindow: "sat:08:19-sat:08:49",
      PubliclyAccessible: false,
      ReplicationInstanceClass: "dms.t3.micro",
      ReplicationInstanceIdentifier: "replication-instance",
    }),
    dependencies: ({}) => ({
      subnetGroup: "my-subnet-group",
      securityGroups: ["sg::vpc::default"],
    }),
  },
  {
    type: "ReplicationSubnetGroup",
    group: "DMS",
    properties: ({}) => ({
      ReplicationSubnetGroupDescription: "Subnet Group",
      ReplicationSubnetGroupIdentifier: "my-subnet-group",
      SupportedNetworkTypes: ["IPV4"],
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `vpc::subnet-private1-${config.region}a`,
        `vpc::subnet-private2-${config.region}b`,
      ],
    }),
  },
  {
    type: "ReplicationTask",
    group: "DMS",
    properties: ({}) => ({
      MigrationType: "full-load",
      ReplicationTaskIdentifier: "task",
      ReplicationTaskSettings: {
        TargetMetadata: {
          TargetSchema: "",
          SupportLobs: true,
          FullLobMode: false,
          LobChunkSize: 0,
          LimitedSizeLobMode: true,
          LobMaxSize: 32,
          InlineLobMaxSize: 0,
          LoadMaxFileSize: 0,
          ParallelLoadThreads: 0,
          ParallelLoadBufferSize: 0,
          BatchApplyEnabled: false,
          TaskRecoveryTableEnabled: false,
          ParallelLoadQueuesPerThread: 0,
          ParallelApplyThreads: 0,
          ParallelApplyBufferSize: 0,
          ParallelApplyQueuesPerThread: 0,
        },
        FullLoadSettings: {
          TargetTablePrepMode: "DROP_AND_CREATE",
          CreatePkAfterFullLoad: false,
          StopTaskCachedChangesApplied: false,
          StopTaskCachedChangesNotApplied: false,
          MaxFullLoadSubTasks: 8,
          TransactionConsistencyTimeout: 600,
          CommitRate: 10000,
        },
        Logging: {
          EnableLogging: false,
          EnableLogContext: false,
          LogComponents: [
            {
              Id: "TRANSFORMATION",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "SOURCE_UNLOAD",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "IO",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "TARGET_LOAD",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "PERFORMANCE",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "SOURCE_CAPTURE",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "SORTER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "REST_SERVER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "VALIDATOR_EXT",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "TARGET_APPLY",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "TASK_MANAGER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "TABLES_MANAGER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "METADATA_MANAGER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "FILE_FACTORY",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "COMMON",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "ADDONS",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "DATA_STRUCTURE",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "COMMUNICATION",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
            {
              Id: "FILE_TRANSFER",
              Severity: "LOGGER_SEVERITY_DEFAULT",
            },
          ],
          CloudWatchLogGroup: null,
          CloudWatchLogStream: null,
        },
        ControlTablesSettings: {
          historyTimeslotInMinutes: 5,
          ControlSchema: "",
          HistoryTimeslotInMinutes: 5,
          HistoryTableEnabled: false,
          SuspendedTablesTableEnabled: false,
          StatusTableEnabled: false,
          FullLoadExceptionTableEnabled: false,
        },
        StreamBufferSettings: {
          StreamBufferCount: 3,
          StreamBufferSizeInMB: 8,
          CtrlStreamBufferSizeInMB: 5,
        },
        ChangeProcessingDdlHandlingPolicy: {
          HandleSourceTableDropped: true,
          HandleSourceTableTruncated: true,
          HandleSourceTableAltered: true,
        },
        ErrorBehavior: {
          DataErrorPolicy: "LOG_ERROR",
          EventErrorPolicy: "IGNORE",
          DataTruncationErrorPolicy: "LOG_ERROR",
          DataErrorEscalationPolicy: "SUSPEND_TABLE",
          DataErrorEscalationCount: 0,
          TableErrorPolicy: "SUSPEND_TABLE",
          TableErrorEscalationPolicy: "STOP_TASK",
          TableErrorEscalationCount: 0,
          RecoverableErrorCount: -1,
          RecoverableErrorInterval: 5,
          RecoverableErrorThrottling: true,
          RecoverableErrorThrottlingMax: 1800,
          RecoverableErrorStopRetryAfterThrottlingMax: true,
          ApplyErrorDeletePolicy: "IGNORE_RECORD",
          ApplyErrorInsertPolicy: "LOG_ERROR",
          ApplyErrorUpdatePolicy: "LOG_ERROR",
          ApplyErrorEscalationPolicy: "LOG_ERROR",
          ApplyErrorEscalationCount: 0,
          ApplyErrorFailOnTruncationDdl: false,
          FullLoadIgnoreConflicts: true,
          FailOnTransactionConsistencyBreached: false,
          FailOnNoTablesCaptured: true,
        },
        ChangeProcessingTuning: {
          BatchApplyPreserveTransaction: true,
          BatchApplyTimeoutMin: 1,
          BatchApplyTimeoutMax: 30,
          BatchApplyMemoryLimit: 500,
          BatchSplitSize: 0,
          MinTransactionSize: 1000,
          CommitTimeout: 1,
          MemoryLimitTotal: 1024,
          MemoryKeepTime: 60,
          StatementCacheSize: 50,
        },
        PostProcessingRules: null,
        CharacterSetSettings: null,
        LoopbackPreventionSettings: null,
        BeforeImageSettings: null,
        FailTaskWhenCleanTaskResourceFailed: false,
        TTSettings: null,
      },
      TableMappings: {
        rules: [
          {
            "rule-type": "selection",
            "rule-id": "512474359",
            "rule-name": "512474359",
            "object-locator": {
              "schema-name": "%",
              "table-name": "%",
            },
            "rule-action": "include",
            filters: [],
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      replicationInstance: "replication-instance",
      sourceEndpoint: "endpoint-s3",
      destinationEndpoint: "endpount-s3-target",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `subnet-private1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 8,
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `subnet-private2-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 9,
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `rtb-private1-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `rtb-private2-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `vpc::rtb-private1-${config.region}a`,
      subnet: `vpc::subnet-private1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `vpc::rtb-private2-${config.region}b`,
      subnet: `vpc::subnet-private2-${config.region}b`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::vpc::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "dms-vpc-role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "dms.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonDMSVPCManagementRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "role-s3-rw",
      Description:
        "Allows Database Migration Service to call AWS services on your behalf.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "dms.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonS3FullAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3FullAccess",
        },
      ],
    }),
  },
];
