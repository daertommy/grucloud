// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({}) => ({
      CidrBlock: "192.168.0.0/16",
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeNatGateway({
    name: "nat-gateway",
    dependencies: () => ({
      subnet: "subnet-public-a",
      eip: "eip",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.96.0/19",
      AvailabilityZone: `${config.region}a`,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.128.0/19",
      AvailabilityZone: `${config.region}b`,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
    }),
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-a",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-b",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.useDefaultRouteTable({
    name: "rt-default-vpc",
    dependencies: () => ({
      vpc: "vpc",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "route-table-private-a",
      subnet: "subnet-private-a",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "route-table-private-b",
      subnet: "subnet-private-b",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      subnet: "subnet-public-a",
    }),
  });

  provider.EC2.makeRouteTableAssociation({
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      subnet: "subnet-public-b",
    }),
  });

  provider.EC2.makeRoute({
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: () => ({
      routeTable: "route-table-private-a",
      natGateway: "nat-gateway",
    }),
  });

  provider.EC2.makeRoute({
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: () => ({
      routeTable: "route-table-private-b",
      natGateway: "nat-gateway",
    }),
  });

  provider.EC2.makeRoute({
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: () => ({
      routeTable: "rt-default-vpc",
      ig: "internet-gateway",
    }),
  });

  provider.EC2.makeElasticIpAddress({
    name: "eip",
  });
};

exports.createResources = createResources;
