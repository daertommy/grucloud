// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.ec2.makeVpc({
    name: get("config.ec2.Vpc.vpcEc2Example.name"),
    properties: get("config.ec2.Vpc.vpcEc2Example.properties"),
  });

  provider.ec2.makeSubnet({
    name: get("config.ec2.Subnet.subnet.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcEc2Example,
    }),
    properties: get("config.ec2.Subnet.subnet.properties"),
  });

  provider.ec2.makeKeyPair({
    name: get("config.ec2.KeyPair.kpEc2Vpc.name"),
  });

  provider.ec2.makeVolume({
    name: get("config.ec2.Volume.volume.name"),
    properties: get("config.ec2.Volume.volume.properties"),
  });

  provider.ec2.makeElasticIpAddress({
    name: get("config.ec2.ElasticIpAddress.myip.name"),
  });

  provider.ec2.makeInternetGateway({
    name: get("config.ec2.InternetGateway.ig.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcEc2Example,
    }),
  });

  provider.ec2.makeRouteTable({
    name: get("config.ec2.RouteTable.routeTable.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcEc2Example,
      subnets: [resources.ec2.Subnet.subnet],
    }),
  });

  provider.ec2.makeRoute({
    name: get("config.ec2.Route.routeIg.name"),
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTable,
      ig: resources.ec2.InternetGateway.ig,
    }),
    properties: get("config.ec2.Route.routeIg.properties"),
  });

  provider.ec2.makeSecurityGroup({
    name: get("config.ec2.SecurityGroup.securityGroup.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcEc2Example,
    }),
    properties: get("config.ec2.SecurityGroup.securityGroup.properties"),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: get("config.ec2.SecurityGroupRuleIngress.sgRuleIngressIcmp.name"),
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroup,
    }),
    properties: get(
      "config.ec2.SecurityGroupRuleIngress.sgRuleIngressIcmp.properties"
    ),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: get("config.ec2.SecurityGroupRuleIngress.sgRuleIngressSsh.name"),
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroup,
    }),
    properties: get(
      "config.ec2.SecurityGroupRuleIngress.sgRuleIngressSsh.properties"
    ),
  });

  provider.ec2.makeInstance({
    name: get("config.ec2.Instance.webServerEc2Vpc.name"),
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnet,
      keyPair: resources.ec2.KeyPair.kpEc2Vpc,
      eip: resources.ec2.ElasticIpAddress.myip,
      securityGroups: [resources.ec2.SecurityGroup.securityGroup],
      volumes: [resources.ec2.Volume.volume],
    }),
    properties: get("config.ec2.Instance.webServerEc2Vpc.properties"),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
