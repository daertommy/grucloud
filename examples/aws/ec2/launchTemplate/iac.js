// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.IAM.makeRole({
    name: get("config.IAM.Role.roleEcs.name"),
    properties: get("config.IAM.Role.roleEcs.properties"),
  });

  provider.IAM.makeInstanceProfile({
    name: get("config.IAM.InstanceProfile.roleEcs.name"),
    dependencies: ({ resources }) => ({
      roles: [resources.IAM.Role.roleEcs],
    }),
  });

  provider.EC2.makeVpc({
    name: get("config.EC2.Vpc.vpc.name"),
    properties: get("config.EC2.Vpc.vpc.properties"),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.pubSubnetAz1.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
    properties: get("config.EC2.Subnet.pubSubnetAz1.properties"),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.pubSubnetAz2.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
    properties: get("config.EC2.Subnet.pubSubnetAz2.properties"),
  });

  provider.EC2.makeKeyPair({
    name: get("config.EC2.KeyPair.kpEcs.name"),
  });

  provider.EC2.makeSecurityGroup({
    name: get("config.EC2.SecurityGroup.ecsSecurityGroup.name"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
    properties: get("config.EC2.SecurityGroup.ecsSecurityGroup.properties"),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: get(
      "config.EC2.SecurityGroupRuleIngress.ecsSecurityGroupRuleIngressTcp_80V4.name"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.ecsSecurityGroup,
    }),
    properties: get(
      "config.EC2.SecurityGroupRuleIngress.ecsSecurityGroupRuleIngressTcp_80V4.properties"
    ),
  });

  provider.EC2.makeLaunchTemplate({
    name: get("config.EC2.LaunchTemplate.ltEc2Micro.name"),
    dependencies: ({ resources }) => ({
      keyPair: resources.EC2.KeyPair.kpEcs,
      securityGroups: [resources.EC2.SecurityGroup.ecsSecurityGroup],
      iamInstanceProfile: resources.IAM.InstanceProfile.roleEcs,
    }),
    properties: get("config.EC2.LaunchTemplate.ltEc2Micro.properties"),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
