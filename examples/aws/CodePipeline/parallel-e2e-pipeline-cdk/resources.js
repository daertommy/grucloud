// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Rule",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      EventPattern: {
        detail: {
          event: ["referenceCreated", "referenceUpdated"],
          referenceName: ["mainline"],
        },
        "detail-type": ["CodeCommit Repository State Change"],
        resources: [
          "arn:aws:codecommit:us-east-1:840541460064:serverless-patterns",
        ],
        source: ["aws.codecommit"],
      },
      Name: "ParallelE2EPipelineCDK-ImportedRepoParallelE2EPipe-XMTRRUGDXQDA",
    }),
  },
  {
    type: "Target",
    group: "CloudWatchEvents",
    properties: ({}) => ({
      Id: "Target0",
    }),
    dependencies: ({}) => ({
      rule: "ParallelE2EPipelineCDK-ImportedRepoParallelE2EPipe-XMTRRUGDXQDA",
      role: "ParallelE2EPipelineCDK-ServerlessLandPipelineEvent-G982ODNO3W19",
      codePipeline: "ParallelE2EPipelineCDK",
    }),
  },
  {
    type: "Project",
    group: "CodeBuild",
    properties: ({}) => ({
      artifacts: {
        encryptionDisabled: false,
        name: "E2ETestsGroupOne5C705D7F-AlarL1qzSAzx",
        packaging: "NONE",
        type: "CODEPIPELINE",
      },
      environment: {
        computeType: "BUILD_GENERAL1_SMALL",
        environmentVariables: [],
        image: "aws/codebuild/standard:5.0",
        imagePullCredentialsType: "CODEBUILD",
        privilegedMode: false,
        type: "LINUX_CONTAINER",
      },
      name: "E2ETestsGroupOne5C705D7F-AlarL1qzSAzx",
      source: {
        buildspec: `{
  "version": "0.2",
  "phases": {
    "install": {
      "commands": [
        "echo "Run install commands"",
        "npm install -g typescript"
      ]
    },
    "pre_build": {
      "commands": []
    },
    "build": {
      "commands": [
        "cd parallel-e2e-pipeline-cdk/src/mock-e2e-tests",
        "echo "Run additional commands for E2E_Tests_Group_One"",
        "tsc mock-e2e-1.ts",
        "node mock-e2e-1.ts"
      ]
    },
    "post_build": {
      "commands": []
    }
  }
}`,
        type: "CODEPIPELINE",
      },
    }),
    dependencies: ({}) => ({
      serviceRole:
        "ParallelE2EPipelineCDK-E2EBuildRoleE2EStackRoleDBE-O2FK2BQJJZ2B",
    }),
  },
  {
    type: "Project",
    group: "CodeBuild",
    properties: ({}) => ({
      artifacts: {
        encryptionDisabled: false,
        name: "E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb",
        packaging: "NONE",
        type: "CODEPIPELINE",
      },
      environment: {
        computeType: "BUILD_GENERAL1_SMALL",
        environmentVariables: [],
        image: "aws/codebuild/standard:5.0",
        imagePullCredentialsType: "CODEBUILD",
        privilegedMode: false,
        type: "LINUX_CONTAINER",
      },
      name: "E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb",
      source: {
        buildspec: `{
  "version": "0.2",
  "phases": {
    "install": {
      "commands": [
        "echo "Run install commands"",
        "npm install -g typescript"
      ]
    },
    "pre_build": {
      "commands": []
    },
    "build": {
      "commands": [
        "cd parallel-e2e-pipeline-cdk/src/mock-e2e-tests",
        "echo "Run additional commands for E2E_Tests_Group_Two"",
        "tsc mock-e2e-1.ts",
        "node mock-e2e-2.ts"
      ]
    },
    "post_build": {
      "commands": []
    }
  }
}`,
        type: "CODEPIPELINE",
      },
    }),
    dependencies: ({}) => ({
      serviceRole:
        "ParallelE2EPipelineCDK-E2EBuildRoleE2EStackRoleDBE-O2FK2BQJJZ2B",
    }),
  },
  {
    type: "Pipeline",
    group: "CodePipeline",
    properties: ({ config }) => ({
      pipeline: {
        artifactStore: {
          location:
            "parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
          type: "S3",
        },
        name: "ParallelE2EPipelineCDK",
        stages: [
          {
            actions: [
              {
                actionTypeId: {
                  category: "Source",
                  owner: "AWS",
                  provider: "CodeCommit",
                  version: "1",
                },
                configuration: {
                  BranchName: "mainline",
                  PollForSourceChanges: "false",
                  RepositoryName: "serverless-patterns",
                },
                inputArtifacts: [],
                name: "CodeCommit_Source",
                outputArtifacts: [
                  {
                    name: "Artifact_Source_CodeCommit_Source",
                  },
                ],
                roleArn: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineSourc-AZY0KWSGV8WZ`,
                runOrder: 1,
              },
            ],
            name: "Source",
          },
          {
            actions: [
              {
                actionTypeId: {
                  category: "Build",
                  owner: "AWS",
                  provider: "CodeBuild",
                  version: "1",
                },
                configuration: {
                  ProjectName: "E2ETestsGroupOne5C705D7F-AlarL1qzSAzx",
                },
                inputArtifacts: [
                  {
                    name: "Artifact_Source_CodeCommit_Source",
                  },
                ],
                name: "E2E_Tests_Group_One",
                outputArtifacts: [
                  {
                    name: "E2E_Tests_Group_One_Ouput",
                  },
                ],
                roleArn: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-BY7GAATK90TK`,
                runOrder: 1,
              },
              {
                actionTypeId: {
                  category: "Build",
                  owner: "AWS",
                  provider: "CodeBuild",
                  version: "1",
                },
                configuration: {
                  ProjectName: "E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb",
                },
                inputArtifacts: [
                  {
                    name: "Artifact_Source_CodeCommit_Source",
                  },
                ],
                name: "E2E_Tests_Group_Two",
                outputArtifacts: [
                  {
                    name: "E2E_Tests_Group_Two_Ouput",
                  },
                ],
                roleArn: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-179GAAJC09B9F`,
                runOrder: 1,
              },
            ],
            name: "End_to_End_Tests",
          },
        ],
        version: 1,
      },
    }),
    dependencies: ({}) => ({
      role: "ParallelE2EPipelineCDK-PipelineRole1E536F97-IZIWS0O1DTXY",
      codeBuildProjects: [
        "E2ETestsGroupOne5C705D7F-AlarL1qzSAzx",
        "E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb",
      ],
      kmsKey:
        "alias/codepipeline-parallele2epipelinecdkserverlesslandpipelineedfc43a9",
      s3Bucket:
        "parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ParallelE2EPipelineCDK-E2EBuildRoleE2EStackRoleDBE-O2FK2BQJJZ2B",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "codebuild.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                ],
                Resource: [
                  `arn:aws:logs:${
                    config.region
                  }:${config.accountId()}:log-group:/aws/codebuild/E2ETestsGroupOne5C705D7F-AlarL1qzSAzx`,
                  `arn:aws:logs:${
                    config.region
                  }:${config.accountId()}:log-group:/aws/codebuild/E2ETestsGroupOne5C705D7F-AlarL1qzSAzx:*`,
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "codebuild:CreateReportGroup",
                  "codebuild:CreateReport",
                  "codebuild:UpdateReport",
                  "codebuild:BatchPutTestCases",
                  "codebuild:BatchPutCodeCoverages",
                ],
                Resource: `arn:aws:codebuild:${
                  config.region
                }:${config.accountId()}:report-group/E2ETestsGroupOne5C705D7F-AlarL1qzSAzx-*`,
                Effect: "Allow",
              },
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                ],
                Resource: [
                  `arn:aws:logs:${
                    config.region
                  }:${config.accountId()}:log-group:/aws/codebuild/E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb`,
                  `arn:aws:logs:${
                    config.region
                  }:${config.accountId()}:log-group:/aws/codebuild/E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb:*`,
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "codebuild:CreateReportGroup",
                  "codebuild:CreateReport",
                  "codebuild:UpdateReport",
                  "codebuild:BatchPutTestCases",
                  "codebuild:BatchPutCodeCoverages",
                ],
                Resource: `arn:aws:codebuild:${
                  config.region
                }:${config.accountId()}:report-group/E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb-*`,
                Effect: "Allow",
              },
              {
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                Resource: [
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20/*",
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `arn:aws:kms:${
                  config.region
                }:${config.accountId()}:key/2fff1651-05aa-461a-b1a8-a47263ab57de`,
                Effect: "Allow",
              },
              {
                Action: [
                  "kms:Decrypt",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `arn:aws:kms:${
                  config.region
                }:${config.accountId()}:key/2fff1651-05aa-461a-b1a8-a47263ab57de`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "E2EBuildRoleE2EStackRoleDefaultPolicy8FD1DA8B",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          PolicyName: "AmazonS3FullAccess",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "ParallelE2EPipelineCDK-PipelineRole1E536F97-IZIWS0O1DTXY",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "codepipeline.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "sts:*",
                Resource: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-E2EBuildRoleE2EStackRoleDBE-O2FK2BQJJZ2B`,
                Effect: "Allow",
              },
              {
                Action: [
                  "codecommit:GetBranch",
                  "codecommit:GetCommit",
                  "codecommit:UploadArchive",
                  "codecommit:GetUploadArchiveStatus",
                  "codecommit:CancelUploadArchive",
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild",
                  "codedeploy:CreateDeployment",
                  "codedeploy:GetApplicationRevision",
                  "codedeploy:GetDeployment",
                  "codedeploy:GetDeploymentConfig",
                  "codedeploy:RegisterApplicationRevision",
                ],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "base_policy",
        },
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                Resource: [
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20/*",
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `arn:aws:kms:${
                  config.region
                }:${config.accountId()}:key/2fff1651-05aa-461a-b1a8-a47263ab57de`,
                Effect: "Allow",
              },
              {
                Action: "sts:AssumeRole",
                Resource: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineSourc-AZY0KWSGV8WZ`,
                Effect: "Allow",
              },
              {
                Action: "sts:AssumeRole",
                Resource: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-BY7GAATK90TK`,
                Effect: "Allow",
              },
              {
                Action: "sts:AssumeRole",
                Resource: `arn:aws:iam::${config.accountId()}:role/ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-179GAAJC09B9F`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "PipelineRoleDefaultPolicyDC176590",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-179GAAJC09B9F",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild",
                  "codebuild:StopBuild",
                ],
                Resource: `arn:aws:codebuild:${
                  config.region
                }:${config.accountId()}:project/E2ETestsGroupTwoCD478F60-ndZB2YRCtJxb`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "ServerlessLandPipelineEndtoEndTestsE2ETestsGroupTwoCodePipelineActionRoleDefaultPolicy7D215F22",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ParallelE2EPipelineCDK-ServerlessLandPipelineEndto-BY7GAATK90TK",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "codebuild:BatchGetBuilds",
                  "codebuild:StartBuild",
                  "codebuild:StopBuild",
                ],
                Resource: `arn:aws:codebuild:${
                  config.region
                }:${config.accountId()}:project/E2ETestsGroupOne5C705D7F-AlarL1qzSAzx`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "ServerlessLandPipelineEndtoEndTestsE2ETestsGroupOneCodePipelineActionRoleDefaultPolicy83063F11",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ParallelE2EPipelineCDK-ServerlessLandPipelineEvent-G982ODNO3W19",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "events.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "codepipeline:StartPipelineExecution",
                Resource: `arn:aws:codepipeline:${
                  config.region
                }:${config.accountId()}:ParallelE2EPipelineCDK`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "ServerlessLandPipelineEventsRoleDefaultPolicy16007DA6",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "ParallelE2EPipelineCDK-ServerlessLandPipelineSourc-AZY0KWSGV8WZ",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:PutObjectLegalHold",
                  "s3:PutObjectRetention",
                  "s3:PutObjectTagging",
                  "s3:PutObjectVersionTagging",
                  "s3:Abort*",
                ],
                Resource: [
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
                  "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20/*",
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "kms:Decrypt",
                  "kms:DescribeKey",
                  "kms:Encrypt",
                  "kms:ReEncrypt*",
                  "kms:GenerateDataKey*",
                ],
                Resource: `arn:aws:kms:${
                  config.region
                }:${config.accountId()}:key/2fff1651-05aa-461a-b1a8-a47263ab57de`,
                Effect: "Allow",
              },
              {
                Action: [
                  "codecommit:GetBranch",
                  "codecommit:GetCommit",
                  "codecommit:UploadArchive",
                  "codecommit:GetUploadArchiveStatus",
                  "codecommit:CancelUploadArchive",
                ],
                Resource: `arn:aws:codecommit:${
                  config.region
                }:${config.accountId()}:serverless-patterns`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "ServerlessLandPipelineSourceCodeCommitSourceCodePipelineActionRoleDefaultPolicyEA870B7B",
        },
      ],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "alias/codepipeline-parallele2epipelinecdkserverlesslandpipelineedfc43a9",
    properties: ({ config }) => ({
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: "*",
          },
        ],
      },
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({}) => ({
      Name: "parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Deny",
            Principal: {
              AWS: "*",
            },
            Action: "s3:*",
            Resource: [
              "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20",
              "arn:aws:s3:::parallele2epipelinecdk-serverlesslandpipelinearti-ndaqlnfwca20/*",
            ],
            Condition: {
              Bool: {
                "aws:SecureTransport": "false",
              },
            },
          },
        ],
      },
    }),
  },
];
