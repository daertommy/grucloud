// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Project",
    group: "CodeBuild",
    properties: ({}) => ({
      artifacts: {
        encryptionDisabled: false,
        name: "starhackit",
        packaging: "NONE",
        type: "CODEPIPELINE",
      },
      environment: {
        computeType: "BUILD_GENERAL1_SMALL",
        environmentVariables: [],
        image: "aws/codebuild/amazonlinux2-x86_64-standard:4.0",
        imagePullCredentialsType: "CODEBUILD",
        privilegedMode: true,
        type: "LINUX_CONTAINER",
      },
      logsConfig: {
        cloudWatchLogs: {
          status: "ENABLED",
        },
        s3Logs: {
          encryptionDisabled: false,
          status: "DISABLED",
        },
      },
      name: "starhackit",
      source: {
        type: "CODEPIPELINE",
      },
    }),
    dependencies: ({}) => ({
      serviceRole: "codebuild-starhackit-service-role",
    }),
  },
  {
    type: "Pipeline",
    group: "CodePipeline",
    properties: ({ config, getId }) => ({
      pipeline: {
        artifactStore: {
          location: `codepipeline-${config.region}-${config.accountId()}`,
          type: "S3",
        },
        name: "my-pipeline",
        stages: [
          {
            actions: [
              {
                actionTypeId: {
                  category: "Source",
                  owner: "AWS",
                  provider: "CodeStarSourceConnection",
                  version: "1",
                },
                configuration: {
                  BranchName: "master",
                  ConnectionArn: `${getId({
                    type: "Connection",
                    group: "CodeStarConnections",
                    name: "myconn",
                  })}`,
                  FullRepositoryId: "FredericHeem/starhackit",
                  OutputArtifactFormat: "CODE_ZIP",
                },
                inputArtifacts: [],
                name: "Source",
                namespace: "SourceVariables",
                outputArtifacts: [
                  {
                    name: "SourceArtifact",
                  },
                ],
                region: "us-east-1",
                runOrder: 1,
              },
            ],
            name: "Source",
          },
          {
            actions: [
              {
                actionTypeId: {
                  category: "Build",
                  owner: "AWS",
                  provider: "CodeBuild",
                  version: "1",
                },
                configuration: {
                  ProjectName: "starhackit",
                },
                inputArtifacts: [
                  {
                    name: "SourceArtifact",
                  },
                ],
                name: "Build",
                namespace: "BuildVariables",
                outputArtifacts: [
                  {
                    name: "BuildArtifact",
                  },
                ],
                region: "us-east-1",
                runOrder: 1,
              },
            ],
            name: "Build",
          },
        ],
        version: 1,
      },
    }),
    dependencies: ({ config }) => ({
      role: `AWSCodePipelineServiceRole-${config.region}-my-pipeline`,
      connections: ["myconn"],
      codeBuildProjects: ["starhackit"],
      s3Bucket: `codepipeline-${config.region}-${config.accountId()}`,
    }),
  },
  {
    type: "Connection",
    group: "CodeStarConnections",
    properties: ({}) => ({
      ConnectionName: "myconn",
      ProviderType: "GitHub",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: `AWSCodePipelineServiceRole-${config.region}-my-pipeline`,
      PolicyDocument: {
        Statement: [
          {
            Action: ["iam:PassRole"],
            Condition: {
              StringEqualsIfExists: {
                "iam:PassedToService": [
                  "cloudformation.amazonaws.com",
                  "elasticbeanstalk.amazonaws.com",
                  "ec2.amazonaws.com",
                  "ecs-tasks.amazonaws.com",
                ],
              },
            },
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "codecommit:CancelUploadArchive",
              "codecommit:GetBranch",
              "codecommit:GetCommit",
              "codecommit:GetRepository",
              "codecommit:GetUploadArchiveStatus",
              "codecommit:UploadArchive",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "codedeploy:CreateDeployment",
              "codedeploy:GetApplication",
              "codedeploy:GetApplicationRevision",
              "codedeploy:GetDeployment",
              "codedeploy:GetDeploymentConfig",
              "codedeploy:RegisterApplicationRevision",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["codestar-connections:UseConnection"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "elasticbeanstalk:*",
              "ec2:*",
              "elasticloadbalancing:*",
              "autoscaling:*",
              "cloudwatch:*",
              "s3:*",
              "sns:*",
              "cloudformation:*",
              "rds:*",
              "sqs:*",
              "ecs:*",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["lambda:InvokeFunction", "lambda:ListFunctions"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "opsworks:CreateDeployment",
              "opsworks:DescribeApps",
              "opsworks:DescribeCommands",
              "opsworks:DescribeDeployments",
              "opsworks:DescribeInstances",
              "opsworks:DescribeStacks",
              "opsworks:UpdateApp",
              "opsworks:UpdateStack",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "cloudformation:CreateStack",
              "cloudformation:DeleteStack",
              "cloudformation:DescribeStacks",
              "cloudformation:UpdateStack",
              "cloudformation:CreateChangeSet",
              "cloudformation:DeleteChangeSet",
              "cloudformation:DescribeChangeSet",
              "cloudformation:ExecuteChangeSet",
              "cloudformation:SetStackPolicy",
              "cloudformation:ValidateTemplate",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "codebuild:BatchGetBuilds",
              "codebuild:StartBuild",
              "codebuild:BatchGetBuildBatches",
              "codebuild:StartBuildBatch",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "devicefarm:ListProjects",
              "devicefarm:ListDevicePools",
              "devicefarm:GetRun",
              "devicefarm:GetUpload",
              "devicefarm:CreateUpload",
              "devicefarm:ScheduleRun",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "servicecatalog:ListProvisioningArtifacts",
              "servicecatalog:CreateProvisioningArtifact",
              "servicecatalog:DescribeProvisioningArtifact",
              "servicecatalog:DeleteProvisioningArtifact",
              "servicecatalog:UpdateProduct",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["cloudformation:ValidateTemplate"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: ["ecr:DescribeImages"],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "states:DescribeExecution",
              "states:DescribeStateMachine",
              "states:StartExecution",
            ],
            Effect: "Allow",
            Resource: "*",
          },
          {
            Action: [
              "appconfig:StartDeployment",
              "appconfig:StopDeployment",
              "appconfig:GetDeployment",
            ],
            Effect: "Allow",
            Resource: "*",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/service-role/",
      Description: "Policy used in trust relationship with CodePipeline",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName: `CodeBuildBasePolicy-starhackit-${config.region}`,
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents",
            ],
            Effect: "Allow",
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/codebuild/starhackit`,
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/codebuild/starhackit:*`,
            ],
          },
          {
            Action: [
              "s3:PutObject",
              "s3:GetObject",
              "s3:GetObjectVersion",
              "s3:GetBucketAcl",
              "s3:GetBucketLocation",
            ],
            Effect: "Allow",
            Resource: [`arn:aws:s3:::codepipeline-${config.region}-*`],
          },
          {
            Action: [
              "codebuild:CreateReportGroup",
              "codebuild:CreateReport",
              "codebuild:UpdateReport",
              "codebuild:BatchPutTestCases",
              "codebuild:BatchPutCodeCoverages",
            ],
            Effect: "Allow",
            Resource: [
              `arn:aws:codebuild:${
                config.region
              }:${config.accountId()}:report-group/starhackit-*`,
            ],
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/service-role/",
      Description: "Policy used in trust relationship with CodeBuild",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: `AWSCodePipelineServiceRole-${config.region}-my-pipeline`,
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "codepipeline.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ config }) => ({
      policies: [`AWSCodePipelineServiceRole-${config.region}-my-pipeline`],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "codebuild-starhackit-service-role",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "codebuild.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ config }) => ({
      policies: [`CodeBuildBasePolicy-starhackit-${config.region}`],
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ config }) => ({
      Name: `codepipeline-${config.region}-${config.accountId()}`,
      Policy: {
        Version: "2012-10-17",
        Id: "SSEAndSSLPolicy",
        Statement: [
          {
            Sid: "DenyUnEncryptedObjectUploads",
            Effect: "Deny",
            Principal: "*",
            Action: "s3:PutObject",
            Resource: `arn:aws:s3:::codepipeline-${
              config.region
            }-${config.accountId()}/*`,
            Condition: {
              StringNotEquals: {
                "s3:x-amz-server-side-encryption": "aws:kms",
              },
            },
          },
          {
            Sid: "DenyInsecureConnections",
            Effect: "Deny",
            Principal: "*",
            Action: "s3:*",
            Resource: `arn:aws:s3:::codepipeline-${
              config.region
            }-${config.accountId()}/*`,
            Condition: {
              Bool: {
                "aws:SecureTransport": "false",
              },
            },
          },
        ],
      },
    }),
  },
];
