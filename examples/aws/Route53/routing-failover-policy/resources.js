// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  { type: "InternetGateway", group: "EC2", name: "ig" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "project1-vpc",
      internetGateway: "ig",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      ig: "ig",
      routeTable: `project1-vpc::project1-rtb-private1-${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      ig: "ig",
      routeTable: `project1-vpc::project1-rtb-private2-${config.region}b`,
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `project1-rtb-private1-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `project1-rtb-private2-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `project1-vpc::project1-rtb-private1-${config.region}a`,
      subnet: `project1-vpc::project1-subnet-private1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `project1-vpc::project1-rtb-private2-${config.region}b`,
      subnet: `project1-vpc::project1-subnet-private2-${config.region}b`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::project1-vpc::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `project1-subnet-private1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 8,
    }),
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `project1-subnet-private2-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 9,
    }),
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "project1-vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({ getId }) => ({
      DefaultActions: [
        {
          ForwardConfig: {
            TargetGroups: [
              {
                TargetGroupArn: `${getId({
                  type: "TargetGroup",
                  group: "ElasticLoadBalancingV2",
                  name: "tg1",
                })}`,
                Weight: 1,
              },
            ],
            TargetGroupStickinessConfig: {
              Enabled: false,
            },
          },
          TargetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "tg1",
          })}`,
          Type: "forward",
        },
      ],
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "alb1",
      targetGroups: ["tg1"],
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "alb1",
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `project1-vpc::project1-subnet-private1-${config.region}a`,
        `project1-vpc::project1-subnet-private2-${config.region}b`,
      ],
      securityGroups: ["sg::project1-vpc::default"],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      HealthCheckPath: "/",
      HealthCheckPort: "traffic-port",
      HealthCheckProtocol: "HTTP",
      Matcher: {
        HttpCode: "200",
      },
      Name: "tg1",
      Port: 80,
      Protocol: "HTTP",
      ProtocolVersion: "HTTP1",
      TargetType: "ip",
    }),
    dependencies: ({}) => ({
      vpc: "project1-vpc",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({}) => ({
      Name: "grucloud.org.",
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
      Failover: "PRIMARY",
      Name: "grucloud.org.",
      SetIdentifier: "us-east-1",
      Type: "A",
    }),
    dependencies: ({}) => ({
      hostedZone: "grucloud.org.",
      loadBalancer: "alb1",
    }),
  },
];
