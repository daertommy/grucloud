// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-ConsumerFunctionRole-DF0H4257527E",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["kinesis:ListStreams", "kinesis:DescribeLimits"],
                Resource: `arn:aws:kinesis:${
                  config.region
                }:${config.accountId()}:stream/*`,
                Effect: "Allow",
              },
              {
                Action: [
                  "kinesis:DescribeStream",
                  "kinesis:DescribeStreamSummary",
                  "kinesis:GetRecords",
                  "kinesis:GetShardIterator",
                ],
                Resource: `arn:aws:kinesis:${
                  config.region
                }:${config.accountId()}:stream/testDataStream`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "ConsumerFunctionRolePolicy0",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
        {
          PolicyName: "AWSLambdaKinesisExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "sam-app-ProducerFunctionRole-1H2OPGZAUXNJQ",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "kinesis:AddTagsToStream",
                  "kinesis:CreateStream",
                  "kinesis:DecreaseStreamRetentionPeriod",
                  "kinesis:DeleteStream",
                  "kinesis:DescribeStream",
                  "kinesis:DescribeStreamSummary",
                  "kinesis:GetShardIterator",
                  "kinesis:IncreaseStreamRetentionPeriod",
                  "kinesis:ListTagsForStream",
                  "kinesis:MergeShards",
                  "kinesis:PutRecord",
                  "kinesis:PutRecords",
                  "kinesis:SplitShard",
                  "kinesis:RemoveTagsFromStream",
                ],
                Resource: `arn:aws:kinesis:${
                  config.region
                }:${config.accountId()}:stream/testDataStream`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "ProducerFunctionRolePolicy0",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Stream",
    group: "Kinesis",
    properties: ({}) => ({
      StreamName: "testDataStream",
      ShardCount: 1,
    }),
  },
  {
    type: "EventSourceMapping",
    group: "Lambda",
    properties: ({}) => ({
      BatchSize: 100,
      BisectBatchOnFunctionError: false,
      MaximumRecordAgeInSeconds: -1,
      MaximumRetryAttempts: -1,
      ParallelizationFactor: 1,
      StartingPosition: "LATEST",
      TumblingWindowInSeconds: 0,
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-ConsumerFunction-2xHfZ11YBuSk",
      kinesisStream: "testDataStream",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "sam-app-ConsumerFunction-2xHfZ11YBuSk",
        Handler: "consumer-function.lambda_handler",
        Runtime: "python3.9",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-ConsumerFunctionRole-DF0H4257527E",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            KINESIS_STREAM: "testDataStream",
          },
        },
        FunctionName: "sam-app-ProducerFunction-0KTxIrsT0BCP",
        Handler: "producer-function.lambda_handler",
        Runtime: "python3.9",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-ProducerFunctionRole-1H2OPGZAUXNJQ",
    }),
  },
];
