// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Policy",
    group: "IAM",
    properties: ({ config }) => ({
      PolicyName:
        "AWSLambdaBasicExecutionRole-a76cddca-78ae-48ce-9719-4222f782af1b",
      PolicyDocument: {
        Statement: [
          {
            Action: "logs:CreateLogGroup",
            Effect: "Allow",
            Resource: `arn:aws:logs:${config.region}:${config.accountId()}:*`,
          },
          {
            Action: ["logs:CreateLogStream", "logs:PutLogEvents"],
            Effect: "Allow",
            Resource: [
              `arn:aws:logs:${
                config.region
              }:${config.accountId()}:log-group:/aws/lambda/read-kinesis-stream:*`,
            ],
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/service-role/",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "read-kinesis-stream-role-wmuwr9bv",
      Path: "/service-role/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonKinesisFullAccess",
          PolicyName: "AmazonKinesisFullAccess",
        },
      ],
    }),
    dependencies: ({}) => ({
      policies: [
        "AWSLambdaBasicExecutionRole-a76cddca-78ae-48ce-9719-4222f782af1b",
      ],
    }),
  },
  {
    type: "Stream",
    group: "Kinesis",
    properties: ({}) => ({
      StreamModeDetails: {
        StreamMode: "ON_DEMAND",
      },
      StreamName: "my-stream",
    }),
  },
  {
    type: "EventSourceMapping",
    group: "Lambda",
    properties: ({}) => ({
      BatchSize: 100,
      BisectBatchOnFunctionError: false,
      MaximumRecordAgeInSeconds: -1,
      MaximumRetryAttempts: -1,
      ParallelizationFactor: 1,
      StartingPosition: "LATEST",
      TumblingWindowInSeconds: 0,
    }),
    dependencies: ({}) => ({
      lambdaFunction: "read-kinesis-stream",
      kinesisStream: "my-stream",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "read-kinesis-stream",
        Handler: "index.handler",
        Runtime: "nodejs16.x",
      },
    }),
    dependencies: ({}) => ({
      role: "read-kinesis-stream-role-wmuwr9bv",
    }),
  },
];
