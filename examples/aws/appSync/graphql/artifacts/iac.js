// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.IAM.usePolicy({
    name: "AWSLambdaBasicExecutionRole",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
    }),
  });

  provider.IAM.makeRole({
    name: "AppsyncCdkAppStack-ApilambdaDatasourceServiceRole2-16MFRGNSNCKYY",
    properties: ({ config }) => ({
      RoleName:
        "AppsyncCdkAppStack-ApilambdaDatasourceServiceRole2-16MFRGNSNCKYY",
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "appsync.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  });

  provider.IAM.makeRole({
    name: "AppsyncCdkAppStack-AppSyncNotesHandlerServiceRole3-ME4D96ZFJKTZ",
    properties: ({ config }) => ({
      RoleName:
        "AppsyncCdkAppStack-AppSyncNotesHandlerServiceRole3-ME4D96ZFJKTZ",
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [resources.IAM.Policy.awsLambdaBasicExecutionRole],
    }),
  });

  provider.DynamoDB.makeTable({
    name: "AppsyncCdkAppStack-CDKNotesTable254A7FD1-1V7H2BG60AFJ1",
    properties: ({ config }) => ({
      AttributeDefinitions: [
        {
          AttributeName: "id",
          AttributeType: "S",
        },
      ],
      KeySchema: [
        {
          AttributeName: "id",
          KeyType: "HASH",
        },
      ],
      BillingMode: "PAY_PER_REQUEST",
    }),
  });

  provider.AppSync.makeGraphqlApi({
    name: "cdk-notes-appsync-api",
    properties: ({ config }) => ({
      authenticationType: "API_KEY",
      xrayEnabled: true,
      schema:
        'schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Mutation {\n  createNote(note: NoteInput!): Note\n  deleteNote(noteId: String!): String\n  updateNote(note: UpdateNoteInput!): Note\n}\n\ntype Note {\n  completed: Boolean!\n  id: ID!\n  name: String!\n  title: String\n}\n\ntype Query {\n  getNoteById(noteId: String!): Note\n  listNotes: [Note]\n}\n\ntype Subscription {\n  onCreateNote: Note @aws_subscribe(mutations : ["createNote"])\n  onDeleteNote: String @aws_subscribe(mutations : ["deleteNote"])\n  onUpdateNote: Note @aws_subscribe(mutations : ["updateNote"])\n}\n\ninput NoteInput {\n  completed: Boolean!\n  id: ID!\n  name: String!\n}\n\ninput UpdateNoteInput {\n  completed: Boolean\n  id: ID!\n  name: String\n}\n',
      schemaFile: "cdk-notes-appsync-api.graphql",
    }),
  });

  provider.AppSync.makeApiKey({
    name: "da2-7kltivga3rbmzhpv6gdnjpmd7u",
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
    }),
  });

  provider.AppSync.makeResolver({
    name: "Mutation-createNote",
    properties: ({ config }) => ({
      typeName: "Mutation",
      fieldName: "createNote",
      kind: "UNIT",
    }),
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      dataSource: resources.AppSync.DataSource.lambdaDatasource,
    }),
  });

  provider.AppSync.makeResolver({
    name: "Mutation-deleteNote",
    properties: ({ config }) => ({
      typeName: "Mutation",
      fieldName: "deleteNote",
      kind: "UNIT",
    }),
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      dataSource: resources.AppSync.DataSource.lambdaDatasource,
    }),
  });

  provider.AppSync.makeResolver({
    name: "Mutation-updateNote",
    properties: ({ config }) => ({
      typeName: "Mutation",
      fieldName: "updateNote",
      kind: "UNIT",
    }),
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      dataSource: resources.AppSync.DataSource.lambdaDatasource,
    }),
  });

  provider.AppSync.makeResolver({
    name: "Query-getNoteById",
    properties: ({ config }) => ({
      typeName: "Query",
      fieldName: "getNoteById",
      kind: "UNIT",
    }),
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      dataSource: resources.AppSync.DataSource.lambdaDatasource,
    }),
  });

  provider.AppSync.makeResolver({
    name: "Query-listNotes",
    properties: ({ config }) => ({
      typeName: "Query",
      fieldName: "listNotes",
      kind: "UNIT",
    }),
    dependencies: ({ resources }) => ({
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      dataSource: resources.AppSync.DataSource.lambdaDatasource,
    }),
  });

  provider.AppSync.makeDataSource({
    name: "lambdaDatasource",
    properties: ({ config }) => ({
      type: "AWS_LAMBDA",
    }),
    dependencies: ({ resources }) => ({
      serviceRole:
        resources.IAM.Role
          .appsyncCdkAppStackApilambdaDatasourceServiceRole2_16Mfrgnsnckyy,
      graphqlApi: resources.AppSync.GraphqlApi.cdkNotesAppsyncApi,
      lambdaFunction: resources.Lambda.Function.lambdaFns,
    }),
  });

  provider.Lambda.makeFunction({
    name: "lambda-fns",
    properties: ({ config }) => ({
      Handler: "main.handler",
      PackageType: "Zip",
      Runtime: "nodejs12.x",
      Description: "",
      Timeout: 3,
      MemorySize: 1024,
      Environment: {
        Variables: {
          NOTES_TABLE: "AppsyncCdkAppStack-CDKNotesTable254A7FD1-1V7H2BG60AFJ1",
        },
      },
    }),
    dependencies: ({ resources }) => ({
      role: resources.IAM.Role
        .appsyncCdkAppStackAppSyncNotesHandlerServiceRole3Me4D96Zfjktz,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
