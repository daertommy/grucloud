// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "RestApi",
    group: "APIGateway",
    properties: ({ getId }) => ({
      apiKeySource: "HEADER",
      description: "API for authorization purposes",
      endpointConfiguration: {
        types: ["PRIVATE"],
      },
      name: "Serverless Pattern private REST API",
      schema: {
        openapi: "3.0.1",
        info: {
          description: "API for authorization purposes",
          title: "Serverless Pattern private REST API",
          version: "1",
        },
        paths: {
          "/": {},
          "/{proxy+}": {
            options: {
              parameters: [
                {
                  name: "proxy",
                  in: "path",
                  required: true,
                  schema: {
                    type: "string",
                  },
                },
              ],
              responses: {
                200: {
                  description: "200 response",
                  headers: {
                    "Access-Control-Allow-Headers": {
                      schema: {
                        type: "string",
                      },
                    },
                    "Access-Control-Allow-Methods": {
                      schema: {
                        type: "string",
                      },
                    },
                    "Access-Control-Allow-Origin": {
                      schema: {
                        type: "string",
                      },
                    },
                  },
                  content: {
                    "application/json": {
                      schema: {
                        $ref: "#/components/schemas/Empty",
                      },
                    },
                  },
                },
              },
              "x-amazon-apigateway-integration": {
                passthroughBehavior: "WHEN_NO_MATCH",
                requestTemplates: {
                  "application/json": `{
 "statusCode": 200
}`,
                },
                type: "MOCK",
                responses: {
                  default: {
                    responseParameters: {
                      "method.response.header.Access-Control-Allow-Headers":
                        "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods":
                        "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'",
                      "method.response.header.Access-Control-Allow-Origin":
                        "'*'",
                    },
                    statusCode: "200",
                  },
                },
              },
            },
          },
        },
        components: {
          securitySchemes: {
            CognitoAuthorizer: {
              type: "apiKey",
              name: "Authorization",
              in: "header",
              "x-amazon-apigateway-authtype": "cognito_user_pools",
              "x-amazon-apigateway-authorizer": {
                type: "COGNITO_USER_POOLS",
                identitySource: "method.request.header.Authorization",
                providerARNs: [
                  `${getId({
                    type: "UserPool",
                    group: "CognitoIdentityServiceProvider",
                    name: "sam-app-AuthStack-13YXJ9N8JXLZE-Serverless Pattern User Pool",
                    path: "live.Arn",
                  })}`,
                ],
              },
            },
          },
          schemas: {
            Empty: {
              title: "Empty Schema",
              type: "object",
            },
            Error: {
              title: "Error Schema",
              type: "object",
              properties: {
                message: {
                  type: "string",
                },
              },
            },
          },
        },
      },
      deployment: {
        stageName: "api",
      },
    }),
    dependencies: ({ config }) => ({
      vpcEndpoints: [`vpc::com.amazonaws.${config.region}.execute-api`],
      userPools: [
        "sam-app-AuthStack-13YXJ9N8JXLZE-Serverless Pattern User Pool",
      ],
    }),
  },
  {
    type: "RestApiPolicy",
    group: "APIGateway",
    properties: ({ config, getId }) => ({
      policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: "*",
            Action: "execute-api:Invoke",
            Resource: `arn:aws:execute-api:${
              config.region
            }:${config.accountId()}:*/*`,
            Condition: {
              StringEquals: {
                "aws:sourceVpce": `${getId({
                  type: "VpcEndpoint",
                  group: "EC2",
                  name: `vpc::com.amazonaws.${config.region}.execute-api`,
                })}`,
              },
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      restApi: "Serverless Pattern private REST API",
    }),
  },
  {
    type: "Stage",
    group: "APIGateway",
    properties: ({}) => ({
      stageName: "api",
    }),
    dependencies: ({}) => ({
      restApi: "Serverless Pattern private REST API",
    }),
  },
  {
    type: "UserPool",
    group: "CognitoIdentityServiceProvider",
    properties: ({}) => ({
      PoolName: "sam-app-AuthStack-13YXJ9N8JXLZE-Serverless Pattern User Pool",
      AdminCreateUserConfig: {
        AllowAdminCreateUserOnly: true,
        InviteMessageTemplate: {
          EmailMessage:
            "Your username is {username} and temporary password is {####}.",
          EmailSubject: "sam-app-AuthStack-13YXJ9N8JXLZE: temporary password",
          SMSMessage:
            "Your username is {username} and temporary password is {####}.",
        },
      },
      AliasAttributes: ["email"],
      Policies: {
        PasswordPolicy: {
          RequireLowercase: false,
          RequireNumbers: false,
          RequireSymbols: false,
          RequireUppercase: false,
        },
      },
    }),
  },
  {
    type: "UserPoolClient",
    group: "CognitoIdentityServiceProvider",
    properties: ({}) => ({
      AllowedOAuthFlows: ["code"],
      AllowedOAuthScopes: [
        "aws.cognito.signin.user.admin",
        "email",
        "openid",
        "profile",
      ],
      CallbackURLs: ["http://localhost"],
      ClientName: "rCognitoUserPoolClient-gmImNNxn3vGA",
      ExplicitAuthFlows: [
        "ALLOW_CUSTOM_AUTH",
        "ALLOW_REFRESH_TOKEN_AUTH",
        "ALLOW_USER_PASSWORD_AUTH",
        "ALLOW_USER_SRP_AUTH",
      ],
      LogoutURLs: ["http://localhost"],
      SupportedIdentityProviders: ["COGNITO"],
    }),
    dependencies: ({}) => ({
      userPool: "sam-app-AuthStack-13YXJ9N8JXLZE-Serverless Pattern User Pool",
    }),
  },
  {
    type: "UserPoolDomain",
    group: "CognitoIdentityServiceProvider",
    properties: ({}) => ({
      Domain: "523de300-a58e-11ed-ae5d-0edd25779c5b",
    }),
    dependencies: ({}) => ({
      userPool: "sam-app-AuthStack-13YXJ9N8JXLZE-Serverless Pattern User Pool",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `subnet-private1-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 8,
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `subnet-private2-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 9,
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `rtb-private1-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `rtb-private2-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `vpc::rtb-private1-${config.region}a`,
      subnet: `vpc::subnet-private1-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `vpc::rtb-private2-${config.region}b`,
      subnet: `vpc::subnet-private2-${config.region}b`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName:
        "sam-app-FargateStack-17OG8Q3HZDY20-ApplicationLoadBalancerSG-4O5AM53IOEDS",
      Description: "LoadBalancer Security Group",
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName:
        "sam-app-FargateStack-17OG8Q3HZDY20-ECSSecurityGroup-1V4DDPNXQ5ZMI",
      Description: "ECS Security Group",
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName:
        "sam-app-NetworkStack-1M5QLCZMYZA9T - Access to CloudHSM API instance from NLB",
      Description:
        "Allows connections to port 8080 from NLB private IP addresses",
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName:
        "sam-app-NetworkStack-1M5QLCZMYZA9T-rVPCEndpointSecurityGroup-XIVTL646WEFZ",
      Description: "Allow HTTPS inbound traffic to API Gateway Endpoint.",
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ECSSecurityGroup-1V4DDPNXQ5ZMI",
      securityGroupFrom: [
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ApplicationLoadBalancerSG-4O5AM53IOEDS",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.136.209/32",
        },
        {
          CidrIp: "10.0.151.29/32",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::vpc::sam-app-NetworkStack-1M5QLCZMYZA9T - Access to CloudHSM API instance from NLB",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/8",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::vpc::sam-app-NetworkStack-1M5QLCZMYZA9T-rVPCEndpointSecurityGroup-XIVTL646WEFZ",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ApplicationLoadBalancerSG-4O5AM53IOEDS",
      securityGroupFrom: [
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ECSSecurityGroup-1V4DDPNXQ5ZMI",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.execute-api`,
      PrivateDnsEnabled: true,
    }),
    dependencies: ({ config }) => ({
      vpc: "vpc",
      subnets: [
        `vpc::subnet-private1-${config.region}a`,
        `vpc::subnet-private2-${config.region}b`,
      ],
      securityGroups: [
        "sg::vpc::sam-app-NetworkStack-1M5QLCZMYZA9T-rVPCEndpointSecurityGroup-XIVTL646WEFZ",
      ],
    }),
  },
  {
    type: "Cluster",
    group: "ECS",
    properties: ({}) => ({
      clusterName:
        "sam-app-FargateStack-17OG8Q3HZDY20-ECSFargateCluster-QHwre0IS9xMa",
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: ({ getId }) => ({
      deploymentConfiguration: {
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 200,
        minimumHealthyPercent: 50,
      },
      desiredCount: 2,
      enableECSManagedTags: false,
      enableExecuteCommand: false,
      healthCheckGracePeriodSeconds: 60,
      launchType: "FARGATE",
      loadBalancers: [
        {
          containerName: "web",
          containerPort: 80,
          targetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "sam-ap-LoadB-HXOLLYZKA1FE",
          })}`,
        },
      ],
      networkConfiguration: {
        awsvpcConfiguration: {
          assignPublicIp: "DISABLED",
        },
      },
      platformFamily: "Linux",
      platformVersion: "LATEST",
      schedulingStrategy: "REPLICA",
      serviceName: "sam-app-FargateStack-17OG8Q3HZDY20-ECSService-5hMNOrl7pjvc",
    }),
    dependencies: ({ config }) => ({
      cluster:
        "sam-app-FargateStack-17OG8Q3HZDY20-ECSFargateCluster-QHwre0IS9xMa",
      taskDefinition:
        "sam-app-FargateStack-17OG8Q3HZDY20-ECSServiceTaskDefinition-ahb6if3orsNT",
      subnets: [
        `vpc::subnet-private1-${config.region}a`,
        `vpc::subnet-private2-${config.region}b`,
      ],
      securityGroups: [
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ECSSecurityGroup-1V4DDPNXQ5ZMI",
      ],
      targetGroups: ["sam-ap-LoadB-HXOLLYZKA1FE"],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: ({}) => ({
      containerDefinitions: [
        {
          cpu: 0,
          essential: true,
          image: "nginx",
          name: "web",
          portMappings: [
            {
              containerPort: 80,
              hostPort: 80,
              protocol: "tcp",
            },
          ],
        },
      ],
      cpu: "512",
      family:
        "sam-app-FargateStack-17OG8Q3HZDY20-ECSServiceTaskDefinition-ahb6if3orsNT",
      memory: "1024",
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
    }),
    dependencies: ({}) => ({
      taskRole: "sam-app-FargateStack-17OG8Q3HZDY20-ECSTaskRole-1D4B4FJL6R0TP",
      executionRole:
        "sam-app-FargateStack-17OG8Q3H-ECSTaskExecutionRole-W4VZO19EHX4Y",
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "sam-a-Appli-1R39T0MPT5BPC",
      targetGroup: "sam-ap-LoadB-HXOLLYZKA1FE",
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "sam-a-Appli-1R39T0MPT5BPC",
      Scheme: "internal",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `vpc::subnet-private1-${config.region}a`,
        `vpc::subnet-private2-${config.region}b`,
      ],
      securityGroups: [
        "sg::vpc::sam-app-FargateStack-17OG8Q3HZDY20-ApplicationLoadBalancerSG-4O5AM53IOEDS",
        "sg::vpc::sam-app-NetworkStack-1M5QLCZMYZA9T - Access to CloudHSM API instance from NLB",
      ],
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "sam-a-rNetw-7SNLPQU16Z6Z",
      Scheme: "internal",
      Type: "network",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ config }) => ({
      subnets: [
        `vpc::subnet-private1-${config.region}a`,
        `vpc::subnet-private2-${config.region}b`,
      ],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "sam-ap-LoadB-HXOLLYZKA1FE",
      Protocol: "HTTP",
      Port: 80,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      TargetType: "ip",
    }),
    dependencies: ({}) => ({
      vpc: "vpc",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "sam-app-FargateStack-17OG8Q3H-ECSTaskExecutionRole-W4VZO19EHX4Y",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-FargateStack-17OG8Q3HZDY20-ECSTaskRole-1D4B4FJL6R0TP",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "sam-app-NetworkStack-1M5Q-rLambdaFunctionNLBIPAddr-1IUAVC1EJU15F",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: ["ec2:DescribeVpcs", "ec2:DescribeNetworkInterfaces"],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "rLambdaFunctionNLBIPAddressesRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "sam-app-NetworkStack-1M5Q-rLambdaFunctionSecurityG-MCBATC53KJDG",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "ec2:CreateSecurityGroup",
                  "ec2:AuthorizeSecurityGroupIngress",
                  "ec2:DeleteSecurityGroup",
                ],
                Resource: "*",
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "rLambdaFunctionSecurityGroupRolePolicy1",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description: "Look up info from NLB",
        FunctionName:
          "sam-app-NetworkStack-1M5Q-rLambdaFunctionNLBIPAddr-pvkPZbn3ljRW",
        Handler: "index.handler",
        Runtime: "python3.9",
        Timeout: 30,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-NetworkStack-1M5Q-rLambdaFunctionNLBIPAddr-1IUAVC1EJU15F",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description:
          "Create custom security group with NLB IP addresses as source",
        Environment: {
          Variables: {
            VpcId: "vpc-0c60fd6ea2ea2be40",
            WhiteList: "10.0.136.209, 10.0.151.29",
            StackName: "sam-app-NetworkStack-1M5QLCZMYZA9T",
          },
        },
        FunctionName:
          "sam-app-NetworkStack-1M5Q-rLambdaFunctionSecurityG-errZiUsLBuaE",
        Handler: "index.lambda_handler",
        Runtime: "python3.9",
        Timeout: 30,
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-NetworkStack-1M5Q-rLambdaFunctionSecurityG-MCBATC53KJDG",
    }),
  },
];
