// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  const { config } = provider;

  provider.iam.makePolicy({
    name: config.iam.Policy.lambdaPolicy.name,
    properties: () => config.iam.Policy.lambdaPolicy.properties,
  });

  provider.iam.makeRole({
    name: config.iam.Role.lambdaRole.name,
    dependencies: ({ resources }) => ({
      policies: [resources.iam.Policy.lambdaPolicy],
    }),
    properties: () => config.iam.Role.lambdaRole.properties,
  });

  provider.acm.makeCertificate({
    name: config.acm.Certificate.grucloudOrg.name,
    properties: () => config.acm.Certificate.grucloudOrg.properties,
  });

  provider.route53Domain.useDomain({
    name: config.route53Domain.Domain.grucloudOrg.name,
  });

  provider.route53.makeHostedZone({
    name: config.route53.HostedZone.grucloudOrg.name,
    dependencies: ({ resources }) => ({
      domain: resources.route53Domain.Domain.grucloudOrg,
    }),
  });

  provider.route53.makeRecord({
    name: config.route53.Record.apiGatewayAliasRecord.name,
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.grucloudOrg,
      apiGatewayV2DomainName: resources.apiGatewayV2.DomainName.grucloudOrg,
    }),
  });

  provider.route53.makeRecord({
    name: config.route53.Record.certificateValidationGrucloudOrg.name,
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.grucloudOrg,
      certificate: resources.acm.Certificate.grucloudOrg,
    }),
  });

  provider.lambda.makeFunction({
    name: config.lambda.Function.myFunction.name,
    dependencies: ({ resources }) => ({
      role: resources.iam.Role.lambdaRole,
    }),
    properties: () => config.lambda.Function.myFunction.properties,
  });

  provider.apiGatewayV2.makeApi({
    name: config.apiGatewayV2.Api.myApi.name,
    properties: () => config.apiGatewayV2.Api.myApi.properties,
  });

  provider.apiGatewayV2.makeIntegration({
    name: config.apiGatewayV2.Integration.integrationLambda.name,
    dependencies: ({ resources }) => ({
      api: resources.apiGatewayV2.Api.myApi,
      lambdaFunction: resources.lambda.Function.myFunction,
    }),
    properties: () =>
      config.apiGatewayV2.Integration.integrationLambda.properties,
  });

  provider.apiGatewayV2.makeRoute({
    name: config.apiGatewayV2.Route.anyMyFunction.name,
    dependencies: ({ resources }) => ({
      api: resources.apiGatewayV2.Api.myApi,
      integration: resources.apiGatewayV2.Integration.integrationLambda,
    }),
    properties: () => config.apiGatewayV2.Route.anyMyFunction.properties,
  });

  provider.apiGatewayV2.makeStage({
    name: config.apiGatewayV2.Stage.myApiStageDev.name,
    dependencies: ({ resources }) => ({
      api: resources.apiGatewayV2.Api.myApi,
    }),
    properties: () => config.apiGatewayV2.Stage.myApiStageDev.properties,
  });

  provider.apiGatewayV2.makeDeployment({
    name: config.apiGatewayV2.Deployment.myApiDeployment.name,
    dependencies: ({ resources }) => ({
      api: resources.apiGatewayV2.Api.myApi,
      stage: resources.apiGatewayV2.Stage.myApiStageDev,
    }),
    properties: () => config.apiGatewayV2.Deployment.myApiDeployment.properties,
  });

  provider.apiGatewayV2.makeDomainName({
    name: config.apiGatewayV2.DomainName.grucloudOrg.name,
    dependencies: ({ resources }) => ({
      certificate: resources.acm.Certificate.grucloudOrg,
    }),
    properties: () => config.apiGatewayV2.DomainName.grucloudOrg.properties,
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
