// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Distribution",
    group: "CloudFront",
    properties: ({ config, getId }) => ({
      PriceClass: "PriceClass_All",
      DefaultRootObject: "",
      DefaultCacheBehavior: {
        TargetOriginId:
          "CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
        TrustedSigners: {
          Enabled: false,
        },
        TrustedKeyGroups: {
          Enabled: false,
        },
        ViewerProtocolPolicy: "allow-all",
        AllowedMethods: {
          Quantity: 2,
          Items: ["HEAD", "GET"],
          CachedMethods: {
            Quantity: 2,
            Items: ["HEAD", "GET"],
          },
        },
        SmoothStreaming: false,
        Compress: true,
        FunctionAssociations: {
          Quantity: 1,
          Items: [
            {
              FunctionARN: `arn:aws:cloudfront::${config.accountId()}:function/${
                config.region
              }CloudfronS3CdkPythonStackFunction980062BC`,
              EventType: "viewer-request",
            },
          ],
        },
        FieldLevelEncryptionId: "",
        CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6",
      },
      Origins: {
        Quantity: 1,
        Items: [
          {
            Id: "CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
            DomainName:
              "cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d.s3.us-east-1.amazonaws.com",
            OriginPath: "",
            CustomHeaders: {
              Quantity: 0,
            },
            S3OriginConfig: {
              OriginAccessIdentity: `origin-access-identity/cloudfront/${getId({
                type: "OriginAccessIdentity",
                group: "CloudFront",
                name: "Identity for CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
              })}`,
            },
            ConnectionAttempts: 3,
            ConnectionTimeout: 10,
            OriginShield: {
              Enabled: false,
            },
            OriginAccessControlId: "",
          },
        ],
      },
      Restrictions: {
        GeoRestriction: {
          RestrictionType: "none",
        },
      },
      Comment: "",
      Logging: {
        Enabled: false,
        IncludeCookies: false,
        Bucket: "",
        Prefix: "",
      },
      ViewerCertificate: {
        CloudFrontDefaultCertificate: true,
        SSLSupportMethod: "vip",
        MinimumProtocolVersion: "TLSv1",
        CertificateSource: "cloudfront",
      },
    }),
    dependencies: ({ config }) => ({
      buckets: [
        "cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d",
      ],
      functions: [`${config.region}CloudfronS3CdkPythonStackFunction980062BC`],
      originAccessIdentities: [
        "Identity for CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
      ],
    }),
  },
  {
    type: "Function",
    group: "CloudFront",
    properties: ({}) => ({
      FunctionCode: `//A version of the homepage
var X_Experiment_A = 'index.html';
//B version of the homepage
var X_Experiment_B = 'index_b.html';

function handler(event) {
    var request = event.request;
    if (Math.random() < 0.8) {
        request.uri = '/' + X_Experiment_A;
    } else {
        request.uri = '/' + X_Experiment_B;
    }
    //log which version is displayed
    console.log('X_Experiment_V ' + (request.uri == '/index.html' ? 'A_VERSION' : 'B_VERSION'));
    return request;
}`,
      Name: "us-east-1CloudfronS3CdkPythonStackFunction980062BC",
      FunctionConfig: {
        Runtime: "cloudfront-js-1.0",
      },
    }),
  },
  {
    type: "OriginAccessIdentity",
    group: "CloudFront",
    name: "Identity for CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName:
        "CloudfrontCffS3CdkPythonS-CustomCDKBucketDeploymen-KMS6QWJCA4L1",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: ["s3:GetObject*", "s3:GetBucket*", "s3:List*"],
                Resource: [
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }`,
                  `arn:aws:s3:::cdk-hnb659fds-assets-${config.accountId()}-${
                    config.region
                  }/*`,
                ],
                Effect: "Allow",
              },
              {
                Action: [
                  "s3:GetObject*",
                  "s3:GetBucket*",
                  "s3:List*",
                  "s3:DeleteObject*",
                  "s3:PutObject",
                  "s3:Abort*",
                ],
                Resource: [
                  "arn:aws:s3:::cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d",
                  "arn:aws:s3:::cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d/*",
                ],
                Effect: "Allow",
              },
            ],
          },
          PolicyName:
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Layer",
    group: "Lambda",
    properties: ({}) => ({
      LayerName: "myDeploymentAwsCliLayerEF6B12EC",
      Description: "/opt/awscli/aws",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName:
          "CloudfrontCffS3CdkPythonS-CustomCDKBucketDeploymen-BZsaOKxXpJhr",
        Handler: "index.handler",
        Runtime: "python3.7",
        Timeout: 900,
      },
    }),
    dependencies: ({}) => ({
      layers: ["myDeploymentAwsCliLayerEF6B12EC"],
      role: "CloudfrontCffS3CdkPythonS-CustomCDKBucketDeploymen-KMS6QWJCA4L1",
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({ getId }) => ({
      Name: "cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${getId(
                {
                  type: "OriginAccessIdentity",
                  group: "CloudFront",
                  name: "Identity for CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
                }
              )}`,
            },
            Action: "s3:GetObject",
            Resource:
              "arn:aws:s3:::cloudfrontcffs3cdkpythons-myhostingbucket134f0bf0-2m3f6ulft41d/*",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      originAccessIdentities: [
        "Identity for CloudfrontCffS3CdkPythonStackMyDistributionOrigin128091E74",
      ],
    }),
  },
  {
    type: "Bucket",
    group: "S3",
    properties: ({}) => ({
      Name: "cloudwatchlogssubscriptionfi-mylogsbucket57652dd1-5m0kw1cg40sd",
    }),
  },
];
