// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Distribution",
    group: "CloudFront",
    properties: ({ getId }) => ({
      DefaultRootObject: "",
      Origins: {
        Items: [
          {
            Id: "LambdaOrigin",
            DomainName: `${getId({
              type: "Function",
              group: "Lambda",
              name: "sam-app-LambdaFunction-c3Q7Xjfvon1M",
              path: "live.FunctionUrlConfig.DomainName",
            })}`,
            OriginPath: "",
            CustomHeaders: {
              Quantity: 0,
            },
            CustomOriginConfig: {
              HTTPPort: 80,
              HTTPSPort: 443,
              OriginProtocolPolicy: "https-only",
              OriginSslProtocols: {
                Quantity: 2,
                Items: ["SSLv3", "TLSv1"],
              },
              OriginReadTimeout: 30,
              OriginKeepaliveTimeout: 5,
            },
            ConnectionAttempts: 3,
            ConnectionTimeout: 10,
            OriginShield: {
              Enabled: false,
            },
            OriginAccessControlId: "",
          },
        ],
      },
      DefaultCacheBehavior: {
        TargetOriginId: "LambdaOrigin",
        TrustedSigners: {
          Enabled: false,
        },
        TrustedKeyGroups: {
          Enabled: false,
        },
        ViewerProtocolPolicy: "redirect-to-https",
        AllowedMethods: {
          Quantity: 2,
          Items: ["HEAD", "GET"],
          CachedMethods: {
            Quantity: 2,
            Items: ["HEAD", "GET"],
          },
        },
        SmoothStreaming: false,
        Compress: true,
        FieldLevelEncryptionId: "",
        CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6",
      },
      Comment: "Distribution with Lambda Function URL",
      PriceClass: "PriceClass_All",
      ViewerCertificate: {
        CloudFrontDefaultCertificate: true,
        SSLSupportMethod: "vip",
        MinimumProtocolVersion: "TLSv1",
        CertificateSource: "cloudfront",
      },
    }),
    dependencies: ({}) => ({
      lambdaFunctionsOrigin: ["sam-app-LambdaFunction-c3Q7Xjfvon1M"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "sam-app-LambdaFunctionRole-3RWS5V1VIJH9",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Environment: {
          Variables: {
            JAVA_TOOL_OPTIONS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1",
          },
        },
        FunctionName: "sam-app-LambdaFunction-c3Q7Xjfvon1M",
        Handler: "com.example.App::handleRequest",
        MemorySize: 512,
        Runtime: "java11",
        Timeout: 30,
      },
      FunctionUrlConfig: {
        AuthType: "NONE",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-LambdaFunctionRole-3RWS5V1VIJH9",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({}) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName: "sam-app-LambdaFunction-c3Q7Xjfvon1M",
          Principal: "*",
          StatementId:
            "sam-app-LambdaFunctionUrlPublicPermissions-148IUT8EECL37",
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction: "sam-app-LambdaFunction-c3Q7Xjfvon1M",
    }),
  },
];
