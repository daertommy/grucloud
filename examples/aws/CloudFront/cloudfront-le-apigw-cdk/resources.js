// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Api",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description: "Testing sig4 signature",
      Name: "TestSig4",
    }),
  },
  {
    type: "Deployment",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      Description:
        "Automatic deployment triggered by changes to the Api configuration",
      AutoDeployed: true,
    }),
    dependencies: ({}) => ({
      api: "TestSig4",
      stage: "TestSig4::$default",
    }),
  },
  {
    type: "Integration",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      ConnectionType: "INTERNET",
      IntegrationMethod: "POST",
      IntegrationType: "AWS_PROXY",
      PayloadFormatVersion: "2.0",
    }),
    dependencies: ({}) => ({
      api: "TestSig4",
      lambdaFunction:
        "CloudfrontLeApigwCdkStack-HelloWorld7964D1E8-655RE6TlN8Ag",
    }),
  },
  {
    type: "Route",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      AuthorizationType: "AWS_IAM",
      RouteKey: "GET /",
    }),
    dependencies: ({}) => ({
      api: "TestSig4",
      integration:
        "integration::TestSig4::CloudfrontLeApigwCdkStack-HelloWorld7964D1E8-655RE6TlN8Ag",
    }),
  },
  {
    type: "Stage",
    group: "ApiGatewayV2",
    properties: ({}) => ({
      AutoDeploy: true,
      StageName: "$default",
    }),
    dependencies: ({}) => ({
      api: "TestSig4",
    }),
  },
  {
    type: "Distribution",
    group: "CloudFront",
    properties: ({ config, getId }) => ({
      DefaultRootObject: "",
      Origins: {
        Items: [
          {
            Id: "CloudfrontLeApigwCdkStackmyDistributionOrigin1ACBD3C2F",
            DomainName: `${getId({
              type: "Api",
              group: "ApiGatewayV2",
              name: "TestSig4",
              path: "live.Endpoint",
            })}`,
            OriginPath: "",
            CustomHeaders: {
              Quantity: 0,
            },
            CustomOriginConfig: {
              HTTPPort: 80,
              HTTPSPort: 443,
              OriginProtocolPolicy: "https-only",
              OriginSslProtocols: {
                Quantity: 1,
                Items: ["TLSv1.2"],
              },
              OriginReadTimeout: 30,
              OriginKeepaliveTimeout: 5,
            },
            ConnectionAttempts: 3,
            ConnectionTimeout: 10,
            OriginShield: {
              Enabled: false,
            },
            OriginAccessControlId: "",
          },
        ],
      },
      DefaultCacheBehavior: {
        TargetOriginId:
          "CloudfrontLeApigwCdkStackmyDistributionOrigin1ACBD3C2F",
        TrustedSigners: {
          Enabled: false,
        },
        TrustedKeyGroups: {
          Enabled: false,
        },
        ViewerProtocolPolicy: "redirect-to-https",
        AllowedMethods: {
          Quantity: 2,
          Items: ["HEAD", "GET"],
          CachedMethods: {
            Quantity: 2,
            Items: ["HEAD", "GET"],
          },
        },
        SmoothStreaming: false,
        Compress: true,
        LambdaFunctionAssociations: {
          Items: [
            {
              LambdaFunctionARN: `arn:aws:lambda:${
                config.region
              }:${config.accountId()}:function:CloudfrontLeApigwCdkStack-LambdaEdge6A7A1843-EWePh7YaUkoR:1`,
              EventType: "origin-request",
              IncludeBody: false,
            },
          ],
        },
        FieldLevelEncryptionId: "",
        CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
      },
      Comment: "Test sig4 signature",
      PriceClass: "PriceClass_All",
      ViewerCertificate: {
        CloudFrontDefaultCertificate: true,
        SSLSupportMethod: "vip",
        MinimumProtocolVersion: "TLSv1",
        CertificateSource: "cloudfront",
      },
    }),
    dependencies: ({}) => ({
      apiGatewayV2Apis: ["TestSig4"],
      lambdaFunctions: [
        "CloudfrontLeApigwCdkStack-LambdaEdge6A7A1843-EWePh7YaUkoR",
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName:
        "CloudfrontLeApigwCdkStack-HelloWorldServiceRoleF3F-1UEOWZQ4K0VOB",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName:
        "CloudfrontLeApigwCdkStack-LambdaEdgeServiceRole9A3-3DIG415LG7LZ",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
          {
            Effect: "Allow",
            Principal: {
              Service: "edgelambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: "execute-api:Invoke",
                Resource: `${getId({
                  type: "Api",
                  group: "ApiGatewayV2",
                  name: "TestSig4",
                  path: "live.ArnV2",
                })}/*`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "invokehttpapipolicy7AEBB0BF",
        },
      ],
      AttachedPolicies: [
        {
          PolicyName: "AWSLambdaBasicExecutionRole",
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        },
      ],
    }),
    dependencies: ({}) => ({
      apiGatewayV2Apis: ["TestSig4"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName:
          "CloudfrontLeApigwCdkStack-HelloWorld7964D1E8-655RE6TlN8Ag",
        Handler: "index.handler",
        Runtime: "python3.7",
      },
    }),
    dependencies: ({}) => ({
      role: "CloudfrontLeApigwCdkStack-HelloWorldServiceRoleF3F-1UEOWZQ4K0VOB",
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName:
          "CloudfrontLeApigwCdkStack-LambdaEdge6A7A1843-EWePh7YaUkoR",
        Handler: "index.handler",
        Runtime: "nodejs12.x",
      },
    }),
    dependencies: ({}) => ({
      role: "CloudfrontLeApigwCdkStack-LambdaEdgeServiceRole9A3-3DIG415LG7LZ",
    }),
  },
  {
    type: "Permission",
    group: "Lambda",
    properties: ({ getId }) => ({
      Permissions: [
        {
          Action: "lambda:InvokeFunction",
          FunctionName:
            "CloudfrontLeApigwCdkStack-HelloWorld7964D1E8-655RE6TlN8Ag",
          Principal: "apigateway.amazonaws.com",
          StatementId:
            "CloudfrontLeApigwCdkStack-HttpApiGETHelloWorldIntegrationPermissionFFD73C74-1ELPSH01EXEDP",
          SourceArn: `${getId({
            type: "Api",
            group: "ApiGatewayV2",
            name: "TestSig4",
            path: "live.ArnV2",
          })}/*/*/`,
        },
      ],
    }),
    dependencies: ({}) => ({
      lambdaFunction:
        "CloudfrontLeApigwCdkStack-HelloWorld7964D1E8-655RE6TlN8Ag",
      apiGatewayV2Apis: ["TestSig4"],
    }),
  },
];
