// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Instance",
    group: "EC2",
    name: "grucloud-demo",
    properties: ({ config, getId }) => ({
      BootMode: "uefi",
      CurrentInstanceBootMode: "uefi",
      EbsOptimized: true,
      Image: {
        Description:
          "Canonical, Ubuntu, 22.04 LTS, arm64 jammy image build on 2023-05-16",
      },
      InstanceType: "t4g.small",
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::vpc-default::websocket-inside",
            })}`,
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::vpc-default::ssh",
            })}`,
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::vpc-default::default",
            })}`,
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::vpc-default::http",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: "vpc-default::subnet-default-a",
          })}`,
        },
      ],
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
    }),
    dependencies: ({}) => ({
      subnets: ["vpc-default::subnet-default-a"],
      keyPair: "kp-grucloud-console-dev",
      iamInstanceProfile: "role-ec2-to-s3",
      securityGroups: [
        "sg::vpc-default::default",
        "sg::vpc-default::http",
        "sg::vpc-default::ssh",
        "sg::vpc-default::websocket-inside",
      ],
    }),
  },
  {
    type: "InternetGateway",
    group: "EC2",
    name: "ig-default",
    isDefault: true,
  },
  { type: "KeyPair", group: "EC2", name: "kp-grucloud-console-dev" },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "ig-default",
      routeTable: "vpc-default::rt-default",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "rt-default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-a",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-b",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-c",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-d",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-e",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "vpc-default::rt-default",
      subnet: "vpc-default::subnet-default-f",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    name: "sg::vpc-default::default",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "http",
      Description: "http https",
    }),
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "ssh",
      Description: "ssh",
    }),
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "websocket-inside",
      Description: "websocket from task ",
    }),
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::http",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::http",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 22,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 22,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::ssh",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 9000,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "172.0.0.0/8",
        },
      ],
      ToPort: 9000,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::websocket-inside",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::default",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::vpc-default::websocket-inside",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-a",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-b",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-c",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-d",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-e",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "subnet-default-f",
    isDefault: true,
    dependencies: ({}) => ({
      vpc: "vpc-default",
    }),
  },
  { type: "Vpc", group: "EC2", name: "vpc-default", isDefault: true },
  {
    type: "Cluster",
    group: "ECS",
    properties: ({}) => ({
      clusterName: "grucloud-console-dev",
      capacityProviders: ["FARGATE", "FARGATE_SPOT"],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: ({ config }) => ({
      containerDefinitions: [
        {
          cpu: 0,
          essential: true,
          image: "public.ecr.aws/a4o9b2p8/grucloud/grucloud-cli:12.10.2",
          logConfiguration: {
            logDriver: "awslogs",
            options: {
              "awslogs-create-group": "true",
              "awslogs-group": "/ecs/grucloud-cli",
              "awslogs-region": `${config.region}`,
              "awslogs-stream-prefix": "ecs",
            },
          },
          name: "grucloud-cli",
          portMappings: [],
          workingDirectory: "/app/artifacts",
        },
      ],
      cpu: "1024",
      ephemeralStorage: {
        sizeInGiB: 21,
      },
      family: "grucloud-cli",
      memory: "2048",
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
      runtimePlatform: {
        cpuArchitecture: "ARM64",
        operatingSystemFamily: "LINUX",
      },
    }),
    dependencies: ({}) => ({
      executionRole: "ecsTaskExecutionRole",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "role-ec2-to-s3",
    dependencies: ({}) => ({
      roles: ["role-ec2-to-s3"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "ecsTaskExecutionRole",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          PolicyName: "AmazonECSTaskExecutionRolePolicy",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "role-ec2-to-s3",
      Description: "Allows EC2 instances to call AWS services on your behalf.",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          PolicyName: "AmazonS3FullAccess",
        },
      ],
    }),
  },
];
