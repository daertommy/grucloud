// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "CapacityProvider",
    group: "ECS",
    properties: () => ({
      name: "cp",
      autoScalingGroupProvider: {
        managedScaling: {
          status: "ENABLED",
          targetCapacity: 90,
          minimumScalingStepSize: 1,
          maximumScalingStepSize: 10000,
          instanceWarmupPeriod: 300,
        },
        managedTerminationProtection: "DISABLED",
      },
      tags: [{ key: "mykey1", value: "value" }],
    }),
    dependencies: () => ({
      autoScalingGroup: "EcsInstanceAsg",
    }),
  },
  {
    type: "Cluster",
    group: "ECS",
    properties: () => ({
      clusterName: "cluster",
      settings: [
        {
          name: "containerInsights",
          value: "disabled",
        },
      ],
      tags: [{ key: "mykey1", value: "value" }],
    }),
    dependencies: () => ({
      capacityProviders: ["cp"],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: () => ({
      containerDefinitions: [
        {
          name: "nginx",
          image: "nginx",
          cpu: 0,
          memory: 512,
          portMappings: [
            {
              containerPort: 81,
              hostPort: 80,
              protocol: "tcp",
            },
          ],
          essential: true,
          environment: [],
          mountPoints: [],
          volumesFrom: [],
        },
      ],
      placementConstraints: [],
      requiresCompatibilities: ["EC2"],
      tags: [{ key: "mykey1", value: "value" }],
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: () => ({
      launchType: "EC2",
      desiredCount: 2,
      deploymentConfiguration: {
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 200,
        minimumHealthyPercent: 100,
      },
      placementConstraints: [],
      placementStrategy: [
        {
          type: "spread",
          field: "attribute:ecs.availability-zone",
        },
        {
          type: "spread",
          field: "instanceId",
        },
      ],
      schedulingStrategy: "REPLICA",
      enableECSManagedTags: true,
      enableExecuteCommand: false,
      tags: [{ key: "mykey1", value: "value" }],
    }),
    dependencies: () => ({
      cluster: "cluster",
      taskDefinition: "nginx",
    }),
  },
];
