// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "CapacityProvider",
    group: "ECS",
    properties: () => ({
      name: "cp",
      autoScalingGroupProvider: {
        managedScaling: {
          status: "ENABLED",
          targetCapacity: 90,
          minimumScalingStepSize: 1,
          maximumScalingStepSize: 10000,
          instanceWarmupPeriod: 300,
        },
        managedTerminationProtection: "DISABLED",
      },
      tags: [{ key: "mykey1", value: "value" }],
    }),
    dependencies: () => ({
      autoScalingGroup: "EcsInstanceAsg",
    }),
  },
  {
    type: "Cluster",
    group: "ECS",
    properties: () => ({
      clusterName: "cluster",
      settings: [
        {
          name: "containerInsights",
          value: "disabled",
        },
      ],
      tags: [{ key: "mykey1", value: "value" }],
    }),
    dependencies: () => ({
      capacityProviders: ["cp"],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: ({}) => ({
      containerDefinitions: [
        {
          cpu: 0,
          essential: true,
          image: "nginx",
          memory: 1024,
          name: "nginx",
          portMappings: [
            {
              containerPort: 80,
              hostPort: 80,
              protocol: "tcp",
            },
          ],
        },
      ],
      family: "nginx",
      tags: [
        {
          key: "mykey",
          value: "value",
        },
      ],
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: ({}) => ({
      deploymentConfiguration: {
        alarms: {
          alarmNames: ["alarm-ecs-cpu"],
          enable: true,
          rollback: false,
        },
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 150,
        minimumHealthyPercent: 100,
      },
      desiredCount: 1,
      enableECSManagedTags: true,
      enableExecuteCommand: false,
      launchType: "EC2",
      placementStrategy: [
        {
          field: "attribute:ecs.availability-zone",
          type: "spread",
        },
        {
          field: "instanceId",
          type: "spread",
        },
      ],
      schedulingStrategy: "REPLICA",
      serviceName: "service-nginx",
      tags: [
        {
          key: "mykey",
          value: "value",
        },
      ],
    }),
    dependencies: () => ({
      alarms: ["alarm-ecs-cpu"],
      cluster: "cluster",
      taskDefinition: "nginx",
    }),
  },
];
