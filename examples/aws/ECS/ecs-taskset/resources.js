// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "AutoScalingGroup",
    group: "AutoScaling",
    name: "Ruby-AutoScalingGroup-appmesh-workshop",
    properties: ({}) => ({
      MinSize: 3,
      MaxSize: 3,
      DesiredCapacity: 3,
    }),
    dependencies: ({}) => ({
      subnets: [
        "VPC-appmesh-workshop::PublicOne-appmesh-workshop",
        "VPC-appmesh-workshop::PublicThree-appmesh-workshop",
        "VPC-appmesh-workshop::PublicTwo-appmesh-workshop",
      ],
      launchTemplate: "Ruby-EC2Instance-LaunchTemplate-appmesh-workshop",
    }),
  },
  {
    type: "AutoScalingAttachment",
    group: "AutoScaling",
    dependencies: ({}) => ({
      autoScalingGroup: "Ruby-AutoScalingGroup-appmesh-workshop",
      targetGroup: "appmes-RubyT-HRLNYR1HFN6J",
    }),
  },
  { type: "ElasticIpAddress", group: "EC2", name: "NatGatewayOneAttachment" },
  { type: "ElasticIpAddress", group: "EC2", name: "NatGatewayThreeAttachment" },
  { type: "ElasticIpAddress", group: "EC2", name: "NatGatewayTwoAttachment" },
  {
    type: "Instance",
    group: "EC2",
    name: "External-EC2Instance-appmesh-workshop",
    properties: ({ config, getId }) => ({
      CreditSpecification: {
        CpuCredits: "unlimited",
      },
      Image: {
        Description: "Amazon Linux 2 AMI 2.0.20230119.1 x86_64 HVM gp2",
      },
      InstanceType: "t3.micro",
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::VPC-appmesh-workshop::appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
          })}`,
        },
      ],
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
      Tags: [
        {
          Key: "Usage",
          Value: "ExternalEC2Instance",
        },
      ],
      UserData: `#!/bin/bash -ex
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# tools script
cat > /home/ec2-user/install-tools <<-"EOF"

#!/bin/bash -ex

sudo yum install -y jq bash-completion

sudo curl --silent --location -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.8/bin/linux/amd64/kubectl
sudo chmod +x /usr/local/bin/kubectl
echo 'source <(kubectl completion bash)' >>/home/ec2-user/.bashrc
#source ~/.bashrc

if ! [ -x "$(command -v jq)" ] || ! [ -x "$(command -v envsubst)" ] || ! [ -x "$(command -v kubectl)" ]; then
  echo 'ERROR: tools not installed.' >&2
  exit 1
fi

pip install awscli --upgrade --user

EOF

chmod +x /home/ec2-user/install-tools
/home/ec2-user/install-tools
`,
    }),
    dependencies: ({}) => ({
      subnets: ["VPC-appmesh-workshop::PrivateOne-appmesh-workshop"],
      keyPair: "id_rsa",
      iamInstanceProfile:
        "appmesh-workshop-InstanceProfileExternal-Gyr3M1YtaL0v",
      securityGroups: [
        "sg::VPC-appmesh-workshop::appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
      ],
    }),
  },
  { type: "InternetGateway", group: "EC2", name: "InternetGateway" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      internetGateway: "InternetGateway",
    }),
  },
  { type: "KeyPair", group: "EC2", name: "id_rsa" },
  {
    type: "LaunchTemplate",
    group: "EC2",
    name: "Ruby-EC2Instance-LaunchTemplate-appmesh-workshop",
    properties: ({}) => ({
      LaunchTemplateData: {
        Image: {
          Description: "Amazon Linux 2 AMI 2.0.20230119.1 x86_64 HVM gp2",
        },
        InstanceInitiatedShutdownBehavior: "terminate",
        InstanceType: "t2.medium",
        UserData: `#!/bin/bash -ex
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

# Install required libs
yum install -y git gcc gcc-c++ make readline-devel openssl-devel sqlite-devel gmp-devel jq

# Install rbenv
git clone https://github.com/rbenv/rbenv.git /tmp/.rbenv
echo 'export PATH="/tmp/.rbenv/bin:/usr/local/bin:$PATH"' >> /tmp/.bashrc
echo 'eval "$(rbenv init -)"' >> /tmp/.bashrc
source /tmp/.bashrc

# Install ruby-build
git clone https://github.com/rbenv/ruby-build.git /tmp/ruby-build
cd /tmp/ruby-build
./install.sh

rbenv install 2.5.1 && rbenv global 2.5.1

# Install rails and bundler
gem install --force rails:4.2.10 bundler:1.17.3
gem update --system

# Clone the repo and build the app
export RUBY_ROOT=/tmp/ecsdemo-frontend
git clone https://github.com/ffeijoo/ecsdemo-frontend.git /tmp/ecsdemo-frontend
cd $RUBY_ROOT
bundle update --bundler
bundle install

# Set environment variables for routing
export MESH_RUN='true'
export CRYSTAL_URL='http://crystal.appmeshworkshop.hosted.local:3000/crystal'
export NODEJS_URL='http://nodejs.appmeshworkshop.hosted.local:3000'

# Run at boot
sed -i '$ d' startup.sh && echo 'rails s -e production -b 0.0.0.0' >> startup.sh
nohup ./startup.sh &

`,
      },
    }),
    dependencies: ({}) => ({
      keyPair: "id_rsa",
      iamInstanceProfile: "appmesh-workshop-InstanceProfile-KMl4m5zQVs1I",
      securityGroups: [
        "sg::VPC-appmesh-workshop::appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
      ],
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: "NatGatewayOne",
    properties: ({}) => ({
      PrivateIpAddressIndex: 49,
    }),
    dependencies: ({}) => ({
      subnet: "VPC-appmesh-workshop::PublicOne-appmesh-workshop",
      eip: "NatGatewayOneAttachment",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: "NatGatewayThree",
    properties: ({}) => ({
      PrivateIpAddressIndex: 58,
    }),
    dependencies: ({}) => ({
      subnet: "VPC-appmesh-workshop::PublicThree-appmesh-workshop",
      eip: "NatGatewayThreeAttachment",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: "NatGatewayTwo",
    properties: ({}) => ({
      PrivateIpAddressIndex: 40,
    }),
    dependencies: ({}) => ({
      subnet: "VPC-appmesh-workshop::PublicTwo-appmesh-workshop",
      eip: "NatGatewayTwoAttachment",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      natGateway: "NatGatewayOne",
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableOne",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      natGateway: "NatGatewayThree",
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableThree",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      natGateway: "NatGatewayTwo",
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableTwo",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "InternetGateway",
      routeTable: "VPC-appmesh-workshop::PublicRouteTable",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "PrivateRouteTableOne",
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "PrivateRouteTableThree",
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "PrivateRouteTableTwo",
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "PublicRouteTable",
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableOne",
      subnet: "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableThree",
      subnet: "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PrivateRouteTableTwo",
      subnet: "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PublicRouteTable",
      subnet: "VPC-appmesh-workshop::PublicOne-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PublicRouteTable",
      subnet: "VPC-appmesh-workshop::PublicThree-appmesh-workshop",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "VPC-appmesh-workshop::PublicRouteTable",
      subnet: "VPC-appmesh-workshop::PublicTwo-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
      Description: "Access to the instance",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "SecurityGroup-Container-appmesh-workshop",
      Description: "Access to the containers",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "SecurityGroup-ExternalLoadBalancer-appmesh-workshop",
      Description: "Access to the external load balancer",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "SecurityGroup-InternalLoadBalancer-appmesh-workshop",
      Description: "Access to the internal load balancer",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "SecurityGroup-VPCEndpoint-appmesh-workshop",
      Description: "Access to the VPC endpoints",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 22,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 22,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::appmesh-workshop-EC2InstanceSecurityGroup-QLIQHPFRMTIC",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::SecurityGroup-Container-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::SecurityGroup-ExternalLoadBalancer-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 3000,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
      ToPort: 3000,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::SecurityGroup-InternalLoadBalancer-appmesh-workshop",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "-1",
      IpRanges: [
        {
          CidrIp: "10.0.0.0/16",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PrivateOne-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 100,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PrivateThree-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 102,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PrivateTwo-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 101,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PublicOne-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PublicThree-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 2,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "PublicTwo-appmesh-workshop",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/appmesh-workshop",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/alb-ingress",
          Value: "1",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
      NewBits: 8,
      NetworkNumber: 1,
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "VPC-appmesh-workshop",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.appmesh-envoy-management`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ec2`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ec2messages`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ecr.api`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ecr.dkr`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.logs`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ssm`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      PrivateDnsEnabled: true,
      ServiceName: `com.amazonaws.${config.region}.ssmmessages`,
      VpcEndpointType: "Interface",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-VPCEndpoint-appmesh-workshop",
      ],
    }),
  },
  {
    type: "Repository",
    group: "ECR",
    properties: ({}) => ({
      repositoryName: "appmesh-workshop-crystal-wbwhxedgaxgq",
      imageTagMutability: "MUTABLE",
      imageScanningConfiguration: {
        scanOnPush: false,
      },
      encryptionConfiguration: {
        encryptionType: "AES256",
      },
    }),
  },
  {
    type: "Repository",
    group: "ECR",
    properties: ({}) => ({
      repositoryName: "appmesh-workshop-nodejs-01dx0xe86szs",
      imageTagMutability: "MUTABLE",
      imageScanningConfiguration: {
        scanOnPush: false,
      },
      encryptionConfiguration: {
        encryptionType: "AES256",
      },
    }),
  },
  {
    type: "Cluster",
    group: "ECS",
    properties: ({}) => ({
      clusterName: "cluster-appmesh-workshop",
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: ({ getId }) => ({
      deploymentConfiguration: {
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 200,
        minimumHealthyPercent: 100,
      },
      desiredCount: 3,
      enableECSManagedTags: false,
      enableExecuteCommand: false,
      healthCheckGracePeriodSeconds: 0,
      launchType: "FARGATE",
      loadBalancers: [
        {
          containerName: "crystal-service",
          containerPort: 3000,
          targetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "appmes-Cryst-XSTMVZJTLVER",
          })}`,
        },
      ],
      networkConfiguration: {
        awsvpcConfiguration: {
          assignPublicIp: "DISABLED",
        },
      },
      platformFamily: "Linux",
      platformVersion: "LATEST",
      schedulingStrategy: "REPLICA",
      serviceName: "crystal-service-lb",
    }),
    dependencies: ({}) => ({
      cluster: "cluster-appmesh-workshop",
      taskDefinition: "crystal-task-appmesh-workshop",
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-Container-appmesh-workshop",
      ],
      targetGroups: ["appmes-Cryst-XSTMVZJTLVER"],
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: ({}) => ({
      deploymentConfiguration: {
        maximumPercent: 200,
        minimumHealthyPercent: 100,
      },
      deploymentController: {
        type: "EXTERNAL",
      },
      desiredCount: 6,
      enableECSManagedTags: false,
      enableExecuteCommand: false,
      schedulingStrategy: "REPLICA",
      serviceName: "crystal-service-sd",
    }),
    dependencies: ({}) => ({
      cluster: "cluster-appmesh-workshop",
    }),
  },
  {
    type: "TaskSet",
    group: "ECS",
    properties: ({ getId }) => ({
      computedDesiredCount: 3,
      externalId: "vanilla-task-set",
      launchType: "FARGATE",
      networkConfiguration: {
        awsvpcConfiguration: {
          assignPublicIp: "DISABLED",
        },
      },
      platformFamily: "Linux",
      platformVersion: "1.4.0",
      scale: {
        unit: "PERCENT",
        value: 50,
      },
      serviceRegistries: [
        {
          registryArn: `${getId({
            type: "Service",
            group: "ServiceDiscovery",
            name: "crystal",
          })}`,
        },
      ],
    }),
    dependencies: ({}) => ({
      cluster: "cluster-appmesh-workshop",
      taskDefinition: "crystal-task-appmesh-workshop",
      service: "crystal-service-sd",
      serviceDiscoveryService: ["crystal"],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-Container-appmesh-workshop",
      ],
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: ({ config }) => ({
      containerDefinitions: [
        {
          cpu: 0,
          essential: true,
          healthCheck: {
            command: [
              "CMD-SHELL",
              "curl -s http://localhost:3000/health | grep -q Healthy!",
            ],
            interval: 5,
            retries: 3,
            startPeriod: 10,
            timeout: 2,
          },
          image: `${config.accountId()}.dkr.ecr.${
            config.region
          }.amazonaws.com/appmesh-workshop-crystal-wbwhxedgaxgq:epoch`,
          name: "crystal-service",
          portMappings: [
            {
              containerPort: 3000,
              hostPort: 3000,
              protocol: "tcp",
            },
          ],
        },
      ],
      cpu: "256",
      family: "crystal-task-appmesh-workshop",
      memory: "512",
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
    }),
    dependencies: ({}) => ({
      taskRole: "appmesh-workshop-ECSTaskRole-U9NTCA3G3INQ",
      executionRole: "appmesh-workshop-ECSServiceRole-RIAPE76QVW0Z",
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "ExtLB-appmesh-workshop",
      targetGroup: "appmes-RubyT-HRLNYR1HFN6J",
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Port: 3000,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "IntLB-appmesh-workshop",
      targetGroup: "appmes-Cryst-XSTMVZJTLVER",
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "ExtLB-appmesh-workshop",
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({}) => ({
      subnets: [
        "VPC-appmesh-workshop::PublicOne-appmesh-workshop",
        "VPC-appmesh-workshop::PublicThree-appmesh-workshop",
        "VPC-appmesh-workshop::PublicTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-ExternalLoadBalancer-appmesh-workshop",
      ],
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "IntLB-appmesh-workshop",
      Scheme: "internal",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({}) => ({
      subnets: [
        "VPC-appmesh-workshop::PrivateOne-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateThree-appmesh-workshop",
        "VPC-appmesh-workshop::PrivateTwo-appmesh-workshop",
      ],
      securityGroups: [
        "sg::VPC-appmesh-workshop::SecurityGroup-InternalLoadBalancer-appmesh-workshop",
      ],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "appmes-Cryst-XSTMVZJTLVER",
      Protocol: "HTTP",
      Port: 3000,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckIntervalSeconds: 10,
      HealthCheckPath: "/health",
      TargetType: "ip",
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "appmes-RubyT-HRLNYR1HFN6J",
      Protocol: "HTTP",
      Port: 3000,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckIntervalSeconds: 10,
      HealthCheckPath: "/health",
      Matcher: {
        HttpCode: "200-299",
      },
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "appmesh-workshop-InstanceProfile-KMl4m5zQVs1I",
    dependencies: ({}) => ({
      roles: ["appmesh-workshop-EC2InstanceRole-P65NSC5SSWJH"],
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "appmesh-workshop-InstanceProfileExternal-Gyr3M1YtaL0v",
    dependencies: ({}) => ({
      roles: ["appmesh-workshop-EC2ExternalInstanceRole-7TP1XLCF2830"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appmesh-workshop-EC2ExternalInstanceRole-7TP1XLCF2830",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
          },
        ],
        Version: "2008-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["eks:DescribeCluster"],
                Effect: "Allow",
                Resource: "*",
              },
            ],
          },
          PolicyName: "EC2InstanceExternalRolePolicy",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          PolicyName: "AmazonEC2RoleforSSM",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appmesh-workshop-EC2InstanceRole-P65NSC5SSWJH",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
          },
        ],
        Version: "2008-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                  "logs:PutLogEvents",
                  "appmesh:StreamAggregatedResources",
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                  "xray:GertSamplingStatisticSumaries",
                  "servicediscovery:RegisterInstance",
                  "servicediscovery:DeregisterInstance",
                  "route53:CreateHealthCheck",
                  "route53:ChangeResourceRecordSets",
                  "route53:UpdateHealthCheck",
                ],
                Effect: "Allow",
                Resource: "*",
              },
            ],
          },
          PolicyName: "EC2InstanceRolePolicy",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          PolicyName: "AmazonEC2RoleforSSM",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appmesh-workshop-ECSServiceRole-RIAPE76QVW0Z",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: ["ecs-tasks.amazonaws.com", "ecs.amazonaws.com"],
            },
          },
        ],
        Version: "2008-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "ec2:AttachNetworkInterface",
                  "ec2:CreateNetworkInterface",
                  "ec2:CreateNetworkInterfacePermission",
                  "ec2:DeleteNetworkInterface",
                  "ec2:DeleteNetworkInterfacePermission",
                  "ec2:Describe*",
                  "ec2:DetachNetworkInterface",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:DeregisterTargets",
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "elasticloadbalancing:RegisterTargets",
                  "iam:PassRole",
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "logs:DescribeLogStreams",
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                  "logs:PutLogEvents",
                ],
                Effect: "Allow",
                Resource: "*",
              },
            ],
          },
          PolicyName: "ECSServiceRolePolicy",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appmesh-workshop-ECSTaskRole-U9NTCA3G3INQ",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
          },
        ],
        Version: "2008-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                  "logs:PutLogEvents",
                  "appmesh:StreamAggregatedResources",
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                  "xray:GertSamplingStatisticSumaries",
                ],
                Effect: "Allow",
                Resource: "*",
              },
            ],
          },
          PolicyName: "ECSTaskRolePolicy",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "appmesh-workshop-KeyPairHelperExecutionRole-14336BINEI2BQ",
      AssumeRolePolicyDocument: {
        Statement: [
          {
            Action: "sts:AssumeRole",
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
          },
        ],
        Version: "2012-10-17",
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                ],
                Effect: "Allow",
                Resource: "arn:aws:logs:*:*:*",
              },
              {
                Action: [
                  "ec2:CreateKeyPair",
                  "ec2:DeleteKeyPair",
                  "ssm:PutParameter",
                  "ssm:DeleteParameter",
                  "kms:Encrypt",
                ],
                Effect: "Allow",
                Resource: "*",
              },
            ],
            Version: "2012-10-17",
          },
          PolicyName: "KeyPairHelperExecutionPolicy",
        },
      ],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "alias/appmeshworkshop",
    properties: ({ config }) => ({
      Policy: {
        Id: "master-key",
        Statement: [
          {
            Action: [
              "kms:Create*",
              "kms:Describe*",
              "kms:Enable*",
              "kms:List*",
              "kms:Put*",
              "kms:Update*",
              "kms:Revoke*",
              "kms:Disable*",
              "kms:Get*",
              "kms:Delete*",
              "kms:TagResource",
              "kms:UntagResource",
              "kms:ScheduleKeyDeletion",
              "kms:CancelKeyDeletion",
            ],
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Resource: "*",
            Sid: "Enable IAM User Permissions",
          },
          {
            Action: [
              "kms:Encrypt",
              "kms:Decrypt",
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:DescribeKey",
            ],
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Resource: "*",
            Sid: "Allow Use of the Key",
          },
        ],
        Version: "2012-10-17",
      },
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        FunctionName: "appmesh-workshop-KeyPairHelperLambda-LhMHddWOuSgf",
        Handler: "index.handler",
        Runtime: "python3.7",
        Timeout: 30,
      },
    }),
    dependencies: ({}) => ({
      role: "appmesh-workshop-KeyPairHelperExecutionRole-14336BINEI2BQ",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({}) => ({
      Name: "appmeshworkshop.hosted.local.",
      HostedZoneConfig: {
        Comment: "Private hosted zone",
      },
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      AliasTarget: {
        EvaluateTargetHealth: false,
      },
      Name: "crystal.appmeshworkshop.hosted.local.",
      Type: "A",
    }),
    dependencies: ({}) => ({
      hostedZone: "appmeshworkshop.hosted.local.",
      loadBalancer: "IntLB-appmesh-workshop",
    }),
  },
  {
    type: "PrivateDnsNamespace",
    group: "ServiceDiscovery",
    properties: ({}) => ({
      Description: "App Mesh Workshop private DNS namespace",
      Name: "appmeshworkshop.pvt.local",
      Properties: {
        DnsProperties: {
          SOA: {
            TTL: 15,
          },
        },
      },
    }),
    dependencies: ({}) => ({
      vpc: "VPC-appmesh-workshop",
    }),
  },
  {
    type: "Service",
    group: "ServiceDiscovery",
    properties: ({}) => ({
      Description: "Discovery service for the Crystal service",
      DnsConfig: {
        DnsRecords: [
          {
            TTL: 300,
            Type: "A",
          },
        ],
        RoutingPolicy: "MULTIVALUE",
      },
      HealthCheckCustomConfig: {
        FailureThreshold: 1,
      },
      Name: "crystal",
    }),
    dependencies: ({}) => ({
      namespacePrivateDns: "appmeshworkshop.pvt.local",
    }),
  },
];
