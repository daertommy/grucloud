// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  { type: "ElasticIpAddress", group: "EC2", name: "EIP-EC2" },
  { type: "ElasticIpAddress", group: "EC2", name: "EIP-ECS" },
  {
    type: "Instance",
    group: "EC2",
    name: "lattice-ec2-testing-ec2",
    properties: ({ config, getId }) => ({
      Image: {
        Description: "Amazon Linux 2 AMI 2.0.20230404.1 x86_64 HVM gp2",
      },
      InstanceType: "t2.micro",
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: "lattice-ec2-testing-vpc::lattice-ec2-testing-private-subnet",
          })}`,
        },
      ],
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
      UserData: `#!/bin/bash -xe
yum update -y
sudo amazon-linux-extras install nginx1
systemctl enable nginx
systemctl start nginx
`,
    }),
    dependencies: ({}) => ({
      subnets: ["lattice-ec2-testing-vpc::lattice-ec2-testing-private-subnet"],
      iamInstanceProfile: "lattice-ec2-SSMProfile-1hvtN88JWOj3",
      securityGroups: [
        "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
      ],
    }),
  },
  { type: "InternetGateway", group: "EC2", name: "lattice-ec2-testing-ig" },
  { type: "InternetGateway", group: "EC2", name: "lattice-ecs-testing-ig" },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
      internetGateway: "lattice-ec2-testing-ig",
    }),
  },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
      internetGateway: "lattice-ecs-testing-ig",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: "lattice-ec2-testing-NATgw",
    properties: ({}) => ({
      PrivateIpAddressIndex: 155,
    }),
    dependencies: ({}) => ({
      subnet: "lattice-ec2-testing-vpc::lattice-ec2-testing-public-subnet",
      eip: "EIP-EC2",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: "lattice-ecs-testing-NATgw",
    properties: ({}) => ({
      PrivateIpAddressIndex: 181,
    }),
    dependencies: ({}) => ({
      subnet: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-subnet1",
      eip: "EIP-ECS",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      natGateway: "lattice-ec2-testing-NATgw",
      routeTable: "lattice-ec2-testing-vpc::lattice-ec2-testing-private-rt",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "lattice-ec2-testing-ig",
      routeTable: "lattice-ec2-testing-vpc::lattice-ec2-testing-public-rt",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      natGateway: "lattice-ecs-testing-NATgw",
      routeTable: "lattice-ecs-testing-vpc::lattice-ecs-testing-private-rt",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      ig: "lattice-ecs-testing-ig",
      routeTable: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-rt",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "lattice-ec2-testing-private-rt",
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "lattice-ec2-testing-public-rt",
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "lattice-ecs-testing-private-rt",
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "lattice-ecs-testing-public-rt",
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "lattice-ec2-testing-vpc::lattice-ec2-testing-private-rt",
      subnet: "lattice-ec2-testing-vpc::lattice-ec2-testing-private-subnet",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "lattice-ec2-testing-vpc::lattice-ec2-testing-public-rt",
      subnet: "lattice-ec2-testing-vpc::lattice-ec2-testing-public-subnet",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "lattice-ecs-testing-vpc::lattice-ecs-testing-private-rt",
      subnet: "lattice-ecs-testing-vpc::lattice-ecs-testing-private-subnet",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-rt",
      subnet: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-subnet1",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      routeTable: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-rt",
      subnet: "lattice-ecs-testing-vpc::lattice-ecs-testing-public-subnet2",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
      Description: "Test security group for Ec2",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "lattice-itself-EC2GeneralSecurityGroup-FMY55AA50ECG",
      Description: "lattice-ecs-too-open-security-group",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "lattice-ecs-ContainerSecurityGroup-EBXJDGD0L3X4",
      Description: "lattice-ecs-testing-container-security-group",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "lattice-ecs-LoadBalancerSecurityGroup-3MXT7I156YW6",
      Description: "lattice-ecs-testing-loadbalancer-security-group",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "lattice-itself-ECSGeneralSecurityGroup-18O1MTL1M76LQ",
      Description: "lattice-ecs-too-open-security-group",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.192.0.0/16",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ec2-testing-vpc::lattice-itself-EC2GeneralSecurityGroup-FMY55AA50ECG",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ecs-testing-vpc::lattice-ecs-ContainerSecurityGroup-EBXJDGD0L3X4",
      securityGroupFrom: [
        "sg::lattice-ecs-testing-vpc::lattice-ecs-LoadBalancerSecurityGroup-3MXT7I156YW6",
      ],
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ecs-testing-vpc::lattice-ecs-LoadBalancerSecurityGroup-3MXT7I156YW6",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "10.193.0.0/16",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ecs-testing-vpc::lattice-itself-ECSGeneralSecurityGroup-18O1MTL1M76LQ",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
    }),
  },
  {
    type: "SecurityGroupRuleEgress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup:
        "sg::lattice-ec2-testing-vpc::lattice-ec2-EC2SecurityGroup-196YZ14EGHL0E",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "lattice-ec2-testing-private-subnet",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 8,
      NetworkNumber: 20,
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "lattice-ec2-testing-public-subnet",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
      NewBits: 8,
      NetworkNumber: 10,
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "lattice-ecs-testing-private-subnet",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 8,
      NetworkNumber: 20,
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "lattice-ecs-testing-public-subnet1",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      MapPublicIpOnLaunch: true,
      NewBits: 8,
      NetworkNumber: 10,
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: "lattice-ecs-testing-public-subnet2",
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      MapPublicIpOnLaunch: true,
      NewBits: 8,
      NetworkNumber: 11,
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "lattice-ec2-testing-vpc",
    properties: ({}) => ({
      CidrBlock: "10.192.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "lattice-ecs-testing-vpc",
    properties: ({}) => ({
      CidrBlock: "10.193.0.0/16",
      DnsHostnames: true,
    }),
  },
  {
    type: "Cluster",
    group: "ECS",
    properties: ({}) => ({
      clusterName: "lattice-ecs-testing-cluster",
    }),
  },
  {
    type: "Service",
    group: "ECS",
    properties: ({ getId }) => ({
      deploymentConfiguration: {
        deploymentCircuitBreaker: {
          enable: false,
          rollback: false,
        },
        maximumPercent: 200,
        minimumHealthyPercent: 100,
      },
      desiredCount: 2,
      enableECSManagedTags: false,
      enableExecuteCommand: false,
      healthCheckGracePeriodSeconds: 30,
      launchType: "FARGATE",
      loadBalancers: [
        {
          containerName: "fastapi",
          containerPort: 80,
          targetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "lattice-ecs-testing-target-group",
          })}`,
        },
      ],
      networkConfiguration: {
        awsvpcConfiguration: {
          assignPublicIp: "DISABLED",
        },
      },
      platformFamily: "Linux",
      platformVersion: "LATEST",
      schedulingStrategy: "REPLICA",
      serviceName: "lattice-ecs-testing-service",
    }),
    dependencies: ({}) => ({
      cluster: "lattice-ecs-testing-cluster",
      taskDefinition: "lattice-ecs-testing-task-definition",
      subnets: ["lattice-ecs-testing-vpc::lattice-ecs-testing-private-subnet"],
      securityGroups: [
        "sg::lattice-ecs-testing-vpc::lattice-ecs-ContainerSecurityGroup-EBXJDGD0L3X4",
      ],
      targetGroups: ["lattice-ecs-testing-target-group"],
    }),
  },
  {
    type: "TaskDefinition",
    group: "ECS",
    properties: ({ config }) => ({
      containerDefinitions: [
        {
          cpu: 0,
          essential: true,
          healthCheck: {
            command: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"],
            interval: 5,
            retries: 2,
            timeout: 2,
          },
          image: "public.ecr.aws/ecs-sample-image/amazon-ecs-sample:latest",
          logConfiguration: {
            logDriver: "awslogs",
            options: {
              "awslogs-group": "/ecs/fastapi-task-definition",
              "awslogs-region": `${config.region}`,
              "awslogs-stream-prefix": "ecs",
            },
          },
          name: "fastapi",
          portMappings: [
            {
              containerPort: 80,
              hostPort: 80,
              protocol: "tcp",
            },
          ],
        },
      ],
      cpu: "256",
      family: "lattice-ecs-testing-task-definition",
      memory: "512",
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
    }),
    dependencies: ({}) => ({
      taskRole: "lattice-ecs-testing-task-role",
      executionRole: "lattice-ecs-testing-execution-role",
    }),
  },
  {
    type: "Listener",
    group: "ElasticLoadBalancingV2",
    properties: ({ getId }) => ({
      DefaultActions: [
        {
          ForwardConfig: {
            TargetGroups: [
              {
                TargetGroupArn: `${getId({
                  type: "TargetGroup",
                  group: "ElasticLoadBalancingV2",
                  name: "lattice-ecs-testing-target-group",
                })}`,
                Weight: 1,
              },
            ],
            TargetGroupStickinessConfig: {
              Enabled: false,
            },
          },
          TargetGroupArn: `${getId({
            type: "TargetGroup",
            group: "ElasticLoadBalancingV2",
            name: "lattice-ecs-testing-target-group",
          })}`,
          Type: "forward",
        },
      ],
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      loadBalancer: "lattice-ecs-testing-loadbalancer",
      targetGroups: ["lattice-ecs-testing-target-group"],
    }),
  },
  {
    type: "LoadBalancer",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      Name: "lattice-ecs-testing-loadbalancer",
      Scheme: "internal",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({}) => ({
      subnets: [
        "lattice-ecs-testing-vpc::lattice-ecs-testing-public-subnet1",
        "lattice-ecs-testing-vpc::lattice-ecs-testing-public-subnet2",
      ],
      securityGroups: [
        "sg::lattice-ecs-testing-vpc::lattice-ecs-LoadBalancerSecurityGroup-3MXT7I156YW6",
      ],
    }),
  },
  {
    type: "TargetGroup",
    group: "ElasticLoadBalancingV2",
    properties: ({}) => ({
      HealthCheckIntervalSeconds: 10,
      HealthCheckPort: "traffic-port",
      HealthCheckProtocol: "HTTP",
      Name: "lattice-ecs-testing-target-group",
      Port: 80,
      Protocol: "HTTP",
      ProtocolVersion: "HTTP1",
      TargetType: "ip",
    }),
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "lattice-ec2-SSMProfile-1hvtN88JWOj3",
    dependencies: ({}) => ({
      roles: ["lattice-ec2-testing-role"],
    }),
  },
  {
    type: "OpenIDConnectProvider",
    group: "IAM",
    properties: ({}) => ({
      ClientIDList: ["sts.amazonaws.com"],
      Url: "token.actions.githubusercontent.com",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "lattice-ec2-testing-role",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
          PolicyName: "AmazonSSMManagedInstanceCore",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "lattice-ecs-GitHub-to-fastapi-role",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Federated: `${getId({
                type: "OpenIDConnectProvider",
                group: "IAM",
                name: "oidp::token.actions.githubusercontent.com",
              })}`,
            },
            Action: "sts:AssumeRoleWithWebIdentity",
            Condition: {
              "ForAnyValue:StringEquals": {
                "token.actions.githubusercontent.com:aud": "sts.amazonaws.com",
                "token.actions.githubusercontent.com:sub": [
                  "repo:3sky/special-couscous:ref:refs/heads/main",
                  "repo:3sky/special-couscous:ref:refs/heads/dev",
                ],
              },
            },
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
          PolicyName: "AmazonEC2ContainerRegistryPowerUser",
        },
      ],
    }),
    dependencies: ({}) => ({
      openIdConnectProvider: "oidp::token.actions.githubusercontent.com",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "lattice-ecs-testing-auto-scaling-role",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole",
          PolicyName: "AmazonEC2ContainerServiceAutoscaleRole",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "lattice-ecs-testing-execution-role",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          PolicyName: "AmazonECSTaskExecutionRolePolicy",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "lattice-ecs-testing-task-role",
      AssumeRolePolicyDocument: {
        Version: "2008-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ecs-tasks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  },
  {
    type: "Listener",
    group: "VpcLattice",
    properties: ({ getId }) => ({
      defaultAction: {
        forward: {
          targetGroups: [
            {
              targetGroupIdentifier: `${getId({
                type: "TargetGroup",
                group: "VpcLattice",
                name: "ec2-lattice-tg",
              })}`,
              weight: 10,
            },
            {
              targetGroupIdentifier: `${getId({
                type: "TargetGroup",
                group: "VpcLattice",
                name: "ecs-lattice-tg",
              })}`,
              weight: 10,
            },
          ],
        },
      },
      name: "ec2-80",
      port: 80,
      protocol: "HTTP",
    }),
    dependencies: ({}) => ({
      service: "awesome-service",
      targetGroups: ["ec2-lattice-tg", "ecs-lattice-tg"],
    }),
  },
  {
    type: "Service",
    group: "VpcLattice",
    properties: ({}) => ({
      authType: "NONE",
      name: "awesome-service",
    }),
  },
  {
    type: "ServiceNetwork",
    group: "VpcLattice",
    properties: ({}) => ({
      authType: "NONE",
      name: "awesome-service-network",
    }),
  },
  {
    type: "ServiceNetworkServiceAssociation",
    group: "VpcLattice",
    dependencies: ({}) => ({
      service: "awesome-service",
      serviceNetwork: "awesome-service-network",
    }),
  },
  {
    type: "ServiceNetworkVpcAssociation",
    group: "VpcLattice",
    dependencies: ({}) => ({
      vpc: "lattice-ec2-testing-vpc",
      serviceNetwork: "awesome-service-network",
    }),
  },
  {
    type: "ServiceNetworkVpcAssociation",
    group: "VpcLattice",
    dependencies: ({}) => ({
      vpc: "lattice-ecs-testing-vpc",
      serviceNetwork: "awesome-service-network",
    }),
  },
  {
    type: "TargetGroup",
    group: "VpcLattice",
    properties: ({ getId }) => ({
      config: {
        healthCheck: {
          enabled: true,
          healthCheckIntervalSeconds: 30,
          healthCheckTimeoutSeconds: 5,
          healthyThresholdCount: 5,
          matcher: {
            httpCode: "200",
          },
          path: "/",
          port: 80,
          protocol: "HTTP",
          protocolVersion: "HTTP1",
          unhealthyThresholdCount: 2,
        },
        port: 80,
        protocol: "HTTP",
        protocolVersion: "HTTP1",
      },
      name: "ec2-lattice-tg",
      targets: [
        {
          id: `${getId({
            type: "Instance",
            group: "EC2",
            name: "lattice-ec2-testing-ec2",
          })}`,
          port: 80,
        },
      ],
      type: "INSTANCE",
    }),
    dependencies: ({}) => ({
      ec2Instances: ["lattice-ec2-testing-ec2"],
      vpc: "lattice-ec2-testing-vpc",
    }),
  },
  {
    type: "TargetGroup",
    group: "VpcLattice",
    properties: ({ getId }) => ({
      config: {
        port: 80,
        protocol: "HTTP",
        protocolVersion: "HTTP1",
      },
      name: "ecs-lattice-tg",
      targets: [
        {
          id: `${getId({
            type: "LoadBalancer",
            group: "ElasticLoadBalancingV2",
            name: "lattice-ecs-testing-loadbalancer",
          })}`,
          port: 80,
        },
      ],
      type: "ALB",
    }),
    dependencies: ({}) => ({
      elbLoadBalancers: ["lattice-ecs-testing-loadbalancer"],
      vpc: "lattice-ecs-testing-vpc",
    }),
  },
];
