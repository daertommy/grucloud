// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.APIGateway.makeRestApi({
    name: get("config.APIGateway.RestApi.petStore.name"),
    properties: get("config.APIGateway.RestApi.petStore.properties"),
  });

  provider.APIGateway.makeAuthorizer({
    name: get("config.APIGateway.Authorizer.myAuthorizer.name"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.empty.name"),
    properties: get("config.APIGateway.Model.empty.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.newPet.name"),
    properties: get("config.APIGateway.Model.newPet.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.newPetResponse.name"),
    properties: get("config.APIGateway.Model.newPetResponse.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.pet.name"),
    properties: get("config.APIGateway.Model.pet.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.pets.name"),
    properties: get("config.APIGateway.Model.pets.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeModel({
    name: get("config.APIGateway.Model.petType.name"),
    properties: get("config.APIGateway.Model.petType.properties"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeResource({
    name: get("config.APIGateway.Resource.petStore.name"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeResource({
    name: get("config.APIGateway.Resource.petStorePets.name"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeResource({
    name: get("config.APIGateway.Resource.petStorePetsPetId.name"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });

  provider.APIGateway.makeMethod({
    name: get("config.APIGateway.Method.createPet.name"),
    properties: get("config.APIGateway.Method.createPet.properties"),
    dependencies: ({ resources }) => ({
      resource: resources.APIGateway.Resource.petStorePets,
    }),
  });

  provider.APIGateway.makeMethod({
    name: get("config.APIGateway.Method.getPet.name"),
    properties: get("config.APIGateway.Method.getPet.properties"),
    dependencies: ({ resources }) => ({
      resource: resources.APIGateway.Resource.petStorePetsPetId,
    }),
  });

  provider.APIGateway.makeMethod({
    name: get("config.APIGateway.Method.petStoreGet.name"),
    properties: get("config.APIGateway.Method.petStoreGet.properties"),
    dependencies: ({ resources }) => ({
      resource: resources.APIGateway.Resource.petStore,
    }),
  });

  provider.APIGateway.makeMethod({
    name: get("config.APIGateway.Method.petStorePetsGet.name"),
    properties: get("config.APIGateway.Method.petStorePetsGet.properties"),
    dependencies: ({ resources }) => ({
      resource: resources.APIGateway.Resource.petStorePets,
    }),
  });

  provider.APIGateway.makeStage({
    name: get("config.APIGateway.Stage.dev.name"),
    dependencies: ({ resources }) => ({
      restApi: resources.APIGateway.RestApi.petStore,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
