// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/network-firewall/alerts",
    properties: ({}) => ({
      retentionInDays: 7,
      tags: {
        Env: "dev",
        Owner: "WWPS",
        Product: "Network_Automation",
        Project_ID: "12345",
      },
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "/aws/network-firewall/flows",
    properties: ({}) => ({
      retentionInDays: 7,
      tags: {
        Env: "dev",
        Owner: "WWPS",
        Product: "Network_Automation",
        Project_ID: "12345",
      },
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "dns_vpc",
    properties: ({}) => ({
      retentionInDays: 7,
      tags: {
        Env: "dev",
        Owner: "WWPS",
        Product: "Network_Automation",
        Project_ID: "12345",
      },
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "endpoint_vpc",
    properties: ({}) => ({
      retentionInDays: 7,
      tags: {
        Env: "dev",
        Owner: "WWPS",
        Product: "Network_Automation",
        Project_ID: "12345",
      },
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    name: "inspection_vpc",
    properties: ({}) => ({
      retentionInDays: 7,
      tags: {
        Env: "dev",
        Owner: "WWPS",
        Product: "Network_Automation",
        Project_ID: "12345",
      },
    }),
  },
  {
    type: "DhcpOptions",
    group: "EC2",
    name: "dns_dhcp_options",
    properties: ({}) => ({
      DhcpConfigurations: [
        {
          Key: "domain-name-servers",
          Values: ["AmazonProvidedDNS"],
        },
        {
          Key: "ntp-servers",
          Values: ["169.254.169.123", "fd00:ec2::123"],
        },
      ],
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "DhcpOptions",
    group: "EC2",
    name: "endpoint_dhcp_options",
    properties: ({}) => ({
      DhcpConfigurations: [
        {
          Key: "domain-name-servers",
          Values: ["AmazonProvidedDNS"],
        },
        {
          Key: "ntp-servers",
          Values: ["169.254.169.123", "fd00:ec2::123"],
        },
      ],
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "DhcpOptions",
    group: "EC2",
    name: "inspection_dhcp_options",
    properties: ({}) => ({
      DhcpConfigurations: [
        {
          Key: "domain-name-servers",
          Values: ["AmazonProvidedDNS"],
        },
        {
          Key: "ntp-servers",
          Values: ["169.254.169.123", "fd00:ec2::123"],
        },
      ],
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "DhcpOptionsAssociation",
    group: "EC2",
    name: "dhcp-options-assoc::dns_dhcp_options::dns_vpc",
    dependencies: ({}) => ({
      vpc: "dns_vpc",
      dhcpOptions: "dns_dhcp_options",
    }),
  },
  {
    type: "DhcpOptionsAssociation",
    group: "EC2",
    name: "dhcp-options-assoc::endpoint_dhcp_options::endpoint_vpc",
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
      dhcpOptions: "endpoint_dhcp_options",
    }),
  },
  {
    type: "DhcpOptionsAssociation",
    group: "EC2",
    name: "dhcp-options-assoc::inspection_dhcp_options::inspection_vpc",
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
      dhcpOptions: "inspection_dhcp_options",
    }),
  },
  {
    type: "Ipam",
    group: "EC2",
    name: "ipam-0c338a74077d2a5ff",
    properties: ({ config }) => ({
      IpamRegion: `${config.region}`,
      OperatingRegions: [
        {
          RegionName: "eu-west-2",
        },
      ],
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "IpamScope",
    group: "EC2",
    name: "ipam-scope-0b9d33499c30641ea",
    properties: ({ config }) => ({
      IpamRegion: `${config.region}`,
      IpamScopeType: "private",
      IsDefault: false,
      Description: "Org Scope",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      ipam: "ipam-0c338a74077d2a5ff",
    }),
  },
  {
    type: "IpamPool",
    group: "EC2",
    name: "ipam-pool-0622eb581c7ddf5bf",
    properties: ({ config }) => ({
      IpamScopeType: "private",
      IpamRegion: `${config.region}`,
      Locale: "eu-west-2",
      AutoImport: false,
      AddressFamily: "ipv4",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      ipamScope: "ipam-scope-0b9d33499c30641ea",
    }),
  },
  {
    type: "IpamPoolCidr",
    group: "EC2",
    properties: ({}) => ({
      Cidr: "10.0.0.0/10",
    }),
    dependencies: ({}) => ({
      ipamPool: "ipam-pool-0622eb581c7ddf5bf",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "dns_vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.8.0/22",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
      DnsHostnames: true,
      AmazonProvidedIpv6CidrBlock: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "endpoint_vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.4.0/22",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
      DnsHostnames: true,
      AmazonProvidedIpv6CidrBlock: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "inspection_vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/22",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
      DnsHostnames: true,
      AmazonProvidedIpv6CidrBlock: true,
    }),
  },
  {
    type: "InternetGateway",
    group: "EC2",
    name: "inspection_igw",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "InternetGatewayAttachment",
    group: "EC2",
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
      internetGateway: "inspection_igw",
    }),
  },
  {
    type: "EgressOnlyInternetGateway",
    group: "EC2",
    name: "inspection_eigw",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `inspection_natgw_${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnet: `inspection_internet_${config.region}a`,
      eip: "eipalloc-0d6739f1b6e787e33",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `inspection_natgw_${config.region}b`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnet: `inspection_internet_${config.region}b`,
      eip: "eipalloc-0bc01f989cd7c2cc0",
    }),
  },
  {
    type: "NatGateway",
    group: "EC2",
    name: ({ config }) => `inspection_natgw_${config.region}c`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      subnet: `inspection_internet_${config.region}c`,
      eip: "eipalloc-09b77a2b8eb2926b1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_attachment_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.8.0/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_attachment_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.8.32/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_attachment_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.8.64/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_endpoint_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.8.128/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_endpoint_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.8.192/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `dns_endpoint_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.9.0/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_attachment_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.4.0/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_attachment_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.4.32/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_attachment_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.4.64/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_endpoint_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.4.128/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_endpoint_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.4.192/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `endpoint_endpoint_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.5.0/26",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "endpoint",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.0.0/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.0.32/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.0.64/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.0.128/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.0.160/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.0.192/27",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      CidrBlock: "10.0.0.224/27",
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      CidrBlock: "10.0.1.0/27",
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}c`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}c`,
      CidrBlock: "10.0.1.32/27",
      MapPublicIpOnLaunch: true,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
      EnableDns64: true,
      PrivateDnsNameOptionsOnLaunch: {
        EnableResourceNameDnsARecord: true,
        EnableResourceNameDnsAAAARecord: true,
      },
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "dns_route_table",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "dns",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: "endpoint_route_table",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}b`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_attachment_${config.region}c`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "attachment",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}b`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_inspection_${config.region}c`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "private",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "inspection",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}a`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}b`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `inspection_internet_${config.region}c`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Network",
          Value: "public",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "Type",
          Value: "internet",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "inspection_vpc",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_attachment_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_attachment_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_attachment_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_endpoint_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_endpoint_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "dns_route_table",
      subnet: `dns_endpoint_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_attachment_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_attachment_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_attachment_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_endpoint_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_endpoint_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: "endpoint_route_table",
      subnet: `endpoint_endpoint_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}a`,
      subnet: `inspection_attachment_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}b`,
      subnet: `inspection_attachment_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}c`,
      subnet: `inspection_attachment_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}a`,
      subnet: `inspection_inspection_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}b`,
      subnet: `inspection_inspection_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}c`,
      subnet: `inspection_inspection_${config.region}c`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}a`,
      subnet: `inspection_internet_${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}b`,
      subnet: `inspection_internet_${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}c`,
      subnet: `inspection_internet_${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({}) => ({
      routeTable: "dns_route_table",
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "dns_route_table",
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({}) => ({
      routeTable: "endpoint_route_table",
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({}) => ({
      routeTable: "endpoint_route_table",
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}a`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}a`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}b`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}b`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}c`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_attachment_${config.region}c`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}a`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}a`,
      natGateway: `inspection_natgw_${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "64:ff9b::/96",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}a`,
      natGateway: `inspection_natgw_${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}a`,
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}b`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}b`,
      natGateway: `inspection_natgw_${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "64:ff9b::/96",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}b`,
      natGateway: `inspection_natgw_${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}b`,
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}c`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}c`,
      natGateway: `inspection_natgw_${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "64:ff9b::/96",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}c`,
      natGateway: `inspection_natgw_${config.region}c`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_inspection_${config.region}c`,
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}a`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}a`,
      ig: "inspection_igw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}a`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}b`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}b`,
      ig: "inspection_igw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}b`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}b`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationIpv6CidrBlock: "::/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}c`,
      egressOnlyInternetGateway: "inspection_eigw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}c`,
      ig: "inspection_igw",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "10.0.0.0/10",
    }),
    dependencies: ({ config }) => ({
      routeTable: `inspection_internet_${config.region}c`,
      vpcEndpoint: `vpce::NetworkFirewall::inspection_inspection_${config.region}c`,
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "Network-DNS-Traffic-SG",
      Description: "Allow traffic across org to dns endpoints",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "dns_vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "MGMT-VPC-Endpoints-Traffic-SG",
      Description: "Allow traffic across org to vpc endpoints",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      vpc: "endpoint_vpc",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 53,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "10.0.0.0/10",
            Description: "Allow 53 traffic across org to dns endpoints",
          },
        ],
        ToPort: 53,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::dns_vpc::Network-DNS-Traffic-SG",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 53,
        IpProtocol: "udp",
        IpRanges: [
          {
            CidrIp: "10.0.0.0/10",
            Description: "Allow 53 traffic across org to dns endpoints",
          },
        ],
        ToPort: 53,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::dns_vpc::Network-DNS-Traffic-SG",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpPermission: {
        FromPort: 443,
        IpProtocol: "tcp",
        IpRanges: [
          {
            CidrIp: "10.0.0.0/10",
            Description: "Allow 443 traffic across org to vpc endpoints",
          },
        ],
        ToPort: 443,
      },
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::endpoint_vpc::MGMT-VPC-Endpoints-Traffic-SG",
    }),
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: "eipalloc-09b77a2b8eb2926b1",
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: "eipalloc-0bc01f989cd7c2cc0",
  },
  {
    type: "ElasticIpAddress",
    group: "EC2",
    name: "eipalloc-0d6739f1b6e787e33",
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.athena`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.athena`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "athena.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.autoscaling`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.autoscaling`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "autoscaling.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "ec2.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ec2messages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2messages`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "ec2messages.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ecs`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ecs`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "ecs.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.logs`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.logs`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "logs.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.rds`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.rds`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "rds.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.sns`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.sns`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "sns.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.sqs`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.sqs`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "sqs.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssm`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssm`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "ssm.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) => `com.amazonaws.${config.region}.ssmmessages`,
    properties: ({ config }) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: "*",
            Effect: "Allow",
            Principal: "*",
            Resource: `*`,
          },
        ],
      },
      PrivateDnsEnabled: false,
      RequesterManaged: false,
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssmmessages`,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "PHZ",
          Value: "ssmmessages.eu-west-2.amazonaws.com",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_endpoint_${config.region}a`,
        `endpoint_endpoint_${config.region}b`,
        `endpoint_endpoint_${config.region}c`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) =>
      `vpce::NetworkFirewall::inspection_inspection_${config.region}a`,
    readOnly: true,
    dependencies: ({ config }) => ({
      vpc: "inspection_vpc",
      subnets: [`inspection_inspection_${config.region}a`],
      firewall: "NetworkFirewall",
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) =>
      `vpce::NetworkFirewall::inspection_inspection_${config.region}b`,
    readOnly: true,
    dependencies: ({ config }) => ({
      vpc: "inspection_vpc",
      subnets: [`inspection_inspection_${config.region}b`],
      firewall: "NetworkFirewall",
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    name: ({ config }) =>
      `vpce::NetworkFirewall::inspection_inspection_${config.region}c`,
    readOnly: true,
    dependencies: ({ config }) => ({
      vpc: "inspection_vpc",
      subnets: [`inspection_inspection_${config.region}c`],
      firewall: "NetworkFirewall",
    }),
  },
  {
    type: "TransitGateway",
    group: "EC2",
    name: "Org_TGW_dev",
    properties: ({}) => ({
      Description:
        "Org TGW with auto accept shared for prod, dev and shared environments",
      Options: {
        AmazonSideAsn: 64512,
        AutoAcceptSharedAttachments: "enable",
        DefaultRouteTableAssociation: "disable",
        DefaultRouteTablePropagation: "disable",
        VpnEcmpSupport: "enable",
        DnsSupport: "enable",
        MulticastSupport: "disable",
      },
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "dev",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "prod",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "shared",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      transitGateway: "Org_TGW_dev",
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-attach-005905e39c2e51994",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "enable",
        ApplianceModeSupport: "disable",
      },
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      transitGateway: "Org_TGW_dev",
      vpc: "dns_vpc",
      subnets: [
        `dns_attachment_${config.region}a`,
        `dns_attachment_${config.region}b`,
        `dns_attachment_${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-attach-02eb92b563d1e14bf",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "enable",
        ApplianceModeSupport: "enable",
      },
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      transitGateway: "Org_TGW_dev",
      vpc: "inspection_vpc",
      subnets: [
        `inspection_attachment_${config.region}a`,
        `inspection_attachment_${config.region}b`,
        `inspection_attachment_${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-attach-065041c0c05cdb4fa",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "enable",
        ApplianceModeSupport: "disable",
      },
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      transitGateway: "Org_TGW_dev",
      vpc: "endpoint_vpc",
      subnets: [
        `endpoint_attachment_${config.region}a`,
        `endpoint_attachment_${config.region}b`,
        `endpoint_attachment_${config.region}c`,
      ],
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "tgw-attach-005905e39c2e51994",
      transitGatewayRouteTable: "shared",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "tgw-attach-02eb92b563d1e14bf",
      transitGatewayRouteTable: "shared",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayVpcAttachment: "tgw-attach-065041c0c05cdb4fa",
      transitGatewayRouteTable: "shared",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "dev_endpoint_vpc_flow_logs",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "",
            Effect: "Allow",
            Principal: {
              Service: `vpc-flow-logs.amazonaws.com`,
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                ],
                Effect: "Allow",
                Resource: `*`,
              },
            ],
          },
          PolicyName: "endpoint_vpc_flow_logs",
        },
      ],
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    name: "dev_network_automation_role",
    properties: ({}) => ({
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              AWS: "*",
            },
            Action: "sts:AssumeRole",
            Condition: {
              StringEquals: {
                "aws:PrincipalOrgID": "o-xs8pjirjbw",
              },
              StringNotEqualsIgnoreCase: {
                "aws:RequestTag/automation": "true",
              },
            },
          },
        ],
      },
      Tags: [
        {
          Key: "automation",
          Value: "true",
        },
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      policies: ["dev_central_network_automation_policy"],
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    name: "dev_central_network_automation_policy",
    properties: ({}) => ({
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "ec2:DescribeTransitGateway*",
              "ec2:GetTransitGateway*",
              "ec2:SearchTransitGateway*",
              "ec2:AssociateTransitGatewayRouteTable",
              "ec2:DisassociateTransitGatewayRouteTable",
              "ec2:EnableTransitGatewayRouteTablePropagation",
              "ec2:ModifyTransitGateway",
              "ec2:DescribeVpcs",
              "ec2:DescribeVpcAttribute",
              "ec2:ReplaceTransitGatewayRoute",
              "ec2:DisableTransitGatewayRouteTablePropagation",
            ],
            Effect: "Allow",
            Resource: `*`,
          },
          {
            Action: ["ssm:GetParameters", "ssm:GetParameter", "kms:Decrypt"],
            Effect: "Allow",
            Resource: `*`,
          },
          {
            Action: [
              "route53:GetHostedZone",
              "route53:ListHostedZonesByVPC",
              "route53:DisassociateVPCFromHostedZone",
              "route53:AssociateVPCWithHostedZone",
              "route53:CreateVPCAssociationAuthorization",
              "route53:ChangeResourceRecordSets",
              "route53:ListResourceRecordSets",
              "route53:DeleteVPCAssociationAuthorization",
              "route53:ListHostedZones",
              "route53:ListTagsForResource",
              "route53:ListVPCAssociationAuthorizations",
              "route53:GetChange",
            ],
            Effect: "Allow",
            Resource: `*`,
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description:
        "dev Central network automation policy to allow TGW association, propagation and route53 private hosted zone association",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "Firewall",
    group: "NetworkFirewall",
    properties: ({}) => ({
      DeleteProtection: false,
      FirewallName: "NetworkFirewall",
      FirewallPolicyChangeProtection: false,
      SubnetChangeProtection: false,
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({ config }) => ({
      vpc: "inspection_vpc",
      subnets: [
        `inspection_inspection_${config.region}a`,
        `inspection_inspection_${config.region}b`,
        `inspection_inspection_${config.region}c`,
      ],
      firewallPolicy: "firewall-policy",
    }),
  },
  {
    type: "Policy",
    group: "NetworkFirewall",
    properties: ({ getId }) => ({
      FirewallPolicy: {
        StatefulRuleGroupReferences: [
          {
            ResourceArn: `${getId({
              type: "RuleGroup",
              group: "NetworkFirewall",
              name: "block-domains",
            })}`,
          },
        ],
        StatelessDefaultActions: ["aws:forward_to_sfe"],
        StatelessFragmentDefaultActions: ["aws:forward_to_sfe"],
        StatelessRuleGroupReferences: undefined,
      },
      FirewallPolicyName: "firewall-policy",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
    dependencies: ({}) => ({
      ruleGroups: ["block-domains"],
    }),
  },
  {
    type: "RuleGroup",
    group: "NetworkFirewall",
    properties: ({}) => ({
      RuleGroup: {
        RuleVariables: {
          IPSets: {
            HOME_NET: {
              Definition: ["10.0.0.0/10"],
            },
          },
        },
        RulesSource: {
          RulesSourceList: {
            GeneratedRulesType: "DENYLIST",
            TargetTypes: ["HTTP_HOST", "TLS_SNI"],
            Targets: [".twitter.com", ".facebook.com"],
          },
        },
      },
      Capacity: 100,
      RuleGroupName: "block-domains",
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
      Type: "STATEFUL",
    }),
  },
  {
    type: "LoggingConfiguration",
    group: "NetworkFirewall",
    properties: ({}) => ({
      LoggingConfiguration: {
        LogDestinationConfigs: [
          {
            LogDestination: {
              logGroup: "/aws/network-firewall/flows",
            },
            LogDestinationType: "CloudWatchLogs",
            LogType: "FLOW",
          },
          {
            LogDestination: {
              logGroup: "/aws/network-firewall/alerts",
            },
            LogDestinationType: "CloudWatchLogs",
            LogType: "ALERT",
          },
        ],
      },
      FirewallName: "NetworkFirewall",
    }),
    dependencies: ({}) => ({
      firewall: "NetworkFirewall",
      logGroups: [
        "/aws/network-firewall/alerts",
        "/aws/network-firewall/flows",
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `athena.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `autoscaling.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `ec2.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `ec2messages.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `ecs.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `logs.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: "network-dev.internal.",
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `rds.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `sns.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `sqs.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `ssm.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    name: ({ config }) => `ssmmessages.${config.region}.amazonaws.com.`,
    properties: ({}) => ({
      Tags: [
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
        {
          Key: "vpce",
          Value: "true",
        },
      ],
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "athena.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0cf39574d1ae988da-ysvgez6h.athena.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `athena.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "autoscaling.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0afda4d44d52bc0e5-6bkh8eek.autoscaling.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `autoscaling.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "ec2.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-04674e70fedf8fe2f-rapirsjl.ec2.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ec2.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "ec2messages.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-09a1251acf34d56a4-bfa49ova.ec2messages.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ec2messages.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "ecs.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0a72036e862593ef2-3v8m9xe6.ecs.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ecs.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "logs.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0e4dfe1039ae420d2-4mi0gqvi.logs.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `logs.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "rds.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-086a9e074aa903ad7-px7q2ite.rds.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `rds.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "sns.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-015b5949097426079-q57mwnca.sns.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `sns.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "sqs.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0863570edb44a5456-v7w42dw0.sqs.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `sqs.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "ssm.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-0595e6d1215ec3bc1-3t4jul53.ssm.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ssm.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({}) => ({
      Name: "ssmmessages.eu-west-2.amazonaws.com.",
      Type: "A",
      AliasTarget: {
        HostedZoneId: "Z7K1066E3PUKB",
        DNSName:
          "vpce-027e40fe6bfd2d562-f8no5ms7.ssmmessages.eu-west-2.vpce.amazonaws.com.",
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ssmmessages.${config.region}.amazonaws.com.`,
    }),
  },
  {
    type: "Parameter",
    group: "SSM",
    name: "/ipam/pool/id",
    properties: ({}) => ({
      Type: "SecureString",
      Value:
        "AQICAHhr/Nxf2T4S+qxKFNRnmh8ianmIxLFpol7uY+IE2cv30QGkX7R+j1ewRkQTW8IwN5fOAAAAeTB3BgkqhkiG9w0BBwagajBoAgEAMGMGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQM1OiZy3GmuoNygJThAgEQgDYJzP2smm92xRDK6dcIzGfwNyV09ggO7CB2HO+D+LicSoWKx6yqaZzpWlcyMZhLDkbfA5jh/ts=",
      DataType: "text",
      Tags: [
        {
          Key: "automation",
          Value: "true",
        },
        {
          Key: "Env",
          Value: "dev",
        },
        {
          Key: "Owner",
          Value: "WWPS",
        },
        {
          Key: "Product",
          Value: "Network_Automation",
        },
        {
          Key: "Project_ID",
          Value: "12345",
        },
      ],
    }),
  },
];
