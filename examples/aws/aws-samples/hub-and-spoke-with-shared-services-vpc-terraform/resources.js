// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName:
        "shared-services-vpc-vpc-flow-logs-20220717111209245600000006",
      retentionInDays: 7,
    }),
    dependencies: ({}) => ({
      kmsKey: "kms-key-hubspoke-shared-services",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "spoke-vpc-1-vpc-flow-logs-20220717111207772600000001",
      retentionInDays: 7,
    }),
    dependencies: ({}) => ({
      kmsKey: "kms-key-hubspoke-shared-services",
    }),
  },
  {
    type: "LogGroup",
    group: "CloudWatchLogs",
    properties: ({}) => ({
      logGroupName: "spoke-vpc-2-vpc-flow-logs-20220717111208892800000005",
      retentionInDays: 7,
    }),
    dependencies: ({}) => ({
      kmsKey: "kms-key-hubspoke-shared-services",
    }),
  },
  {
    type: "FlowLogs",
    group: "EC2",
    name: "shared-services-vpc",
    properties: ({}) => ({
      TrafficType: "ALL",
      MaxAggregationInterval: 600,
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
      iamRole: "shared-services-vpc-cw-access-role-20220717111209660000000007",
      cloudWatchLogGroup:
        "shared-services-vpc-vpc-flow-logs-20220717111209245600000006",
    }),
  },
  {
    type: "FlowLogs",
    group: "EC2",
    name: "spoke-vpc-1",
    properties: ({}) => ({
      TrafficType: "ALL",
      MaxAggregationInterval: 600,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
      iamRole: "spoke-vpc-1-cw-access-role-20220717111209704200000008",
      cloudWatchLogGroup:
        "spoke-vpc-1-vpc-flow-logs-20220717111207772600000001",
    }),
  },
  {
    type: "FlowLogs",
    group: "EC2",
    name: "spoke-vpc-2",
    properties: ({}) => ({
      TrafficType: "ALL",
      MaxAggregationInterval: 600,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
      iamRole: "spoke-vpc-2-cw-access-role-20220717111209913100000009",
      cloudWatchLogGroup:
        "spoke-vpc-2-vpc-flow-logs-20220717111208892800000005",
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "shared-services-vpc",
    properties: ({}) => ({
      CidrBlock: "10.0.50.0/24",
      DnsHostnames: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "spoke-vpc-1",
    properties: ({}) => ({
      CidrBlock: "10.0.0.0/24",
      DnsHostnames: true,
    }),
  },
  {
    type: "Vpc",
    group: "EC2",
    name: "spoke-vpc-2",
    properties: ({}) => ({
      CidrBlock: "10.0.1.0/24",
      DnsHostnames: true,
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 2,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `private-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 2,
      NetworkNumber: 1,
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}b`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}b`,
      NewBits: 4,
      NetworkNumber: 13,
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 2,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 2,
      NetworkNumber: 0,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Subnet",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    properties: ({ config }) => ({
      AvailabilityZone: `${config.region}a`,
      NewBits: 4,
      NetworkNumber: 12,
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `private-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}b`,
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `private-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTable",
    group: "EC2",
    name: ({ config }) => `tgw-${config.region}a`,
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::private-${config.region}a`,
      subnet: `shared-services-vpc::private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::private-${config.region}b`,
      subnet: `shared-services-vpc::private-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::tgw-${config.region}a`,
      subnet: `shared-services-vpc::tgw-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::tgw-${config.region}b`,
      subnet: `shared-services-vpc::tgw-${config.region}b`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-1::private-${config.region}a`,
      subnet: `spoke-vpc-1::private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-1::tgw-${config.region}a`,
      subnet: `spoke-vpc-1::tgw-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-2::private-${config.region}a`,
      subnet: `spoke-vpc-2::private-${config.region}a`,
    }),
  },
  {
    type: "RouteTableAssociation",
    group: "EC2",
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-2::tgw-${config.region}a`,
      subnet: `spoke-vpc-2::tgw-${config.region}a`,
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::private-${config.region}a`,
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `shared-services-vpc::private-${config.region}b`,
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-1::private-${config.region}a`,
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "Route",
    group: "EC2",
    properties: ({}) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ config }) => ({
      routeTable: `spoke-vpc-2::private-${config.region}a`,
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "endpoints_sg",
      Description: "Security Group for SSM connection",
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "r53endpoint_inbound_sg",
      Description: "Security Group for R53 Resolver Inbound Endpoints",
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "r53endpoint_outbound_sg",
      Description: "Security Group for R53 Resolver Outbound Endpoits",
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "instance_sg",
      Description: "Security Group used in the instances",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "SecurityGroup",
    group: "EC2",
    properties: ({}) => ({
      GroupName: "instance_sg",
      Description: "Security Group used in the instances",
    }),
    dependencies: ({}) => ({
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 443,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing HTTPS",
        },
      ],
      ToPort: 443,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::shared-services-vpc::endpoints_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "192.168.0.0/16",
          Description: "Allowing DNS traffic (TCP)",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::shared-services-vpc::r53endpoint_inbound_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "192.168.0.0/16",
          Description: "Allowing DNS traffic (UDP)",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::shared-services-vpc::r53endpoint_inbound_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing DNS traffic (TCP)",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::shared-services-vpc::r53endpoint_outbound_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 53,
      IpProtocol: "udp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing DNS traffic (UDP)",
        },
      ],
      ToPort: 53,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::shared-services-vpc::r53endpoint_outbound_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "icmp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing ICMP traffic",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::instance_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing HTTP traffic",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-1::instance_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      IpProtocol: "icmp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing ICMP traffic",
        },
      ],
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::instance_sg",
    }),
  },
  {
    type: "SecurityGroupRuleIngress",
    group: "EC2",
    properties: ({}) => ({
      FromPort: 80,
      IpProtocol: "tcp",
      IpRanges: [
        {
          CidrIp: "0.0.0.0/0",
          Description: "Allowing HTTP traffic",
        },
      ],
      ToPort: 80,
    }),
    dependencies: ({}) => ({
      securityGroup: "sg::spoke-vpc-2::instance_sg",
    }),
  },
  {
    type: "Instance",
    group: "EC2",
    name: "spoke-vpc-1-instance-1-hubspoke-shared-services",
    properties: ({ config, getId }) => ({
      InstanceType: "t2.micro",
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::spoke-vpc-1::instance_sg",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `spoke-vpc-1::private-${config.region}a`,
          })}`,
        },
      ],
      MetadataOptions: {
        HttpTokens: "required",
      },
      Image: {
        Description: "Amazon Linux AMI 2018.03.0.20220609.0 x86_64 HVM gp2",
      },
    }),
    dependencies: ({ config }) => ({
      subnets: [`spoke-vpc-1::private-${config.region}a`],
      iamInstanceProfile: "ec2_instance_profile_hubspoke-shared-services",
      securityGroups: ["sg::spoke-vpc-1::instance_sg"],
    }),
  },
  {
    type: "Instance",
    group: "EC2",
    name: "spoke-vpc-2-instance-1-hubspoke-shared-services",
    properties: ({ config, getId }) => ({
      InstanceType: "t2.micro",
      Placement: {
        AvailabilityZone: `${config.region}a`,
      },
      NetworkInterfaces: [
        {
          DeviceIndex: 0,
          Groups: [
            `${getId({
              type: "SecurityGroup",
              group: "EC2",
              name: "sg::spoke-vpc-2::instance_sg",
            })}`,
          ],
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `spoke-vpc-2::private-${config.region}a`,
          })}`,
        },
      ],
      MetadataOptions: {
        HttpTokens: "required",
      },
      Image: {
        Description: "Amazon Linux AMI 2018.03.0.20220609.0 x86_64 HVM gp2",
      },
    }),
    dependencies: ({ config }) => ({
      subnets: [`spoke-vpc-2::private-${config.region}a`],
      iamInstanceProfile: "ec2_instance_profile_hubspoke-shared-services",
      securityGroups: ["sg::spoke-vpc-2::instance_sg"],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ec2messages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "shared-services-vpc",
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.s3`,
    }),
    dependencies: ({ config }) => ({
      vpc: "shared-services-vpc",
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssm`,
    }),
    dependencies: ({ config }) => ({
      vpc: "shared-services-vpc",
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "VpcEndpoint",
    group: "EC2",
    properties: ({ config }) => ({
      VpcEndpointType: "Interface",
      ServiceName: `com.amazonaws.${config.region}.ssmmessages`,
    }),
    dependencies: ({ config }) => ({
      vpc: "shared-services-vpc",
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "TransitGateway",
    group: "EC2",
    name: "transit-gateway-hubspoke-shared-services",
    properties: ({}) => ({
      Description: "Transit-Gateway-hubspoke-shared-services",
      Options: {
        AmazonSideAsn: 64512,
        AutoAcceptSharedAttachments: "disable",
        DefaultRouteTableAssociation: "disable",
        DefaultRouteTablePropagation: "disable",
        VpnEcmpSupport: "enable",
        DnsSupport: "enable",
        MulticastSupport: "disable",
      },
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "shared-services-vpc-rt-hubspoke-shared-services",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
    }),
    dependencies: ({}) => ({
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "TransitGatewayRouteTable",
    group: "EC2",
    name: "spoke-vpc-rt-hubspoke-shared-services",
    properties: ({}) => ({
      DefaultAssociationRouteTable: false,
      DefaultPropagationRouteTable: false,
    }),
    dependencies: ({}) => ({
      transitGateway: "transit-gateway-hubspoke-shared-services",
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::shared-services-vpc",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "transit-gateway-hubspoke-shared-services",
      vpc: "shared-services-vpc",
      subnets: [
        `shared-services-vpc::tgw-${config.region}a`,
        `shared-services-vpc::tgw-${config.region}b`,
      ],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-1",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "transit-gateway-hubspoke-shared-services",
      vpc: "spoke-vpc-1",
      subnets: [`spoke-vpc-1::tgw-${config.region}a`],
    }),
  },
  {
    type: "TransitGatewayVpcAttachment",
    group: "EC2",
    name: "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-2",
    properties: ({}) => ({
      Options: {
        DnsSupport: "enable",
        Ipv6Support: "disable",
        ApplianceModeSupport: "disable",
      },
    }),
    dependencies: ({ config }) => ({
      transitGateway: "transit-gateway-hubspoke-shared-services",
      vpc: "spoke-vpc-2",
      subnets: [`spoke-vpc-2::tgw-${config.region}a`],
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable:
        "shared-services-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::shared-services-vpc",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable: "spoke-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-1",
    }),
  },
  {
    type: "TransitGatewayRouteTableAssociation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable: "spoke-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-2",
    }),
  },
  {
    type: "TransitGatewayRouteTablePropagation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable: "spoke-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::shared-services-vpc",
    }),
  },
  {
    type: "TransitGatewayRouteTablePropagation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable:
        "shared-services-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-1",
    }),
  },
  {
    type: "TransitGatewayRouteTablePropagation",
    group: "EC2",
    dependencies: ({}) => ({
      transitGatewayRouteTable:
        "shared-services-vpc-rt-hubspoke-shared-services",
      transitGatewayVpcAttachment:
        "tgw-vpc-attach::transit-gateway-hubspoke-shared-services::spoke-vpc-2",
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "ec2_ssm_role_hubspoke-shared-services",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "1",
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      AttachedPolicies: [
        {
          PolicyName: "AmazonS3ReadOnlyAccess",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
        },
        {
          PolicyName: "AmazonSSMManagedInstanceCore",
          PolicyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
        },
        {
          PolicyName: "AmazonEC2RoleforSSM",
          PolicyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
        },
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "shared-services-vpc-cw-access-role-20220717111209660000000007",
      Description:
        "Cloudwatch permissions role for shared-services-vpc with vpc-flow-logs",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "SharedServicesVpcVpcFlowLogsCloudwatchTrust",
            Effect: "Allow",
            Principal: {
              Service: "vpc-flow-logs.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: [
        "shared-services-vpc-cw-access-policy-20220717111207838000000002",
      ],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "spoke-vpc-1-cw-access-role-20220717111209704200000008",
      Description:
        "Cloudwatch permissions role for spoke-vpc-1 with vpc-flow-logs",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "SpokeVpc1VpcFlowLogsCloudwatchTrust",
            Effect: "Allow",
            Principal: {
              Service: "vpc-flow-logs.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["spoke-vpc-1-cw-access-policy-20220717111208786100000004"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({}) => ({
      RoleName: "spoke-vpc-2-cw-access-role-20220717111209913100000009",
      Description:
        "Cloudwatch permissions role for spoke-vpc-2 with vpc-flow-logs",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "SpokeVpc2VpcFlowLogsCloudwatchTrust",
            Effect: "Allow",
            Principal: {
              Service: "vpc-flow-logs.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      policies: ["spoke-vpc-2-cw-access-policy-20220717111208293100000003"],
    }),
  },
  {
    type: "Role",
    group: "IAM",
    properties: ({ config }) => ({
      RoleName: "vpc-flowlog-role-hubspoke-shared-services",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "1",
            Effect: "Allow",
            Principal: {
              Service: "vpc-flow-logs.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Version: "2012-10-17",
            Statement: [
              {
                Sid: "2",
                Effect: "Allow",
                Action: [
                  "logs:PutLogEvents",
                  "logs:DescribeLogStreams",
                  "logs:DescribeLogGroup",
                  "logs:CreateLogStream",
                  "logs:CreateLogGroup",
                ],
                Resource: `arn:aws:logs:${
                  config.region
                }:${config.accountId()}:*`,
              },
            ],
          },
          PolicyName: "vpc-flowlog-role-policy-hubspoke-shared-services",
        },
      ],
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName:
        "shared-services-vpc-cw-access-policy-20220717111207838000000002",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "SharedServicesVpcLogsToCW",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description:
        "Cloudwatch permissions policy for shared-services-vpc with vpc-flow-logs",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "spoke-vpc-1-cw-access-policy-20220717111208786100000004",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "SpokeVpc1LogsToCW",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description:
        "Cloudwatch permissions policy for spoke-vpc-1 with vpc-flow-logs",
    }),
  },
  {
    type: "Policy",
    group: "IAM",
    properties: ({}) => ({
      PolicyName: "spoke-vpc-2-cw-access-policy-20220717111208293100000003",
      PolicyDocument: {
        Statement: [
          {
            Action: [
              "logs:PutLogEvents",
              "logs:DescribeLogStreams",
              "logs:DescribeLogGroups",
              "logs:CreateLogStream",
              "logs:CreateLogGroup",
            ],
            Effect: "Allow",
            Resource: "*",
            Sid: "SpokeVpc2LogsToCW",
          },
        ],
        Version: "2012-10-17",
      },
      Path: "/",
      Description:
        "Cloudwatch permissions policy for spoke-vpc-2 with vpc-flow-logs",
    }),
  },
  {
    type: "InstanceProfile",
    group: "IAM",
    name: "ec2_instance_profile_hubspoke-shared-services",
    dependencies: ({}) => ({
      roles: ["ec2_ssm_role_hubspoke-shared-services"],
    }),
  },
  {
    type: "Key",
    group: "KMS",
    name: "kms-key-hubspoke-shared-services",
    properties: ({ config }) => ({
      Description: "KMS Logs Key",
      Policy: {
        Version: "2012-10-17",
        Statement: [
          {
            Sid: "Enable IAM User Permissions",
            Effect: "Allow",
            Principal: {
              AWS: `arn:aws:iam::${config.accountId()}:root`,
            },
            Action: "kms:*",
            Resource: `arn:aws:kms:${config.region}:${config.accountId()}:*`,
          },
          {
            Sid: "Enable KMS to be used by CloudWatch Logs",
            Effect: "Allow",
            Principal: {
              Service: `logs.${config.region}.amazonaws.com`,
            },
            Action: [
              "kms:ReEncrypt*",
              "kms:GenerateDataKey*",
              "kms:Encrypt*",
              "kms:Describe*",
              "kms:Decrypt*",
            ],
            Resource: `arn:aws:kms:${config.region}:${config.accountId()}:*`,
            Condition: {
              ArnLike: {
                "kms:EncryptionContext:aws:logs:arn": `arn:aws:logs:${
                  config.region
                }:${config.accountId()}:*`,
              },
            },
          },
        ],
      },
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ec2messages.${config.region}.amazonaws.com.`,
      HostedZoneConfig: {
        Comment: "Managed by Terraform",
      },
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `s3.${config.region}.amazonaws.com.`,
      HostedZoneConfig: {
        Comment: "Managed by Terraform",
      },
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ssm.${config.region}.amazonaws.com.`,
      HostedZoneConfig: {
        Comment: "Managed by Terraform",
      },
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "HostedZone",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ssmmessages.${config.region}.amazonaws.com.`,
      HostedZoneConfig: {
        Comment: "Managed by Terraform",
      },
    }),
    dependencies: ({}) => ({
      vpc: "shared-services-vpc",
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `*.s3.${config.region}.amazonaws.com.`,
      Type: "A",
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `s3.${config.region}.amazonaws.com.`,
      vpcEndpoint: `shared-services-vpc::com.amazonaws.${config.region}.s3`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ec2messages.${config.region}.amazonaws.com.`,
      Type: "A",
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ec2messages.${config.region}.amazonaws.com.`,
      vpcEndpoint: `shared-services-vpc::com.amazonaws.${config.region}.ec2messages`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `s3.${config.region}.amazonaws.com.`,
      Type: "A",
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `s3.${config.region}.amazonaws.com.`,
      vpcEndpoint: `shared-services-vpc::com.amazonaws.${config.region}.s3`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ssm.${config.region}.amazonaws.com.`,
      Type: "A",
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ssm.${config.region}.amazonaws.com.`,
      vpcEndpoint: `shared-services-vpc::com.amazonaws.${config.region}.ssm`,
    }),
  },
  {
    type: "Record",
    group: "Route53",
    properties: ({ config }) => ({
      Name: `ssmmessages.${config.region}.amazonaws.com.`,
      Type: "A",
      AliasTarget: {
        EvaluateTargetHealth: true,
      },
    }),
    dependencies: ({ config }) => ({
      hostedZone: `ssmmessages.${config.region}.amazonaws.com.`,
      vpcEndpoint: `shared-services-vpc::com.amazonaws.${config.region}.ssmmessages`,
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ec2messages.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ec2messages.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `s3.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `s3.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ssm.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ssm.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ssmmessages.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-1",
    }),
  },
  {
    type: "ZoneVpcAssociation",
    group: "Route53",
    dependencies: ({ config }) => ({
      hostedZone: `ssmmessages.${config.region}.amazonaws.com.`,
      vpc: "spoke-vpc-2",
    }),
  },
  {
    type: "Endpoint",
    group: "Route53Resolver",
    properties: ({ config, getId }) => ({
      Direction: "INBOUND",
      Name: "inbound-endpoint-hubspoke-shared-services",
      IpAddresses: [
        {
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `shared-services-vpc::private-${config.region}a`,
          })}`,
        },
        {
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `shared-services-vpc::private-${config.region}b`,
          })}`,
        },
      ],
    }),
    dependencies: ({ config }) => ({
      securityGroups: ["sg::shared-services-vpc::r53endpoint_inbound_sg"],
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "Endpoint",
    group: "Route53Resolver",
    properties: ({ config, getId }) => ({
      Direction: "OUTBOUND",
      Name: "outbound-endpoint-hubspoke-shared-services",
      IpAddresses: [
        {
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `shared-services-vpc::private-${config.region}a`,
          })}`,
        },
        {
          SubnetId: `${getId({
            type: "Subnet",
            group: "EC2",
            name: `shared-services-vpc::private-${config.region}b`,
          })}`,
        },
      ],
    }),
    dependencies: ({ config }) => ({
      securityGroups: ["sg::shared-services-vpc::r53endpoint_outbound_sg"],
      subnets: [
        `shared-services-vpc::private-${config.region}a`,
        `shared-services-vpc::private-${config.region}b`,
      ],
    }),
  },
  {
    type: "Rule",
    group: "Route53Resolver",
    properties: ({}) => ({
      DomainName: "example.com.",
      Name: "example-domain-hubspoke-shared-services",
      RuleType: "FORWARD",
      TargetIps: [
        {
          Ip: "1.1.1.1",
          Port: 53,
        },
        {
          Ip: "2.2.2.2",
          Port: 53,
        },
      ],
    }),
    dependencies: ({}) => ({
      resolverEndpoint: "outbound-endpoint-hubspoke-shared-services",
    }),
  },
  {
    type: "Rule",
    group: "Route53Resolver",
    properties: ({}) => ({
      DomainName: "test.es.",
      Name: "test-domain-hubspoke-shared-services",
      RuleType: "FORWARD",
      TargetIps: [
        {
          Ip: "1.1.1.1",
          Port: 53,
        },
      ],
    }),
    dependencies: ({}) => ({
      resolverEndpoint: "outbound-endpoint-hubspoke-shared-services",
    }),
  },
];
