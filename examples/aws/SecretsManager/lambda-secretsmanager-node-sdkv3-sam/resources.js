// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "Role",
    group: "IAM",
    properties: ({ getId }) => ({
      RoleName: "sam-app-GetSecretFunctionRole-1D5PSH9882VC8",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
      Policies: [
        {
          PolicyDocument: {
            Statement: [
              {
                Action: ["secretsmanager:GetSecretValue"],
                Resource: `${getId({
                  type: "Secret",
                  group: "SecretsManager",
                  name: "mysecretsam",
                  path: "live.ARN",
                })}`,
                Effect: "Allow",
              },
            ],
          },
          PolicyName: "GetSecretFunctionRolePolicy0",
        },
      ],
      AttachedPolicies: [
        {
          PolicyArn: "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess",
          PolicyName: "AWSXrayWriteOnlyAccess",
        },
        {
          PolicyArn:
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          PolicyName: "AWSLambdaBasicExecutionRole",
        },
      ],
      Tags: [
        {
          Key: "Application",
          Value: "lambda-secretsmanager-node-sdkv3-sam",
        },
      ],
    }),
    dependencies: ({}) => ({
      secretsManagerSecrets: ["mysecretsam"],
    }),
  },
  {
    type: "Function",
    group: "Lambda",
    properties: ({}) => ({
      Configuration: {
        Description: "Lambda function to retrieve Secrets Manager secret",
        Environment: {
          Variables: {
            SECRET_NAME: "mysecretsam",
          },
        },
        FunctionName: "sam-app-GetSecretFunction-kteTLisAJ3QO",
        Handler: "app.handler",
        Runtime: "nodejs16.x",
        Timeout: 15,
        TracingConfig: {
          Mode: "Active",
        },
      },
      Tags: {
        Application: "lambda-secretsmanager-node-sdkv3-sam",
      },
    }),
    dependencies: ({}) => ({
      role: "sam-app-GetSecretFunctionRole-1D5PSH9882VC8",
    }),
  },
  {
    type: "Secret",
    group: "SecretsManager",
    properties: ({ generatePassword }) => ({
      Description: "Secret with dynamically generated secret password.",
      Name: "mysecretsam",
      SecretString: {
        SecretString: generatePassword({ length: 30 }),
      },
    }),
  },
];
