// Generated by 'gc gencode'
const {} = require("rubico");
const {} = require("rubico/x");

exports.createResources = () => [
  {
    type: "SshPublicKey",
    group: "Compute",
    properties: ({ config }) => ({
      name: "machine-az_key",
      location: config.location,
      properties: {
        publicKey:
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDOdhXNAXLP0jryCri57hCzIFENiVH+Ab5PPKhAvJU0QSTgo/SgN0hVatQcsGqH2lv17jo5R/ZcQbok63uTGbuTN1GQXnJFWQAD3ZAg69KQCttez+p5sJ2KC/AP8yNhmffMwBGI3O5e5YAVlLUUpw6/yKYkNKWRbr+bDFf/Y4Y5Ya48jhpcevLBaC+9lcKOFNOW0zBCdBmMn4m/oIBdzc34aah6bZy2H2V8IHOIY6AdxwD7aKgEGkmQfbyl5jKBQZPONgDyIPfJE7yV3XY94PKwAaCj3e1aDZv3drVtKMfKLIS6pRUdGmiQWZiXRoRAm3mwmYmJoIBoymdpy5UaJ0OHhnattlVKjTJADOVPMNqWUtHWoZ4w0/VU6fPqdyst9q+N+EFgRM7BS27Bju6OlhRnhleKqK9PGN5UMvFO3HRVSXP9IZT64yJVNSWGze6O/zBw8Oov5etKKYt1NVvGK3dqchJNuWVjEvKWHaEcje0lLQqdjosMy7Izj1har6luXQk= generated-by-azure",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
    }),
  },
  {
    type: "VirtualMachine",
    group: "Compute",
    properties: ({ getId }) => ({
      name: "machine-az",
      properties: {
        hardwareProfile: {
          vmSize: "Standard_B1ls",
        },
        osProfile: {
          computerName: "machine-az",
          adminUsername: "azureuser",
          linuxConfiguration: {
            disablePasswordAuthentication: true,
            ssh: {
              publicKeys: [
                {
                  path: "/home/azureuser/.ssh/authorized_keys",
                  keyData: `${getId({
                    type: "SshPublicKey",
                    group: "Compute",
                    name: "rg-hybrid::machine-az_key",
                    path: "live.properties.publicKey",
                  })}`,
                },
              ],
            },
            enableVMAgentPlatformUpdates: false,
          },
          adminPassword: process.env.RG_HYBRID_MACHINE_AZ_ADMIN_PASSWORD,
        },
        storageProfile: {
          imageReference: {
            publisher: "canonical",
            offer: "0001-com-ubuntu-server-focal",
            sku: "20_04-lts-gen2",
            version: "latest",
          },
          osDisk: {
            osType: "Linux",
            name: "machine-az_OsDisk_1_e521256f15014b0c848b009f46a990de",
            createOption: "FromImage",
            caching: "ReadWrite",
            managedDisk: {
              storageAccountType: "Premium_LRS",
            },
            deleteOption: "Delete",
            diskSizeGB: 30,
          },
        },
        diagnosticsProfile: {
          bootDiagnostics: {
            enabled: true,
          },
        },
        networkProfile: {
          networkInterfaces: [
            {
              id: getId({
                type: "NetworkInterface",
                group: "Network",
                name: "rg-hybrid::machine-az443",
              }),
              properties: {
                deleteOption: "Detach",
              },
            },
          ],
        },
      },
      identity: {
        type: "SystemAssigned",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      sshPublicKeys: ["rg-hybrid::machine-az_key"],
      networkInterfaces: ["rg-hybrid::machine-az443"],
    }),
  },
  {
    type: "VirtualMachineExtension",
    group: "Compute",
    properties: ({ config }) => ({
      name: "AADSSHLoginForLinux",
      location: config.location,
      properties: {
        publisher: "Microsoft.Azure.ActiveDirectory",
        type: "AADSSHLoginForLinux",
        typeHandlerVersion: "1.0",
        autoUpgradeMinorVersion: true,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      vm: "rg-hybrid::machine-az",
    }),
  },
  {
    type: "LocalNetworkGateway",
    group: "Network",
    properties: ({ config, getId }) => ({
      name: "lgn",
      location: config.location,
      properties: {
        localNetworkAddressSpace: {
          addressPrefixes: ["192.168.0.0/16"],
        },
        gatewayIpAddress: `${getId({
          type: "Address",
          group: "compute",
          name: "ip-vpn",
          path: "live.address",
        })}`,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      gatewayIpAddressGoogle: { name: "ip-vpn", provider: "google" },
    }),
  },
  {
    type: "NetworkInterface",
    group: "Network",
    properties: ({ config, getId }) => ({
      name: "machine-az443",
      location: config.location,
      properties: {
        ipConfigurations: [
          {
            properties: {
              subnet: {
                id: `${getId({
                  type: "Subnet",
                  group: "Network",
                  name: "rg-hybrid::vnet::subnet",
                })}`,
              },
            },
            name: "ipconfig1",
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      networkSecurityGroup: "rg-hybrid::machine-az-nsg",
      subnets: ["rg-hybrid::vnet::subnet"],
    }),
  },
  {
    type: "NetworkSecurityGroup",
    group: "Network",
    properties: ({}) => ({
      name: "machine-az-nsg",
      properties: {
        securityRules: [
          {
            name: "SSH",
            properties: {
              protocol: "TCP",
              sourcePortRange: "*",
              destinationPortRange: "22",
              sourceAddressPrefix: "*",
              destinationAddressPrefix: "*",
              access: "Allow",
              priority: 300,
              direction: "Inbound",
              sourcePortRanges: [],
              destinationPortRanges: [],
              sourceAddressPrefixes: [],
              destinationAddressPrefixes: [],
            },
          },
        ],
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
    }),
  },
  {
    type: "PublicIPAddress",
    group: "Network",
    properties: ({}) => ({
      name: "ip-vpn",
      sku: {
        name: "Standard",
      },
      properties: {
        publicIPAllocationMethod: "Static",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
    }),
  },
  {
    type: "Route",
    group: "Network",
    properties: ({}) => ({
      name: "route-gcp",
      properties: {
        addressPrefix: "192.168.0.0/24",
        nextHopType: "VirtualNetworkGateway",
        nextHopIpAddress: "",
        hasBgpOverride: false,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      routeTable: "rg-hybrid::rtb-gcp",
    }),
  },
  {
    type: "RouteTable",
    group: "Network",
    properties: ({ config }) => ({
      name: "rtb-gcp",
      location: config.location,
      properties: {
        disableBgpRoutePropagation: false,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
    }),
  },
  {
    type: "Subnet",
    group: "Network",
    properties: ({}) => ({
      name: "GatewaySubnet",
      properties: {
        addressPrefix: "172.16.2.0/27",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      virtualNetwork: "rg-hybrid::vnet",
    }),
  },
  {
    type: "Subnet",
    group: "Network",
    properties: ({}) => ({
      name: "subnet",
      properties: {
        addressPrefix: "172.16.1.0/24",
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      routeTable: "rg-hybrid::rtb-gcp",
      virtualNetwork: "rg-hybrid::vnet",
    }),
  },
  {
    type: "VirtualNetwork",
    group: "Network",
    properties: ({}) => ({
      name: "vnet",
      properties: {
        addressSpace: {
          addressPrefixes: ["172.16.0.0/16"],
        },
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
    }),
  },
  {
    type: "VirtualNetworkGateway",
    group: "Network",
    properties: ({ config, getId }) => ({
      name: "vng",
      location: config.location,
      properties: {
        ipConfigurations: [
          {
            properties: {
              privateIPAllocationMethod: "Dynamic",
              subnet: {
                id: `${getId({
                  type: "Subnet",
                  group: "Network",
                  name: "rg-hybrid::vnet::GatewaySubnet",
                })}`,
              },
              publicIPAddress: {
                id: `${getId({
                  type: "PublicIPAddress",
                  group: "Network",
                  name: "rg-hybrid::ip-vpn",
                })}`,
              },
            },
            name: "default",
          },
        ],
        gatewayType: "Vpn",
        vpnType: "RouteBased",
        vpnGatewayGeneration: "Generation1",
        enableBgp: false,
        enablePrivateIpAddress: false,
        activeActive: false,
        disableIPSecReplayProtection: false,
        sku: {
          name: "VpnGw1",
          tier: "VpnGw1",
        },
        vpnClientConfiguration: {
          vpnClientProtocols: ["OpenVPN", "IkeV2"],
          vpnAuthenticationTypes: [],
        },
        bgpSettings: {
          asn: 65515,
          bgpPeeringAddress: "172.16.2.30",
          peerWeight: 0,
        },
        enableBgpRouteTranslationForNat: false,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      subnets: ["rg-hybrid::vnet::GatewaySubnet"],
      publicIpAddresses: ["rg-hybrid::ip-vpn"],
    }),
  },
  {
    type: "VirtualNetworkGatewayConnection",
    group: "Network",
    properties: ({ config }) => ({
      name: "vngconn1",
      location: config.location,
      properties: {
        connectionType: "IPsec",
        connectionProtocol: "IKEv2",
        routingWeight: 0,
        dpdTimeoutSeconds: 0,
        connectionMode: "Default",
        enableBgp: false,
        useLocalAzureIpAddress: false,
        usePolicyBasedTrafficSelectors: false,
        expressRouteGatewayBypass: false,
      },
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      localNetworkGateway: "rg-hybrid::lgn",
      virtualNetworkGateway: "rg-hybrid::vng",
    }),
  },
  {
    type: "VirtualNetworkGatewayConnectionSharedKey",
    group: "Network",
    properties: ({}) => ({
      value: process.env.RG_HYBRID_VNGCONN1_SHAREDSECRET,
    }),
    dependencies: ({}) => ({
      resourceGroup: "rg-hybrid",
      virtualNetworkGatewayConnection: "rg-hybrid::vngconn1",
    }),
  },
  {
    type: "ResourceGroup",
    group: "Resources",
    properties: ({}) => ({
      name: "rg-hybrid",
    }),
  },
];
