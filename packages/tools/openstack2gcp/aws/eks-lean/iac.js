// Generated by aws2gc
const { set, pipe } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = async ({ provider }) => {
  const { config } = provider;

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEc2ContainerRegistryReadOnly.name,
    namespace: "EKS",
    properties: () =>
      config.iam.Policy.amazonEc2ContainerRegistryReadOnly.properties,
  });

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksCniPolicy.name,
    namespace: "EKS",
    properties: () => config.iam.Policy.amazonEksCniPolicy.properties,
  });

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksClusterPolicy.name,
    namespace: "EKS",
    properties: () => config.iam.Policy.amazonEksClusterPolicy.properties,
  });

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksvpcResourceController.name,
    namespace: "EKS",
    properties: () =>
      config.iam.Policy.amazonEksvpcResourceController.properties,
  });

  provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksWorkerNodePolicy.name,
    namespace: "EKS",
    properties: () => config.iam.Policy.amazonEksWorkerNodePolicy.properties,
  });

  provider.iam.makeRole({
    name: config.iam.Role.roleCluster.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      policies: [
        resources.iam.Policy.amazonEksClusterPolicy,
        resources.iam.Policy.amazonEksvpcResourceController,
      ],
    }),
    properties: () => config.iam.Role.roleCluster.properties,
  });

  provider.iam.makeRole({
    name: config.iam.Role.roleNodeGroup.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      policies: [
        resources.iam.Policy.amazonEksWorkerNodePolicy,
        resources.iam.Policy.amazonEc2ContainerRegistryReadOnly,
        resources.iam.Policy.amazonEksCniPolicy,
      ],
    }),
    properties: () => config.iam.Role.roleNodeGroup.properties,
  });

  provider.iam.useInstanceProfile({
    name: config.iam.InstanceProfile.eks_5abd6ec8_6bfaB582_9a57_975f586ae231
      .name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      roles: [resources.iam.Role.roleNodeGroup],
    }),
  });

  provider.ec2.makeVpc({
    name: config.ec2.Vpc.vpc.name,
    namespace: "VPC",
    properties: () => config.ec2.Vpc.vpc.properties,
  });

  provider.ec2.useDefaultVpc({
    name: config.ec2.Vpc.vpcDefault.name,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPrivateA.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPrivateB.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPublicA.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.Subnet.subnetPublicB.properties,
  });

  provider.ec2.makeKeyPair({
    name: config.ec2.KeyPair.kpTestEc2.name,
    properties: () => config.ec2.KeyPair.kpTestEc2.properties,
  });

  provider.ec2.useVolume({
    name: config.ec2.Volume.kubernetesPvDbPostgres_0.name,
    namespace: "EKS",
    properties: () => config.ec2.Volume.kubernetesPvDbPostgres_0.properties,
  });

  provider.ec2.useVolume({
    name: config.ec2.Volume.vol_0d2d3221a5fdb6745.name,
    namespace: "EKS",
    properties: () => config.ec2.Volume.vol_0d2d3221a5fdb6745.properties,
  });

  provider.ec2.makeElasticIpAddress({
    name: config.ec2.ElasticIpAddress.iep.name,
    namespace: "VPC",
  });

  provider.ec2.makeInternetGateway({
    name: config.ec2.InternetGateway.internetGateway.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeNatGateway({
    name: config.ec2.NatGateway.natGateway.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnetPublicA,
      eip: resources.ec2.ElasticIpAddress.iep,
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateA],
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateB],
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [
        resources.ec2.Subnet.subnetPublicA,
        resources.ec2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePrivateA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateA,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
    properties: () => config.ec2.Route.routePrivateA.properties,
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePrivateB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateB,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
    properties: () => config.ec2.Route.routePrivateB.properties,
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePublic,
      ig: resources.ec2.InternetGateway.internetGateway,
    }),
    properties: () => config.ec2.Route.routePublic.properties,
  });

  provider.ec2.useSecurityGroup({
    name: config.ec2.SecurityGroup.eksClusterSgCluster_872092154.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () =>
      config.ec2.SecurityGroup.eksClusterSgCluster_872092154.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupCluster.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.SecurityGroup.securityGroupCluster.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupLoadBalancer.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () =>
      config.ec2.SecurityGroup.securityGroupLoadBalancer.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupNode.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.ec2.SecurityGroup.securityGroupNode.properties,
  });

  provider.ec2.useDefaultSecurityGroup({
    name: config.ec2.SecurityGroup.sgDefaultVpc.name,
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.useDefaultSecurityGroup({
    name: config.ec2.SecurityGroup.sgDefaultVpcDefault.name,
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcDefault,
    }),
  });

  provider.ec2.useDefaultSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress
      .eksClusterSgCluster_872092154RuleIngressAllFromEksClusterSgCluster_872092154
      .name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.eksClusterSgCluster_872092154,
    }),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgClusterRuleIngressHttps.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgClusterRuleIngressHttps.properties,
  });

  provider.ec2.useDefaultSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress
      .sgDefaultVpcRuleIngressAllFromSgDefaultVpc.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.sgDefaultVpc,
    }),
  });

  provider.ec2.useDefaultSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgNodesRuleIngressAll.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupNode,
    }),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress
      .sgRuleIngresEksClusterFromLoadBalancer.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.eksClusterSgCluster_872092154,
      securityGroupFrom: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngresEksClusterFromLoadBalancer
        .properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleNodeGroupIngressCluster
      .name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupNode,
      securityGroupFrom: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleNodeGroupIngressCluster
        .properties,
  });

  provider.ec2.useDefaultSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress
      .eksClusterSgCluster_872092154RuleEgressAllV4.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.eksClusterSgCluster_872092154,
    }),
  });

  provider.ec2.useDefaultSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress.securityGroupClusterRuleEgressAllV4
      .name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.ec2.useDefaultSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress
      .securityGroupLoadBalancerRuleEgressAllV4.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
  });

  provider.ec2.useDefaultSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress.securityGroupNodeRuleEgressAllV4
      .name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupNode,
    }),
  });

  provider.ec2.makeSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress.sgClusterRuleEgress.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleEgress.sgClusterRuleEgress.properties,
  });

  provider.ec2.useDefaultSecurityGroupRuleEgress({
    name: config.ec2.SecurityGroupRuleEgress.sgDefaultVpcRuleEgressAllV4.name,
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.sgDefaultVpc,
    }),
  });

  provider.ec2.useInstance({
    name: config.ec2.Instance.nodeGroupPrivateClusterI_0745e3491469614b7.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnetPrivateA,
      iamInstanceProfile:
        resources.iam.InstanceProfile.eks_5abd6ec8_6bfaB582_9a57_975f586ae231,
      securityGroups: [
        resources.ec2.SecurityGroup.eksClusterSgCluster_872092154,
      ],
      volumes: [resources.ec2.Volume.kubernetesPvDbPostgres_0],
    }),
    properties: () =>
      config.ec2.Instance.nodeGroupPrivateClusterI_0745e3491469614b7.properties,
  });

  provider.acm.useCertificate({
    name: config.acm.Certificate.exampleModuleAwsCertificateGrucloudOrg.name,
    namespace: "Certificate",
    properties: () =>
      config.acm.Certificate.exampleModuleAwsCertificateGrucloudOrg.properties,
  });

  provider.acm.useCertificate({
    name: config.acm.Certificate.modAwsLoadBalancerGrucloudOrg.name,
    namespace: "Certificate",
    properties: () =>
      config.acm.Certificate.modAwsLoadBalancerGrucloudOrg.properties,
  });

  provider.acm.useCertificate({
    name: config.acm.Certificate.starhackitEksLbcGrucloudOrg.name,
    namespace: "Certificate",
    properties: () =>
      config.acm.Certificate.starhackitEksLbcGrucloudOrg.properties,
  });

  provider.acm.useCertificate({
    name: config.acm.Certificate.starhackitEksLeanGrucloudOrg.name,
    namespace: "Certificate",
    properties: () =>
      config.acm.Certificate.starhackitEksLeanGrucloudOrg.properties,
  });

  provider.autoscaling.useAutoScalingGroup({
    name: config.autoscaling.AutoScalingGroup
      .eks_5abd6ec8_6bfaB582_9a57_975f586ae231.name,
    namespace: "EKS",
    properties: () =>
      config.autoscaling.AutoScalingGroup
        .eks_5abd6ec8_6bfaB582_9a57_975f586ae231.properties,
  });

  provider.elb.makeLoadBalancer({
    name: config.elb.LoadBalancer.loadBalancer.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      subnets: [
        resources.ec2.Subnet.subnetPublicB,
        resources.ec2.Subnet.subnetPublicA,
      ],
      securityGroups: [resources.ec2.SecurityGroup.securityGroupLoadBalancer],
    }),
    properties: () => config.elb.LoadBalancer.loadBalancer.properties,
  });

  provider.elb.makeTargetGroup({
    name: config.elb.TargetGroup.targetGroupRest.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.elb.TargetGroup.targetGroupRest.properties,
  });

  provider.elb.makeTargetGroup({
    name: config.elb.TargetGroup.targetGroupWeb.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
    properties: () => config.elb.TargetGroup.targetGroupWeb.properties,
  });

  provider.elb.makeListener({
    name: config.elb.Listener.listenerHttp.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Listener.listenerHttp.properties,
  });

  provider.elb.makeListener({
    name: config.elb.Listener.listenerHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
      certificate: resources.acm.Certificate.starhackitEksLeanGrucloudOrg,
    }),
    properties: () => config.elb.Listener.listenerHttps.properties,
  });

  provider.elb.useDefaultRule({
    name: config.elb.Rule.ruleDefaultListenerHttp.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttp,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Rule.ruleDefaultListenerHttp.properties,
  });

  provider.elb.useDefaultRule({
    name: config.elb.Rule.ruleDefaultListenerHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttps,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Rule.ruleDefaultListenerHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleHttpRedirectHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttp,
    }),
    properties: () => config.elb.Rule.ruleHttpRedirectHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleRestHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttps,
      targetGroup: resources.elb.TargetGroup.targetGroupRest,
    }),
    properties: () => config.elb.Rule.ruleRestHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleWebHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttps,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Rule.ruleWebHttps.properties,
  });

  provider.eks.makeCluster({
    name: config.eks.Cluster.cluster.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      subnets: [
        resources.ec2.Subnet.subnetPublicA,
        resources.ec2.Subnet.subnetPublicB,
        resources.ec2.Subnet.subnetPrivateA,
        resources.ec2.Subnet.subnetPrivateB,
      ],
      securityGroups: [
        resources.ec2.SecurityGroup.securityGroupCluster,
        resources.ec2.SecurityGroup.securityGroupNode,
      ],
      role: resources.iam.Role.roleCluster,
    }),
    properties: () => config.eks.Cluster.cluster.properties,
  });

  provider.eks.makeNodeGroup({
    name: config.eks.NodeGroup.nodeGroupPrivateCluster.name,
    namespace: "EKS",
    dependencies: ({ resources }) => ({
      cluster: resources.eks.Cluster.cluster,
      subnets: [
        resources.ec2.Subnet.subnetPrivateA,
        resources.ec2.Subnet.subnetPrivateB,
      ],
      role: resources.iam.Role.roleNodeGroup,
    }),
    properties: () => config.eks.NodeGroup.nodeGroupPrivateCluster.properties,
  });

  provider.route53Domain.useDomain({
    name: config.route53Domain.Domain.grucloudOrg.name,
  });

  provider.route53.makeHostedZone({
    name: config.route53.HostedZone.starhackitEksLeanGrucloudOrg.name,
    properties: () =>
      config.route53.HostedZone.starhackitEksLeanGrucloudOrg.properties,
  });

  provider.route53.makeHostedZone({
    name: config.route53.HostedZone.testLoadBalancerGrucloudOrg.name,
    properties: () =>
      config.route53.HostedZone.testLoadBalancerGrucloudOrg.properties,
  });

  provider.route53.makeRecord({
    name: config.route53.Record
      .certificateValidationStarhackitEksLeanGrucloudOrg.name,
    namespace: "Certificate",
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.starhackitEksLeanGrucloudOrg,
      certificate: resources.acm.Certificate.starhackitEksLeanGrucloudOrg,
    }),
  });

  provider.route53.makeRecord({
    name: config.route53.Record
      .loadBalancerDnsRecordAliasStarhackitEksLeanGrucloudOrg.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.starhackitEksLeanGrucloudOrg,
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  const resources = await createResources({
    provider,
  });

  return {
    provider,
    resources,
  };
};
