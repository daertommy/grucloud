// Generated by aws2gc
const assert = require("assert");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = async ({ provider }) => {
  const { config } = provider;

  const vpcDefault = provider.ec2.useVpc({
    name: config.ec2.Vpc.vpcDefault.name,
    properties: () => config.ec2.Vpc.vpcDefault.properties,
  });

  const vpcEc2Example = provider.ec2.makeVpc({
    name: config.ec2.Vpc.vpcEc2Example.name,
    properties: () => config.ec2.Vpc.vpcEc2Example.properties,
  });

  const subnet = provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnet.name,
    dependencies: {
      vpc: vpcEc2Example,
    },
    properties: () => config.ec2.Subnet.subnet.properties,
  });

  const kp = provider.ec2.useKeyPair({
    name: config.ec2.KeyPair.kp.name,
  });

  const volume = provider.ec2.makeVolume({
    name: config.ec2.Volume.volume.name,
    properties: () => config.ec2.Volume.volume.properties,
  });

  const myip = provider.ec2.makeElasticIpAddress({
    name: config.ec2.ElasticIpAddress.myip.name,
  });

  const securityGroup = provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroup.name,
    dependencies: {
      vpc: vpcEc2Example,
    },
    properties: () => config.ec2.SecurityGroup.securityGroup.properties,
  });

  const sgDefaultVpcEc2Example = provider.ec2.useSecurityGroup({
    name: config.ec2.SecurityGroup.sgDefaultVpcEc2Example.name,
    dependencies: {
      vpc: vpcEc2Example,
    },
    properties: () =>
      config.ec2.SecurityGroup.sgDefaultVpcEc2Example.properties,
  });

  const sgDefaultVpcDefault = provider.ec2.useSecurityGroup({
    name: config.ec2.SecurityGroup.sgDefaultVpcDefault.name,
    dependencies: {
      vpc: vpcDefault,
    },
    properties: () => config.ec2.SecurityGroup.sgDefaultVpcDefault.properties,
  });

  const sgRuleIngressSsh = provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressSsh.name,
    dependencies: {
      securityGroup: securityGroup,
    },
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressSsh.properties,
  });

  const sgRuleIngressIcmp = provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressIcmp.name,
    dependencies: {
      securityGroup: securityGroup,
    },
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressIcmp.properties,
  });

  const ig = provider.ec2.makeInternetGateway({
    name: config.ec2.InternetGateway.ig.name,
    dependencies: {
      vpc: vpcEc2Example,
    },
  });

  const webServerEc2Vpc = provider.ec2.makeInstance({
    name: config.ec2.Instance.webServerEc2Vpc.name,
    dependencies: {
      subnet: subnet,
      keyPair: kp,
      eip: myip,
      securityGroups: [securityGroup],
      volumes: [volume],
    },
    properties: () => config.ec2.Instance.webServerEc2Vpc.properties,
  });

  return {
    vpcDefault,
    vpcEc2Example,
    subnet,
    kp,
    volume,
    myip,
    securityGroup,
    sgDefaultVpcEc2Example,
    sgDefaultVpcDefault,
    sgRuleIngressSsh,
    sgRuleIngressIcmp,
    ig,
    webServerEc2Vpc,
  };
};

exports.createResources = createResources;

exports.createStack = async () => {
  const provider = AwsProvider({ config: require("./config") });
  const resources = await createResources({
    provider,
  });

  return {
    provider,
    resources,
  };
};
