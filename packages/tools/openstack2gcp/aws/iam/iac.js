// Generated by aws2gc
const { set, pipe } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = async ({ provider }) => {
  const { config } = provider;
  return pipe([
    () => ({}),
    (resources) =>
      set(
        "ec2.KeyPair.kp",
        provider.ec2.useKeyPair({
          name: config.ec2.KeyPair.kp.name,
        })
      )(resources),
    (resources) =>
      set(
        "ec2.Instance.webIam",
        provider.ec2.makeInstance({
          name: config.ec2.Instance.webIam.name,
          dependencies: {
            keyPair: resources.ec2.KeyPair.kp,
          },
          properties: () => config.ec2.Instance.webIam.properties,
        })
      )(resources),
    (resources) =>
      set(
        "iam.Policy.myPolicyToUser",
        provider.iam.makePolicy({
          name: config.iam.Policy.myPolicyToUser.name,
          properties: () => config.iam.Policy.myPolicyToUser.properties,
        })
      )(resources),
    (resources) =>
      set(
        "iam.Policy.myPolicyToRole",
        provider.iam.makePolicy({
          name: config.iam.Policy.myPolicyToRole.name,
          properties: () => config.iam.Policy.myPolicyToRole.properties,
        })
      )(resources),
    (resources) =>
      set(
        "iam.Policy.myPolicyToGroup",
        provider.iam.makePolicy({
          name: config.iam.Policy.myPolicyToGroup.name,
          properties: () => config.iam.Policy.myPolicyToGroup.properties,
        })
      )(resources),
    (resources) =>
      set(
        "iam.Policy.amazonEksWorkerNodePolicy",
        provider.iam.usePolicy({
          name: config.iam.Policy.amazonEksWorkerNodePolicy.name,
          properties: () =>
            config.iam.Policy.amazonEksWorkerNodePolicy.properties,
        })
      )(resources),
    (resources) =>
      set(
        "iam.Role.roleAllowAssumeRole",
        provider.iam.makeRole({
          name: config.iam.Role.roleAllowAssumeRole.name,
          dependencies: {
            policies: [
              resources.iam.Policy.myPolicyToRole,
              resources.iam.Policy.amazonEksWorkerNodePolicy,
            ],
          },
          properties: () => config.iam.Role.roleAllowAssumeRole.properties,
        })
      )(resources),
  ])();
};

exports.createResources = createResources;

exports.createStack = async () => {
  const provider = AwsProvider({ config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
