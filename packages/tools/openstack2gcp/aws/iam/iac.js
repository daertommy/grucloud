// Generated by aws2gc
const assert = require("assert");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = async ({ provider }) => {
  const { config } = provider;

  const kp = provider.ec2.useKeyPair({
    name: config.ec2.KeyPair.kp.name,
  });

  const webIam = provider.ec2.makeInstance({
    name: config.ec2.Instance.webIam.name,
    dependencies: {
      keyPair: kp,
    },
    properties: () => config.ec2.Instance.webIam.properties,
  });

  const myPolicyToUser = provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToUser.name,
    properties: () => config.iam.Policy.myPolicyToUser.properties,
  });

  const myPolicyToRole = provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToRole.name,
    properties: () => config.iam.Policy.myPolicyToRole.properties,
  });

  const myPolicyToGroup = provider.iam.makePolicy({
    name: config.iam.Policy.myPolicyToGroup.name,
    properties: () => config.iam.Policy.myPolicyToGroup.properties,
  });

  const amazonEksWorkerNodePolicy = provider.iam.usePolicy({
    name: config.iam.Policy.amazonEksWorkerNodePolicy.name,
    properties: () => config.iam.Policy.amazonEksWorkerNodePolicy.properties,
  });

  const roleAllowAssumeRole = provider.iam.makeRole({
    name: config.iam.Role.roleAllowAssumeRole.name,
    dependencies: {
      policies: [myPolicyToRole, amazonEksWorkerNodePolicy],
    },
    properties: () => config.iam.Role.roleAllowAssumeRole.properties,
  });

  return {
    kp,
    webIam,
    myPolicyToUser,
    myPolicyToRole,
    myPolicyToGroup,
    amazonEksWorkerNodePolicy,
    roleAllowAssumeRole,
  };
};

exports.createResources = createResources;

exports.createStack = async () => {
  const provider = AwsProvider({ config: require("./config") });
  const resources = await createResources({
    provider,
  });

  return {
    provider,
    resources,
  };
};
