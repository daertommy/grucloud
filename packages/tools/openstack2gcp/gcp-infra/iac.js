// Generated by os2gcp
const { set, pipe } = require("rubico");
const { GoogleProvider } = require("@grucloud/provider-google");

const createResources = async ({ provider }) => {
  const { config } = provider;
  return pipe([
    () => ({}),
    (resources) =>
      set(
        "compute.Network.rhmig",
        provider.compute.makeNetwork({
          name: config.compute.Network.rhmig.name,
          properties: () => config.compute.Network.rhmig.properties,
        })
      )(resources),
    (resources) =>
      set(
        "compute.SubNetwork.subnet_10_0_0_0_16",
        provider.compute.makeSubNetwork({
          name: config.compute.SubNetwork.subnet_10_0_0_0_16.name,
          dependencies: {
            network: resources.compute.Network.rhmig,
          },
          properties: () =>
            config.compute.SubNetwork.subnet_10_0_0_0_16.properties,
        })
      )(resources),
    (resources) =>
      set(
        "compute.Disk.extraDisk",
        provider.compute.makeDisk({
          name: config.compute.Disk.extraDisk.name,
        })
      )(resources),
    (resources) =>
      set(
        "compute.VmInstance.s1_2Uk1",
        provider.compute.makeVmInstance({
          name: config.compute.VmInstance.s1_2Uk1.name,
          dependencies: {
            disks: [resources.compute.Disk.extraDisk],
            subNetwork: resources.compute.SubNetwork.subnet_10_0_0_0_16,
          },
          properties: () => config.compute.VmInstance.s1_2Uk1.properties,
        })
      )(resources),
  ])();
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(GoogleProvider, {
    config: require("./config"),
  });
  const resources = await createResources({
    provider,
  });

  return {
    provider,
    resources,
  };
};
