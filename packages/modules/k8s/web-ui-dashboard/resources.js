// Generated by k8s-manifest2code from web-ui-dashboard.yaml
const assert = require("assert");
exports.createResources = async ({ provider, resources }) => {
  const kubernetesDashboardNamespace = await provider.makeNamespace({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "v1",
      metadata: {},
    }),
  });

  const kubernetesDashboardServiceAccount = await provider.makeServiceAccount({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
    }),
  });

  const kubernetesDashboardService = await provider.makeService({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      spec: {
        ports: [
          {
            port: 443,
            targetPort: 8443,
          },
        ],
        selector: {
          "k8s-app": "kubernetes-dashboard",
        },
      },
    }),
  });

  const kubernetesDashboardCertsSecret = await provider.makeSecret({
    name: "kubernetes-dashboard-certs",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      type: "Opaque",
    }),
  });

  const kubernetesDashboardCsrfSecret = await provider.makeSecret({
    name: "kubernetes-dashboard-csrf",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      type: "Opaque",
      data: {
        csrf: "",
      },
    }),
  });

  const kubernetesDashboardKeyHolderSecret = await provider.makeSecret({
    name: "kubernetes-dashboard-key-holder",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      type: "Opaque",
    }),
  });

  const kubernetesDashboardSettingsConfigMap = await provider.makeConfigMap({
    name: "kubernetes-dashboard-settings",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
    }),
  });

  const kubernetesDashboardRole = await provider.makeRole({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "rbac.authorization.k8s.io/v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      rules: [
        {
          apiGroups: [""],
          resources: ["secrets"],
          resourceNames: [
            "kubernetes-dashboard-key-holder",
            "kubernetes-dashboard-certs",
            "kubernetes-dashboard-csrf",
          ],
          verbs: ["get", "update", "delete"],
        },
        {
          apiGroups: [""],
          resources: ["configmaps"],
          resourceNames: ["kubernetes-dashboard-settings"],
          verbs: ["get", "update"],
        },
        {
          apiGroups: [""],
          resources: ["services"],
          resourceNames: ["heapster", "dashboard-metrics-scraper"],
          verbs: ["proxy"],
        },
        {
          apiGroups: [""],
          resources: ["services/proxy"],
          resourceNames: [
            "heapster",
            "http:heapster:",
            "https:heapster:",
            "dashboard-metrics-scraper",
            "http:dashboard-metrics-scraper",
          ],
          verbs: ["get"],
        },
      ],
    }),
  });

  const kubernetesDashboardClusterRole = await provider.makeClusterRole({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "rbac.authorization.k8s.io/v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
      },
      rules: [
        {
          apiGroups: ["metrics.k8s.io"],
          resources: ["pods", "nodes"],
          verbs: ["get", "list", "watch"],
        },
      ],
    }),
  });

  const kubernetesDashboardRoleBinding = await provider.makeRoleBinding({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "rbac.authorization.k8s.io/v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      roleRef: {
        apiGroup: "rbac.authorization.k8s.io",
        kind: "Role",
        name: "kubernetes-dashboard",
      },
      subjects: [
        {
          kind: "ServiceAccount",
          name: "kubernetes-dashboard",
          namespace: "kubernetes-dashboard",
        },
      ],
    }),
  });

  const kubernetesDashboardClusterRoleBinding = await provider.makeClusterRoleBinding(
    {
      name: "kubernetes-dashboard",
      properties: () => ({
        apiVersion: "rbac.authorization.k8s.io/v1",
        metadata: {},
        roleRef: {
          apiGroup: "rbac.authorization.k8s.io",
          kind: "ClusterRole",
          name: "kubernetes-dashboard",
        },
        subjects: [
          {
            kind: "ServiceAccount",
            name: "kubernetes-dashboard",
            namespace: "kubernetes-dashboard",
          },
        ],
      }),
    }
  );

  const kubernetesDashboardDeployment = await provider.makeDeployment({
    name: "kubernetes-dashboard",
    properties: () => ({
      apiVersion: "apps/v1",
      metadata: {
        labels: {
          "k8s-app": "kubernetes-dashboard",
        },
        namespace: "kubernetes-dashboard",
      },
      spec: {
        replicas: 1,
        revisionHistoryLimit: 10,
        selector: {
          matchLabels: {
            "k8s-app": "kubernetes-dashboard",
          },
        },
        template: {
          metadata: {
            labels: {
              "k8s-app": "kubernetes-dashboard",
            },
          },
          spec: {
            containers: [
              {
                name: "kubernetes-dashboard",
                image: "kubernetesui/dashboard:v2.2.0",
                imagePullPolicy: "Always",
                ports: [
                  {
                    containerPort: 8443,
                    protocol: "TCP",
                  },
                ],
                args: [
                  "--auto-generate-certificates",
                  "--namespace=kubernetes-dashboard",
                ],
                volumeMounts: [
                  {
                    name: "kubernetes-dashboard-certs",
                    mountPath: "/certs",
                  },
                  {
                    mountPath: "/tmp",
                    name: "tmp-volume",
                  },
                ],
                livenessProbe: {
                  httpGet: {
                    scheme: "HTTPS",
                    path: "/",
                    port: 8443,
                  },
                  initialDelaySeconds: 30,
                  timeoutSeconds: 30,
                },
                securityContext: {
                  allowPrivilegeEscalation: false,
                  readOnlyRootFilesystem: true,
                  runAsUser: 1001,
                  runAsGroup: 2001,
                },
              },
            ],
            volumes: [
              {
                name: "kubernetes-dashboard-certs",
                secret: {
                  secretName: "kubernetes-dashboard-certs",
                },
              },
              {
                name: "tmp-volume",
                emptyDir: {},
              },
            ],
            serviceAccountName: "kubernetes-dashboard",
            nodeSelector: {
              "kubernetes.io/os": "linux",
            },
            tolerations: [
              {
                key: "node-role.kubernetes.io/master",
                effect: "NoSchedule",
              },
            ],
          },
        },
      },
    }),
  });

  const dashboardMetricsScraperService = await provider.makeService({
    name: "dashboard-metrics-scraper",
    properties: () => ({
      apiVersion: "v1",
      metadata: {
        labels: {
          "k8s-app": "dashboard-metrics-scraper",
        },
        namespace: "kubernetes-dashboard",
      },
      spec: {
        ports: [
          {
            port: 8000,
            targetPort: 8000,
          },
        ],
        selector: {
          "k8s-app": "dashboard-metrics-scraper",
        },
      },
    }),
  });

  const dashboardMetricsScraperDeployment = await provider.makeDeployment({
    name: "dashboard-metrics-scraper",
    properties: () => ({
      apiVersion: "apps/v1",
      metadata: {
        labels: {
          "k8s-app": "dashboard-metrics-scraper",
        },
        namespace: "kubernetes-dashboard",
      },
      spec: {
        replicas: 1,
        revisionHistoryLimit: 10,
        selector: {
          matchLabels: {
            "k8s-app": "dashboard-metrics-scraper",
          },
        },
        template: {
          metadata: {
            labels: {
              "k8s-app": "dashboard-metrics-scraper",
            },
            annotations: {
              "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
            },
          },
          spec: {
            containers: [
              {
                name: "dashboard-metrics-scraper",
                image: "kubernetesui/metrics-scraper:v1.0.6",
                ports: [
                  {
                    containerPort: 8000,
                    protocol: "TCP",
                  },
                ],
                livenessProbe: {
                  httpGet: {
                    scheme: "HTTP",
                    path: "/",
                    port: 8000,
                  },
                  initialDelaySeconds: 30,
                  timeoutSeconds: 30,
                },
                volumeMounts: [
                  {
                    mountPath: "/tmp",
                    name: "tmp-volume",
                  },
                ],
                securityContext: {
                  allowPrivilegeEscalation: false,
                  readOnlyRootFilesystem: true,
                  runAsUser: 1001,
                  runAsGroup: 2001,
                },
              },
            ],
            serviceAccountName: "kubernetes-dashboard",
            nodeSelector: {
              "kubernetes.io/os": "linux",
            },
            tolerations: [
              {
                key: "node-role.kubernetes.io/master",
                effect: "NoSchedule",
              },
            ],
            volumes: [
              {
                name: "tmp-volume",
                emptyDir: {},
              },
            ],
          },
        },
      },
    }),
  });

  return {
    kubernetesDashboardNamespace,
    kubernetesDashboardServiceAccount,
    kubernetesDashboardService,
    kubernetesDashboardCertsSecret,
    kubernetesDashboardCsrfSecret,
    kubernetesDashboardKeyHolderSecret,
    kubernetesDashboardSettingsConfigMap,
    kubernetesDashboardRole,
    kubernetesDashboardClusterRole,
    kubernetesDashboardRoleBinding,
    kubernetesDashboardClusterRoleBinding,
    kubernetesDashboardDeployment,
    dashboardMetricsScraperService,
    dashboardMetricsScraperDeployment,
  };
};
