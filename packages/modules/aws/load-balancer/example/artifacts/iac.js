// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: "vpc-module-load-balancer",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/16",
      DnsSupport: true,
      DnsHostnames: true,
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: "eu-west-2a",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: "eu-west-2b",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-public",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: "route-public",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePublic,
      ig: resources.EC2.InternetGateway.internetGateway,
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "security-group-load-balancer",
    properties: ({ config }) => ({
      Description: "Managed By GruCloud",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "sg-rule-ingress-lb-http",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 80,
        ToPort: 80,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        Ipv6Ranges: [
          {
            CidrIpv6: "::/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupLoadBalancer,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "sg-rule-ingress-lb-https",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 443,
        ToPort: 443,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        Ipv6Ranges: [
          {
            CidrIpv6: "::/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupLoadBalancer,
    }),
  });

  provider.ELBv2.makeLoadBalancer({
    name: "load-balancer",
    properties: ({ config }) => ({
      Scheme: "internet-facing",
      Type: "application",
      IpAddressType: "ipv4",
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
      securityGroups: [resources.EC2.SecurityGroup.securityGroupLoadBalancer],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-rest",
    properties: ({ config }) => ({
      Protocol: "HTTP",
      Port: 30020,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/api/v1/version",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: "target-group-web",
    properties: ({ config }) => ({
      Protocol: "HTTP",
      Port: 30010,
      HealthCheckProtocol: "HTTP",
      HealthCheckPort: "traffic-port",
      HealthCheckEnabled: true,
      HealthCheckIntervalSeconds: 30,
      HealthCheckTimeoutSeconds: 5,
      HealthyThresholdCount: 5,
      HealthCheckPath: "/",
      Matcher: {
        HttpCode: "200",
      },
      TargetType: "instance",
      ProtocolVersion: "HTTP1",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.ELBv2.makeListener({
    name: "listener-http",
    properties: ({ config }) => ({
      Port: 80,
      Protocol: "HTTP",
    }),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
    }),
  });

  provider.ELBv2.makeListener({
    name: "listener-https",
    properties: ({ config }) => ({
      Port: 443,
      Protocol: "HTTPS",
    }),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
      certificate: resources.ACM.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
  });

  provider.ELBv2.makeRule({
    name: "rule-http-redirect-https",
    properties: ({ config }) => ({
      Priority: "1",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/*"],
        },
      ],
      Actions: [
        {
          Type: "redirect",
          Order: 1,
          RedirectConfig: {
            Protocol: "HTTPS",
            Port: "443",
            Host: "#{host}",
            Path: "/#{path}",
            Query: "#{query}",
            StatusCode: "HTTP_301",
          },
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttp,
    }),
  });

  provider.ELBv2.makeRule({
    name: "rule-rest-https",
    properties: ({ config }) => ({
      Priority: "10",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/api/*"],
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttps,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupRest,
    }),
  });

  provider.ELBv2.makeRule({
    name: "rule-web-https",
    properties: ({ config }) => ({
      Priority: "11",
      Conditions: [
        {
          Field: "path-pattern",
          Values: ["/*"],
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttps,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
    }),
  });

  provider.Route53.makeHostedZone({
    name: "mod-aws-load-balancer.grucloud.org.",
    dependencies: ({ resources }) => ({
      domain: resources.Route53Domains.Domain.grucloudOrg,
    }),
  });

  provider.Route53.makeRecord({
    name: "certificate-validation-mod-aws-load-balancer.grucloud.org.",
    dependencies: ({ resources }) => ({
      hostedZone: resources.Route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      certificate: resources.ACM.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
  });

  provider.Route53.makeRecord({
    name: "load-balancer-dns-record-alias-mod-aws-load-balancer.grucloud.org.",
    dependencies: ({ resources }) => ({
      hostedZone: resources.Route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
    }),
  });

  provider.Route53Domains.useDomain({
    name: "grucloud.org",
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
