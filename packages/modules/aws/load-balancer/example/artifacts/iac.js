// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  const { config } = provider;

  provider.ec2.makeVpc({
    name: config.ec2.Vpc.vpcModuleLoadBalancer.name,
    namespace: "VPC",
    properties: () => config.ec2.Vpc.vpcModuleLoadBalancer.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicA.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
    properties: () => config.ec2.Subnet.subnetPublicA.properties,
  });

  provider.ec2.makeSubnet({
    name: config.ec2.Subnet.subnetPublicB.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
    properties: () => config.ec2.Subnet.subnetPublicB.properties,
  });

  provider.ec2.makeInternetGateway({
    name: config.ec2.InternetGateway.internetGateway.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.ec2.makeRouteTable({
    name: config.ec2.RouteTable.routeTablePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
      subnets: [
        resources.ec2.Subnet.subnetPublicA,
        resources.ec2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.ec2.makeRoute({
    name: config.ec2.Route.routePublic.name,
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePublic,
      ig: resources.ec2.InternetGateway.internetGateway,
    }),
    properties: () => config.ec2.Route.routePublic.properties,
  });

  provider.ec2.makeSecurityGroup({
    name: config.ec2.SecurityGroup.securityGroupLoadBalancer.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroup.securityGroupLoadBalancer.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.properties,
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupLoadBalancer,
    }),
    properties: () =>
      config.ec2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.properties,
  });

  provider.acm.makeCertificate({
    name: config.acm.Certificate.modAwsLoadBalancerGrucloudOrg.name,
    namespace: "Certificate",
    properties: () =>
      config.acm.Certificate.modAwsLoadBalancerGrucloudOrg.properties,
  });

  provider.elb.makeLoadBalancer({
    name: config.elb.LoadBalancer.loadBalancer.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      subnets: [
        resources.ec2.Subnet.subnetPublicB,
        resources.ec2.Subnet.subnetPublicA,
      ],
      securityGroups: [resources.ec2.SecurityGroup.securityGroupLoadBalancer],
    }),
    properties: () => config.elb.LoadBalancer.loadBalancer.properties,
  });

  provider.elb.makeTargetGroup({
    name: config.elb.TargetGroup.targetGroupRest.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
    properties: () => config.elb.TargetGroup.targetGroupRest.properties,
  });

  provider.elb.makeTargetGroup({
    name: config.elb.TargetGroup.targetGroupWeb.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpcModuleLoadBalancer,
    }),
    properties: () => config.elb.TargetGroup.targetGroupWeb.properties,
  });

  provider.elb.makeListener({
    name: config.elb.Listener.listenerHttp.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Listener.listenerHttp.properties,
  });

  provider.elb.makeListener({
    name: config.elb.Listener.listenerHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
      certificate: resources.acm.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
    properties: () => config.elb.Listener.listenerHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleHttpRedirectHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttp,
    }),
    properties: () => config.elb.Rule.ruleHttpRedirectHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleRestHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttps,
      targetGroup: resources.elb.TargetGroup.targetGroupRest,
    }),
    properties: () => config.elb.Rule.ruleRestHttps.properties,
  });

  provider.elb.makeRule({
    name: config.elb.Rule.ruleWebHttps.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      listener: resources.elb.Listener.listenerHttps,
      targetGroup: resources.elb.TargetGroup.targetGroupWeb,
    }),
    properties: () => config.elb.Rule.ruleWebHttps.properties,
  });

  provider.route53Domain.useDomain({
    name: config.route53Domain.Domain.grucloudOrg.name,
  });

  provider.route53.makeHostedZone({
    name: config.route53.HostedZone.modAwsLoadBalancerGrucloudOrg.name,
    dependencies: ({ resources }) => ({
      domain: resources.route53Domain.Domain.grucloudOrg,
    }),
  });

  provider.route53.makeRecord({
    name: config.route53.Record
      .certificateValidationModAwsLoadBalancerGrucloudOrg.name,
    namespace: "Certificate",
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      certificate: resources.acm.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
  });

  provider.route53.makeRecord({
    name: config.route53.Record
      .loadBalancerDnsRecordAliasModAwsLoadBalancerGrucloudOrg.name,
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      hostedZone: resources.route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      loadBalancer: resources.elb.LoadBalancer.loadBalancer,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
