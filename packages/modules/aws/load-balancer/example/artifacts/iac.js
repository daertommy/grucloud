// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: get("config.EC2.Vpc.vpcModuleLoadBalancer.name"),
    namespace: "VPC",
    properties: get("config.EC2.Vpc.vpcModuleLoadBalancer.properties"),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.subnetPublicA.name"),
    namespace: "VPC",
    properties: get("config.EC2.Subnet.subnetPublicA.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeSubnet({
    name: get("config.EC2.Subnet.subnetPublicB.name"),
    namespace: "VPC",
    properties: get("config.EC2.Subnet.subnetPublicB.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeInternetGateway({
    name: get("config.EC2.InternetGateway.internetGateway.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeRouteTable({
    name: get("config.EC2.RouteTable.routeTablePublic.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: get("config.EC2.Route.routePublic.name"),
    namespace: "VPC",
    properties: get("config.EC2.Route.routePublic.properties"),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePublic,
      ig: resources.EC2.InternetGateway.internetGateway,
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: get("config.EC2.SecurityGroup.securityGroupLoadBalancer.name"),
    namespace: "LoadBalancer",
    properties: get(
      "config.EC2.SecurityGroup.securityGroupLoadBalancer.properties"
    ),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: get("config.EC2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.name"),
    namespace: "LoadBalancer",
    properties: get(
      "config.EC2.SecurityGroupRuleIngress.sgRuleIngressLbHttp.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupLoadBalancer,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: get("config.EC2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.name"),
    namespace: "LoadBalancer",
    properties: get(
      "config.EC2.SecurityGroupRuleIngress.sgRuleIngressLbHttps.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupLoadBalancer,
    }),
  });

  provider.ACM.makeCertificate({
    name: get("config.ACM.Certificate.modAwsLoadBalancerGrucloudOrg.name"),
    namespace: "Certificate",
    properties: get(
      "config.ACM.Certificate.modAwsLoadBalancerGrucloudOrg.properties"
    ),
  });

  provider.ELBv2.makeLoadBalancer({
    name: get("config.ELBv2.LoadBalancer.loadBalancer.name"),
    namespace: "LoadBalancer",
    properties: get("config.ELBv2.LoadBalancer.loadBalancer.properties"),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
      securityGroups: [resources.EC2.SecurityGroup.securityGroupLoadBalancer],
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: get("config.ELBv2.TargetGroup.targetGroupRest.name"),
    namespace: "LoadBalancer",
    properties: get("config.ELBv2.TargetGroup.targetGroupRest.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.ELBv2.makeTargetGroup({
    name: get("config.ELBv2.TargetGroup.targetGroupWeb.name"),
    namespace: "LoadBalancer",
    properties: get("config.ELBv2.TargetGroup.targetGroupWeb.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpcModuleLoadBalancer,
    }),
  });

  provider.ELBv2.makeListener({
    name: get("config.ELBv2.Listener.listenerHttp.name"),
    namespace: "LoadBalancer",
    properties: get("config.ELBv2.Listener.listenerHttp.properties"),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
    }),
  });

  provider.ELBv2.makeListener({
    name: get("config.ELBv2.Listener.listenerHttps.name"),
    namespace: "LoadBalancer",
    properties: get("config.ELBv2.Listener.listenerHttps.properties"),
    dependencies: ({ resources }) => ({
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
      certificate: resources.ACM.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
  });

  provider.ELBv2.makeRule({
    name: get("config.ELBv2.Rule.ruleHttpRedirectHttps.name"),
    namespace: "LoadBalancer",
    properties: () => config.ELBv2.Rule.ruleHttpRedirectHttps.properties,
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttp,
    }),
  });

  provider.ELBv2.makeRule({
    name: get("config.ELBv2.Rule.ruleRestHttps.name"),
    namespace: "LoadBalancer",
    properties: () => config.ELBv2.Rule.ruleRestHttps.properties,
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttps,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupRest,
    }),
  });

  provider.ELBv2.makeRule({
    name: get("config.ELBv2.Rule.ruleWebHttps.name"),
    namespace: "LoadBalancer",
    properties: () => config.ELBv2.Rule.ruleWebHttps.properties,
    dependencies: ({ resources }) => ({
      listener: resources.ELBv2.Listener.listenerHttps,
      targetGroup: resources.ELBv2.TargetGroup.targetGroupWeb,
    }),
  });

  provider.Route53Domains.useDomain({
    name: get("config.Route53Domains.Domain.grucloudOrg.name"),
  });

  provider.Route53.makeHostedZone({
    name: get("config.Route53.HostedZone.modAwsLoadBalancerGrucloudOrg.name"),
    dependencies: ({ resources }) => ({
      domain: resources.Route53Domains.Domain.grucloudOrg,
    }),
  });

  provider.Route53.makeRecord({
    name: get(
      "config.Route53.Record.certificateValidationModAwsLoadBalancerGrucloudOrg.name"
    ),
    namespace: "Certificate",
    dependencies: ({ resources }) => ({
      hostedZone: resources.Route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      certificate: resources.ACM.Certificate.modAwsLoadBalancerGrucloudOrg,
    }),
  });

  provider.Route53.makeRecord({
    name: get(
      "config.Route53.Record.loadBalancerDnsRecordAliasModAwsLoadBalancerGrucloudOrg.name"
    ),
    namespace: "LoadBalancer",
    dependencies: ({ resources }) => ({
      hostedZone: resources.Route53.HostedZone.modAwsLoadBalancerGrucloudOrg,
      loadBalancer: resources.ELBv2.LoadBalancer.loadBalancer,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
