// Generated by aws2gc
const { get } = require("rubico");
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.iam.usePolicy({
    name: get("config.iam.Policy.amazonEc2ContainerRegistryReadOnly.name"),
    namespace: "EKS",
    properties: get(
      "config.iam.Policy.amazonEc2ContainerRegistryReadOnly.properties"
    ),
  });

  provider.iam.usePolicy({
    name: get("config.iam.Policy.amazonEksCniPolicy.name"),
    namespace: "EKS",
    properties: get("config.iam.Policy.amazonEksCniPolicy.properties"),
  });

  provider.iam.usePolicy({
    name: get("config.iam.Policy.amazonEksClusterPolicy.name"),
    namespace: "EKS",
    properties: get("config.iam.Policy.amazonEksClusterPolicy.properties"),
  });

  provider.iam.usePolicy({
    name: get("config.iam.Policy.amazonEksvpcResourceController.name"),
    namespace: "EKS",
    properties: get(
      "config.iam.Policy.amazonEksvpcResourceController.properties"
    ),
  });

  provider.iam.usePolicy({
    name: get("config.iam.Policy.amazonEksWorkerNodePolicy.name"),
    namespace: "EKS",
    properties: get("config.iam.Policy.amazonEksWorkerNodePolicy.properties"),
  });

  provider.iam.makePolicy({
    name: get("config.iam.Policy.awsLoadBalancerControllerIamPolicy.name"),
    namespace: "LoadBalancerControllerRole",
    properties: get(
      "config.iam.Policy.awsLoadBalancerControllerIamPolicy.properties"
    ),
  });

  provider.iam.makeRole({
    name: get("config.iam.Role.roleCluster.name"),
    namespace: "EKS",
    properties: get("config.iam.Role.roleCluster.properties"),
    dependencies: ({ resources }) => ({
      policies: [
        resources.iam.Policy.amazonEksClusterPolicy,
        resources.iam.Policy.amazonEksvpcResourceController,
      ],
    }),
  });

  provider.iam.makeRole({
    name: get("config.iam.Role.roleLoadBalancer.name"),
    namespace: "LoadBalancerControllerRole",
    dependencies: ({ resources }) => ({
      policies: [resources.iam.Policy.awsLoadBalancerControllerIamPolicy],
      openIdConnectProvider: resources.iam.OpenIDConnectProvider.oidcEks,
    }),
  });

  provider.iam.makeRole({
    name: get("config.iam.Role.roleNodeGroup.name"),
    namespace: "EKS",
    properties: get("config.iam.Role.roleNodeGroup.properties"),
    dependencies: ({ resources }) => ({
      policies: [
        resources.iam.Policy.amazonEc2ContainerRegistryReadOnly,
        resources.iam.Policy.amazonEksCniPolicy,
        resources.iam.Policy.amazonEksWorkerNodePolicy,
      ],
    }),
  });

  provider.iam.makeOpenIDConnectProvider({
    name: get("config.iam.OpenIDConnectProvider.oidcEks.name"),
    namespace: "LoadBalancerControllerRole",
    dependencies: ({ resources }) => ({
      cluster: resources.eks.Cluster.cluster,
    }),
  });

  provider.ec2.makeVpc({
    name: get("config.ec2.Vpc.vpc.name"),
    namespace: "VPC",
    properties: get("config.ec2.Vpc.vpc.properties"),
  });

  provider.ec2.makeSubnet({
    name: get("config.ec2.Subnet.subnetPrivateA.name"),
    namespace: "VPC",
    properties: get("config.ec2.Subnet.subnetPrivateA.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeSubnet({
    name: get("config.ec2.Subnet.subnetPrivateB.name"),
    namespace: "VPC",
    properties: get("config.ec2.Subnet.subnetPrivateB.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeSubnet({
    name: get("config.ec2.Subnet.subnetPublicA.name"),
    namespace: "VPC",
    properties: get("config.ec2.Subnet.subnetPublicA.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeSubnet({
    name: get("config.ec2.Subnet.subnetPublicB.name"),
    namespace: "VPC",
    properties: get("config.ec2.Subnet.subnetPublicB.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeElasticIpAddress({
    name: get("config.ec2.ElasticIpAddress.iep.name"),
    namespace: "VPC",
  });

  provider.ec2.makeInternetGateway({
    name: get("config.ec2.InternetGateway.internetGateway.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeNatGateway({
    name: get("config.ec2.NatGateway.natGateway.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      subnet: resources.ec2.Subnet.subnetPublicA,
      eip: resources.ec2.ElasticIpAddress.iep,
    }),
  });

  provider.ec2.makeRouteTable({
    name: get("config.ec2.RouteTable.routeTablePrivateA.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateA],
    }),
  });

  provider.ec2.makeRouteTable({
    name: get("config.ec2.RouteTable.routeTablePrivateB.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [resources.ec2.Subnet.subnetPrivateB],
    }),
  });

  provider.ec2.makeRouteTable({
    name: get("config.ec2.RouteTable.routeTablePublic.name"),
    namespace: "VPC",
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
      subnets: [
        resources.ec2.Subnet.subnetPublicA,
        resources.ec2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.ec2.makeRoute({
    name: get("config.ec2.Route.routePrivateA.name"),
    namespace: "VPC",
    properties: get("config.ec2.Route.routePrivateA.properties"),
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateA,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
  });

  provider.ec2.makeRoute({
    name: get("config.ec2.Route.routePrivateB.name"),
    namespace: "VPC",
    properties: get("config.ec2.Route.routePrivateB.properties"),
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePrivateB,
      natGateway: resources.ec2.NatGateway.natGateway,
    }),
  });

  provider.ec2.makeRoute({
    name: get("config.ec2.Route.routePublic.name"),
    namespace: "VPC",
    properties: get("config.ec2.Route.routePublic.properties"),
    dependencies: ({ resources }) => ({
      routeTable: resources.ec2.RouteTable.routeTablePublic,
      ig: resources.ec2.InternetGateway.internetGateway,
    }),
  });

  provider.ec2.makeSecurityGroup({
    name: get("config.ec2.SecurityGroup.securityGroupCluster.name"),
    namespace: "EKS",
    properties: get("config.ec2.SecurityGroup.securityGroupCluster.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeSecurityGroup({
    name: get("config.ec2.SecurityGroup.securityGroupNode.name"),
    namespace: "EKS",
    properties: get("config.ec2.SecurityGroup.securityGroupNode.properties"),
    dependencies: ({ resources }) => ({
      vpc: resources.ec2.Vpc.vpc,
    }),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: get(
      "config.ec2.SecurityGroupRuleIngress.sgClusterRuleIngressHttps.name"
    ),
    namespace: "EKS",
    properties: get(
      "config.ec2.SecurityGroupRuleIngress.sgClusterRuleIngressHttps.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.ec2.makeSecurityGroupRuleIngress({
    name: get(
      "config.ec2.SecurityGroupRuleIngress.sgRuleNodeGroupIngressCluster.name"
    ),
    namespace: "EKS",
    properties: get(
      "config.ec2.SecurityGroupRuleIngress.sgRuleNodeGroupIngressCluster.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupNode,
      securityGroupFrom: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.ec2.makeSecurityGroupRuleEgress({
    name: get("config.ec2.SecurityGroupRuleEgress.sgClusterRuleEgress.name"),
    namespace: "EKS",
    properties: get(
      "config.ec2.SecurityGroupRuleEgress.sgClusterRuleEgress.properties"
    ),
    dependencies: ({ resources }) => ({
      securityGroup: resources.ec2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.ec2.makeLaunchTemplate({
    name: get("config.ec2.LaunchTemplate.ltNodeGroupPrivateCluster.name"),
    namespace: "EKS",
    properties: get(
      "config.ec2.LaunchTemplate.ltNodeGroupPrivateCluster.properties"
    ),
  });

  provider.eks.makeCluster({
    name: get("config.eks.Cluster.cluster.name"),
    namespace: "EKS",
    properties: get("config.eks.Cluster.cluster.properties"),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.ec2.Subnet.subnetPrivateA,
        resources.ec2.Subnet.subnetPrivateB,
        resources.ec2.Subnet.subnetPublicA,
        resources.ec2.Subnet.subnetPublicB,
      ],
      securityGroups: [
        resources.ec2.SecurityGroup.securityGroupCluster,
        resources.ec2.SecurityGroup.securityGroupNode,
      ],
      role: resources.iam.Role.roleCluster,
    }),
  });

  provider.eks.makeNodeGroup({
    name: get("config.eks.NodeGroup.nodeGroupPrivateCluster.name"),
    namespace: "EKS",
    properties: get("config.eks.NodeGroup.nodeGroupPrivateCluster.properties"),
    dependencies: ({ resources }) => ({
      cluster: resources.eks.Cluster.cluster,
      subnets: [
        resources.ec2.Subnet.subnetPrivateA,
        resources.ec2.Subnet.subnetPrivateB,
      ],
      role: resources.iam.Role.roleNodeGroup,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
