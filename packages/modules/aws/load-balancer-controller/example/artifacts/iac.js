// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/16",
      DnsSupport: true,
      DnsHostnames: true,
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "shared",
        },
      ],
    }),
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeNatGateway({
    name: "nat-gateway",
    dependencies: ({ resources }) => ({
      subnet: resources.EC2.Subnet.subnetPublicA,
      eip: resources.EC2.ElasticIpAddress.iep,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.96.0/19",
      AvailabilityZone: "eu-west-2a",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.128.0/19",
      AvailabilityZone: "eu-west-2b",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/internal-elb",
          Value: "1",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: "eu-west-2a",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: "eu-west-2b",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "shared",
        },
        {
          Key: "kubernetes.io/role/elb",
          Value: "1",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-a",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [resources.EC2.Subnet.subnetPrivateA],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-b",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [resources.EC2.Subnet.subnetPrivateB],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-public",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: "route-private-a",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePrivateA,
      natGateway: resources.EC2.NatGateway.natGateway,
    }),
  });

  provider.EC2.makeRoute({
    name: "route-private-b",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePrivateB,
      natGateway: resources.EC2.NatGateway.natGateway,
    }),
  });

  provider.EC2.makeRoute({
    name: "route-public",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePublic,
      ig: resources.EC2.InternetGateway.internetGateway,
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "security-group-cluster",
    properties: ({ config }) => ({
      Description: "Managed By GruCloud",
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSecurityGroup({
    name: "security-group-node",
    properties: ({ config }) => ({
      Description: "Managed By GruCloud",
      Tags: [
        {
          Key: "kubernetes.io/cluster/cluster",
          Value: "owned",
        },
      ],
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "sg-cluster-rule-ingress-https",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 443,
        ToPort: 443,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        Ipv6Ranges: [
          {
            CidrIpv6: "::/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.EC2.makeSecurityGroupRuleIngress({
    name: "sg-rule-node-group-ingress-cluster",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 1025,
        ToPort: 65535,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        Ipv6Ranges: [
          {
            CidrIpv6: "::/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupNode,
      securityGroupFrom: resources.EC2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.EC2.makeSecurityGroupRuleEgress({
    name: "sg-cluster-rule-egress",
    properties: ({ config }) => ({
      IpPermission: {
        IpProtocol: "tcp",
        FromPort: 1024,
        ToPort: 65535,
        IpRanges: [
          {
            CidrIp: "0.0.0.0/0",
          },
        ],
        Ipv6Ranges: [
          {
            CidrIpv6: "::/0",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      securityGroup: resources.EC2.SecurityGroup.securityGroupCluster,
    }),
  });

  provider.EC2.makeElasticIpAddress({
    name: "iep",
  });

  provider.EC2.makeLaunchTemplate({
    name: "lt-node-group-private-cluster",
    properties: ({ config }) => ({
      LaunchTemplateData: {
        BlockDeviceMappings: [
          {
            DeviceName: "/dev/xvda",
            Ebs: {
              DeleteOnTermination: true,
              VolumeSize: 20,
              VolumeType: "gp2",
            },
          },
        ],
        ImageId: "ami-07bf8663601a643e9",
        InstanceType: "t2.small",
        UserData:
          "TUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7IGJvdW5kYXJ5PSIvLyIKCi0tLy8KQ29udGVudC1UeXBlOiB0ZXh0L3gtc2hlbGxzY3JpcHQ7IGNoYXJzZXQ9InVzLWFzY2lpIgojIS9iaW4vYmFzaApzZXQgLWV4CkI2NF9DTFVTVEVSX0NBPUxTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVU0xZWtORFFXTXJaMEYzU1VKQlowbENRVVJCVGtKbmEzRm9hMmxIT1hjd1FrRlJjMFpCUkVGV1RWSk5kMFZSV1VSV1VWRkVSWGR3Y21SWFNtd0tZMjAxYkdSSFZucE5RalJZUkZSSmVFMVVRWGhOVkVWNVRXcFJlRTB4YjFoRVZFMTRUVlJCZDA5VVJYbE5hbEY0VFRGdmQwWlVSVlJOUWtWSFFURlZSUXBCZUUxTFlUTldhVnBZU25WYVdGSnNZM3BEUTBGVFNYZEVVVmxLUzI5YVNXaDJZMDVCVVVWQ1FsRkJSR2RuUlZCQlJFTkRRVkZ2UTJkblJVSkJUVlo2Q2tWNmFHWlhUelF2VHpJeE5HNXRlbEYwUzIwNE15dEhNVWx4YUhkaGJVVnVUamRWYXpSWVVXdG9lbWhXVlhJdlZGZHNjR3RUUjNkb2RIbGlaMHB6TkRRS1lrVkxiMnB0Y21GNGJqUTFhRWxYWldWdGJraHNNV1ZLWm05UlpFTjJWMWg1UlN0ek1HVnJSRWhEWjJsdVJrVXJZbkJuVjJrMmFYbGtSRzF4UjJGbFZ3cFBhR1YxYzB4QlpIRXZTa2M1Y1M4NWFrcG1ZM05YV0dWUVR6ZzRNMGRzU2tjd1RrSk1RbEY0VWxnMmVsTm9lRWRQYms5QmRtUjBPRlJUTDNOd1YwNHdDa0oxVVZoR1VFNU5TVEZLVDJ4d01tdHBUVGtyVFhCb1ExaGxUa2hLZEZoV1lVZGtWWEk1VDNKR1owYzNWVGxJYVV0d2VEUk1UREp3U3pKNFRDOUNhVVFLVW04MmNrcHhibm80ZWtoWVZtdHVTREpCUjJsbGNXSlpaR1ZpYUhGak1IbHhaazlJT0ZweVMyTTNkbUphY0VKNFJEQlVibFJNYkVKb1UyMUlSM05PTVFwTlJXNUlNSGxPYTJGek1tOHZSRWhOVkZaalEwRjNSVUZCWVU1RFRVVkJkMFJuV1VSV1VqQlFRVkZJTDBKQlVVUkJaMHRyVFVFNFIwRXhWV1JGZDBWQ0NpOTNVVVpOUVUxQ1FXWTRkMGhSV1VSV1VqQlBRa0paUlVaRk1YTnlMM0pNSzJrd1dsTTBNME5WTVc1T05sUlRMelZWVjFkTlFUQkhRMU54UjFOSllqTUtSRkZGUWtOM1ZVRkJORWxDUVZGQk5GUXlWbmd2Ukd0VWVHbHRiMWgwVDNST1EwVTRkVGRGVm5GV1dGcDRXalZxTTJOUU0zUm1XbTFRT0ZGNVdpOUlTQXBCUTBoRWMyRkdkemRtTm5veVpGUkhOMFJ6YmpBeFRubGhaelpqU205clpsZDZlVTlNWVdObFltUlBjVWh4YWl0VlprWnRhMVZ6ZVNzMU4yVlNhelpRQ2tWSVJrdFNUSEJYUzNnNVRtNXhkVEI1TUV4RFJXbEJNV0pwZHpSVU5YVk1hRmRYVkVSd2JFVXhWMjFSYkRZcllsRmlPVnBIZVdaaWFGaFJkbTVOZUNzS1kyUjNXbWM0U3l0d01GRk9WM1ZGTTJWU2NqaHFUVkk1TVZBM2RYbHVVMVJKVG5KUGRIUkdaMDgwUjNwbVkxUkhkeXRDV0c4NFR6a3JTbUpKUkcwemNncHdVVkZsUTBvNE5tTnBTbFl3TkRFMVppc3hlVmxNTUhOaU9XUlRTa0ZqVGsxTFIySndRa3AzYVZkcWVIQmFVamgyYm14aVkzYzBSbWdyZVdadVFtaHdDbkZGYlVRck9VSnpiRU5tVXpKdVlrdzVjR2N4Y21JM2FVVkdXR053YUhGSldHVkNlUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CkFQSV9TRVJWRVJfVVJMPWh0dHBzOi8vNzZERUMwNzE1RUMzQUIxQTkwNjM3RkNBMzE4MjQzOTguZ3I3LmV1LXdlc3QtMi5la3MuYW1hem9uYXdzLmNvbQpLOFNfQ0xVU1RFUl9ETlNfSVA9MTAuMTAwLjAuMTAKL2V0Yy9la3MvYm9vdHN0cmFwLnNoIGNsdXN0ZXIgLS1rdWJlbGV0LWV4dHJhLWFyZ3MgJy0tbm9kZS1sYWJlbHM9ZWtzLmFtYXpvbmF3cy5jb20vbm9kZWdyb3VwLWltYWdlPWFtaS0wN2JmODY2MzYwMWE2NDNlOSxla3MuYW1hem9uYXdzLmNvbS9jYXBhY2l0eVR5cGU9T05fREVNQU5ELGVrcy5hbWF6b25hd3MuY29tL25vZGVncm91cD1ub2RlLWdyb3VwLXByaXZhdGUtY2x1c3RlcicgLS1iNjQtY2x1c3Rlci1jYSAkQjY0X0NMVVNURVJfQ0EgLS1hcGlzZXJ2ZXItZW5kcG9pbnQgJEFQSV9TRVJWRVJfVVJMIC0tZG5zLWNsdXN0ZXItaXAgJEs4U19DTFVTVEVSX0ROU19JUAoKLS0vLy0t",
        MetadataOptions: {
          HttpPutResponseHopLimit: 2,
        },
      },
      Tags: [
        {
          Key: "eks:cluster-name",
          Value: "cluster",
        },
        {
          Key: "eks:nodegroup-name",
          Value: "node-group-private-cluster",
        },
      ],
    }),
  });

  provider.EKS.makeCluster({
    name: "cluster",
    properties: ({ config }) => ({
      version: "1.21",
    }),
    dependencies: ({ resources }) => ({
      subnets: [
        resources.EC2.Subnet.subnetPrivateA,
        resources.EC2.Subnet.subnetPrivateB,
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
      securityGroups: [
        resources.EC2.SecurityGroup.securityGroupCluster,
        resources.EC2.SecurityGroup.securityGroupNode,
      ],
      role: resources.IAM.Role.roleCluster,
    }),
  });

  provider.EKS.makeNodeGroup({
    name: "node-group-private-cluster",
    properties: ({ config }) => ({
      capacityType: "ON_DEMAND",
      scalingConfig: {
        minSize: 1,
        maxSize: 1,
        desiredSize: 1,
      },
      instanceTypes: ["t2.small"],
      amiType: "AL2_x86_64",
      labels: {},
      diskSize: 20,
    }),
    dependencies: ({ resources }) => ({
      cluster: resources.EKS.Cluster.cluster,
      subnets: [
        resources.EC2.Subnet.subnetPrivateA,
        resources.EC2.Subnet.subnetPrivateB,
      ],
      role: resources.IAM.Role.roleNodeGroup,
    }),
  });

  provider.IAM.makeOpenIDConnectProvider({
    name: "oidc-eks",
    dependencies: ({ resources }) => ({
      cluster: resources.EKS.Cluster.cluster,
    }),
  });

  provider.IAM.makeRole({
    name: "AppsyncCdkAppStack-ApilambdaDatasourceServiceRole2-16MFRGNSNCKYY",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "appsync.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
  });

  provider.IAM.makeRole({
    name: "AppsyncCdkAppStack-AppSyncNotesHandlerServiceRole3-ME4D96ZFJKTZ",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "lambda.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
      ],
    }),
  });

  provider.IAM.makeRole({
    name: "role-cluster",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "eks.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [
        resources.IAM.Policy.amazonEksClusterPolicy,
        resources.IAM.Policy.amazonEksvpcResourceController,
      ],
    }),
  });

  provider.IAM.makeRole({
    name: "role-load-balancer",
    dependencies: ({ resources }) => ({
      policies: [resources.IAM.Policy.awsLoadBalancerControllerIamPolicy],
      openIdConnectProvider: resources.IAM.OpenIDConnectProvider.oidcEks,
    }),
  });

  provider.IAM.makeRole({
    name: "role-node-group",
    properties: ({ config }) => ({
      Path: "/",
      AssumeRolePolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Principal: {
              Service: "ec2.amazonaws.com",
            },
            Action: "sts:AssumeRole",
          },
        ],
      },
    }),
    dependencies: ({ resources }) => ({
      policies: [
        resources.IAM.Policy.amazonEc2ContainerRegistryReadOnly,
        resources.IAM.Policy.amazonEksCniPolicy,
        resources.IAM.Policy.amazonEksWorkerNodePolicy,
      ],
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEC2ContainerRegistryReadOnly",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEKS_CNI_Policy",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEKSClusterPolicy",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEKSVPCResourceController",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
    }),
  });

  provider.IAM.usePolicy({
    name: "AmazonEKSWorkerNodePolicy",
    properties: ({ config }) => ({
      Arn: "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
    }),
  });

  provider.IAM.makePolicy({
    name: "AWSLoadBalancerControllerIAMPolicy",
    properties: ({ config }) => ({
      PolicyDocument: {
        Version: "2012-10-17",
        Statement: [
          {
            Effect: "Allow",
            Action: [
              "iam:CreateServiceLinkedRole",
              "ec2:DescribeAccountAttributes",
              "ec2:DescribeAddresses",
              "ec2:DescribeInternetGateways",
              "ec2:DescribeVpcs",
              "ec2:DescribeSubnets",
              "ec2:DescribeSecurityGroups",
              "ec2:DescribeInstances",
              "ec2:DescribeNetworkInterfaces",
              "ec2:DescribeTags",
              "ec2:GetCoipPoolUsage",
              "ec2:DescribeCoipPools",
              "elasticloadbalancing:DescribeLoadBalancers",
              "elasticloadbalancing:DescribeLoadBalancerAttributes",
              "elasticloadbalancing:DescribeListeners",
              "elasticloadbalancing:DescribeListenerCertificates",
              "elasticloadbalancing:DescribeSSLPolicies",
              "elasticloadbalancing:DescribeRules",
              "elasticloadbalancing:DescribeTargetGroups",
              "elasticloadbalancing:DescribeTargetGroupAttributes",
              "elasticloadbalancing:DescribeTargetHealth",
              "elasticloadbalancing:DescribeTags",
            ],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: [
              "cognito-idp:DescribeUserPoolClient",
              "acm:ListCertificates",
              "acm:DescribeCertificate",
              "iam:ListServerCertificates",
              "iam:GetServerCertificate",
              "waf-regional:GetWebACL",
              "waf-regional:GetWebACLForResource",
              "waf-regional:AssociateWebACL",
              "waf-regional:DisassociateWebACL",
              "wafv2:GetWebACL",
              "wafv2:GetWebACLForResource",
              "wafv2:AssociateWebACL",
              "wafv2:DisassociateWebACL",
              "shield:GetSubscriptionState",
              "shield:DescribeProtection",
              "shield:CreateProtection",
              "shield:DeleteProtection",
            ],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
            ],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: ["ec2:CreateSecurityGroup"],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: ["ec2:CreateTags"],
            Resource: "arn:aws:ec2:*:*:security-group/*",
            Condition: {
              StringEquals: {
                "ec2:CreateAction": "CreateSecurityGroup",
              },
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: ["ec2:CreateTags", "ec2:DeleteTags"],
            Resource: "arn:aws:ec2:*:*:security-group/*",
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: [
              "ec2:AuthorizeSecurityGroupIngress",
              "ec2:RevokeSecurityGroupIngress",
              "ec2:DeleteSecurityGroup",
            ],
            Resource: "*",
            Condition: {
              Null: {
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:CreateLoadBalancer",
              "elasticloadbalancing:CreateTargetGroup",
            ],
            Resource: "*",
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:CreateListener",
              "elasticloadbalancing:DeleteListener",
              "elasticloadbalancing:CreateRule",
              "elasticloadbalancing:DeleteRule",
            ],
            Resource: "*",
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:AddTags",
              "elasticloadbalancing:RemoveTags",
            ],
            Resource: [
              "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
              "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*",
            ],
            Condition: {
              Null: {
                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:ModifyLoadBalancerAttributes",
              "elasticloadbalancing:SetIpAddressType",
              "elasticloadbalancing:SetSecurityGroups",
              "elasticloadbalancing:SetSubnets",
              "elasticloadbalancing:DeleteLoadBalancer",
              "elasticloadbalancing:ModifyTargetGroup",
              "elasticloadbalancing:ModifyTargetGroupAttributes",
              "elasticloadbalancing:DeleteTargetGroup",
            ],
            Resource: "*",
            Condition: {
              Null: {
                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false",
              },
            },
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:RegisterTargets",
              "elasticloadbalancing:DeregisterTargets",
            ],
            Resource: "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
          },
          {
            Effect: "Allow",
            Action: [
              "elasticloadbalancing:SetWebAcl",
              "elasticloadbalancing:ModifyListener",
              "elasticloadbalancing:AddListenerCertificates",
              "elasticloadbalancing:RemoveListenerCertificates",
              "elasticloadbalancing:ModifyRule",
            ],
            Resource: "*",
          },
        ],
      },
      Path: "/",
      Description: "Load Balancer Policy",
    }),
  });

  provider.KMS.makeKey({
    name: "eks-key",
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
