// Generated by aws2gc
const { AwsProvider } = require("@grucloud/provider-aws");

const createResources = ({ provider }) => {
  provider.EC2.makeVpc({
    name: "vpc",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/16",
      DnsSupport: true,
      DnsHostnames: true,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.96.0/19",
      AvailabilityZone: "eu-west-2a",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-private-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.128.0/19",
      AvailabilityZone: "eu-west-2b",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-a",
    properties: ({ config }) => ({
      CidrBlock: "192.168.0.0/19",
      AvailabilityZone: "eu-west-2a",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeSubnet({
    name: "subnet-public-b",
    properties: ({ config }) => ({
      CidrBlock: "192.168.32.0/19",
      AvailabilityZone: "eu-west-2b",
      MapPublicIpOnLaunch: false,
      MapCustomerOwnedIpOnLaunch: false,
    }),
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeElasticIpAddress({
    name: "iep",
  });

  provider.EC2.makeInternetGateway({
    name: "internet-gateway",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
    }),
  });

  provider.EC2.makeNatGateway({
    name: "nat-gateway",
    dependencies: ({ resources }) => ({
      subnet: resources.EC2.Subnet.subnetPublicA,
      eip: resources.EC2.ElasticIpAddress.iep,
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-a",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [resources.EC2.Subnet.subnetPrivateA],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-private-b",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [resources.EC2.Subnet.subnetPrivateB],
    }),
  });

  provider.EC2.makeRouteTable({
    name: "route-table-public",
    dependencies: ({ resources }) => ({
      vpc: resources.EC2.Vpc.vpc,
      subnets: [
        resources.EC2.Subnet.subnetPublicA,
        resources.EC2.Subnet.subnetPublicB,
      ],
    }),
  });

  provider.EC2.makeRoute({
    name: "route-private-a",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePrivateA,
      natGateway: resources.EC2.NatGateway.natGateway,
    }),
  });

  provider.EC2.makeRoute({
    name: "route-private-b",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePrivateB,
      natGateway: resources.EC2.NatGateway.natGateway,
    }),
  });

  provider.EC2.makeRoute({
    name: "route-public",
    properties: ({ config }) => ({
      DestinationCidrBlock: "0.0.0.0/0",
    }),
    dependencies: ({ resources }) => ({
      routeTable: resources.EC2.RouteTable.routeTablePublic,
      ig: resources.EC2.InternetGateway.internetGateway,
    }),
  });
};

exports.createResources = createResources;

exports.createStack = async ({ createProvider }) => {
  const provider = createProvider(AwsProvider, { config: require("./config") });
  createResources({
    provider,
  });

  return {
    provider,
  };
};
